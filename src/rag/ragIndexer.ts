import { Document } from 'langchain/document';
import * as fs from 'fs';
import * as path from 'path';
import { XenovaEmbeddings } from './xenovaEmbeddings';
import * as fsExtra from 'fs-extra';

const EMBEDDINGS_MODEL_NAME = 'Xenova/all-MiniLM-L6-v2';
const VECTOR_STORE_PATH = process.env.RAG_WORKING_DIRECTORY ?? './vdb';
// –ü–∞–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
const IGNORED_PATTERNS = [
  // –°–∫—Ä—ã—Ç—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ñ–∞–π–ª—ã
  '**/node_modules/**',
  '**/.git/**',
  '**/.vscode/**',
  '**/.idea/**', // IntelliJ IDEA
  '**/.DS_Store/**', // macOS
  '**/Thumbs.db', // Windows

  // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–±–æ—Ä–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  '**/dist/**',
  '**/build/**',
  '**/.next/**', // Next.js
  '**/out/**', // Next.js export
  '**/coverage/**', // –¢–µ—Å—Ç—ã
  '**/.nyc_output/**', // NYC coverage

  // –§–∞–π–ª—ã —Å—Ä–µ–¥—ã –∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
  '**/.env*', // .env, .env.local, .env.production –∏ —Ç.–¥.
  '**/.npmrc', // npm config
  '**/.yarnrc', // yarn config
  '**/yarn.lock',
  '**/package-lock.json',
  '**/pnpm-lock.yaml',

  // –õ–æ–≥–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  '**/*.log',
  '**/tmp/**',
  '**/temp/**',

  // IDE –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä—ã
  '**/*.swp', // Vim swap files
  '**/*.swo', // Vim swap files
  '**/*.swn', // Vim swap files
  '**/*.tmp', // Generic temp files
  '**/*.bak', // Backup files

  // –ë–∏–Ω–∞—Ä–Ω—ã–µ –∏ –Ω–µ—á–∏—Ç–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã (–ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é)
  '**/*.jpg',
  '**/*.png',
  '**/*.gif',
  '**/*.webp',
  '**/*.glb',
  '**/*.jpeg',
  '**/*.svg',
];
// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_EXTENSIONS = ['.ts', '.tsx', '.js', '.jsx', '.md', '.txt'];

// --- –£–ª—É—á—à–µ–Ω–Ω—ã–π TextSplitter ---
/**
 * –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–±–µ–≥–∞—Ç—å —Ä–∞–∑—Ä—ã–≤–æ–≤
 * –≤–Ω—É—Ç—Ä–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞, –æ—Å–æ–±–µ–Ω–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤/—ç–∫—Å–ø–æ—Ä—Ç–æ–≤.
 */
class CodeAwareTextSplitter {
  private chunkSize: number;
  private chunkOverlap: number;
  private readonly BLOCK_START_TOKENS = [
    /^\s*import\s/, // import statement
    /^\s*export\s/, // export statement
    /^\s*interface\s+\w/, // interface SomeInterface
    /^\s*type\s+\w/, // type SomeType = ...
    /^\s*enum\s+\w/, // enum SomeEnum
    /^\s*class\s+\w/, // class SomeClass
    /^\s*abstract\s+class\s+\w/, // abstract class SomeClass
  ];
  // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å—á–∏—Ç–∞—é—Ç—Å—è "–Ω–∞—á–∞–ª–æ–º –±–ª–æ–∫–∞" –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
  private readonly NON_BLOCK_LINES = [
    /^\s*$/, // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    /^\s*\/\//, // –û–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π //
    /^\s*\/\*/, // –ù–∞—á–∞–ª–æ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è /*
    /^\s*\*/, // –°—Ç—Ä–æ–∫–∞ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è *
    /^\s*\*\//, // –ö–æ–Ω–µ—Ü –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è */
  ];

  constructor(chunkSize: number = 1000, chunkOverlap: number = 200) {
    this.chunkSize = chunkSize;
    this.chunkOverlap = chunkOverlap;
  }

  async splitText(text: string): Promise<string[]> {
    const lines = text.split('\n');
    const chunks: string[] = [];
    let currentChunk: string[] = [];
    let currentLength = 0;

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const lineLength = line.length + 1; // +1 for newline character

      // –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—Å–∏—Ç —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
      if (
        currentLength + lineLength > this.chunkSize &&
        currentChunk.length > 0
      ) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
        chunks.push(currentChunk.join('\n'));

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å –∫–∞–∫–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —á–∞–Ω–∫ (—Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è)
        let overlapStartIndex = Math.max(
          0,
          i - Math.floor(this.chunkOverlap / 50)
        ); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
        // –ò—â–µ–º –Ω–∞—á–∞–ª–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞ –Ω–∞–∑–∞–¥, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        overlapStartIndex = this.findLogicalBlockStart(
          lines,
          overlapStartIndex,
          i
        );

        // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫ —Å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è
        currentChunk = lines.slice(overlapStartIndex, i);
        currentLength = currentChunk.reduce((sum, l) => sum + l.length + 1, 0);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–µ–∫—É—â–∏–π —á–∞–Ω–∫
      currentChunk.push(line);
      currentLength += lineLength;
    }

    // –ù–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
    if (currentChunk.length > 0) {
      chunks.push(currentChunk.join('\n'));
    }

    return chunks;
  }

  /**
   * –ü—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –Ω–∞—á–∞–ª–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–∫–∞ (–∏–º–ø–æ—Ä—Ç, —ç–∫—Å–ø–æ—Ä—Ç, interface, type, enum, class) –Ω–∞–∑–∞–¥ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏.
   * @param lines –ú–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
   * @param startIndex –ò–Ω–¥–µ–∫—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ.
   * @param currentIndex –¢–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞.
   * @returns –ù–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏—è.
   */
  private findLogicalBlockStart(
    lines: string[],
    startIndex: number,
    currentIndex: number
  ): number {
    // –ò–¥–µ–º –Ω–∞–∑–∞–¥ –æ—Ç —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ (–Ω–µ –¥–∞–ª—å—à–µ startIndex)
    for (let i = currentIndex - 1; i >= startIndex; i--) {
      const line = lines[i];
      const trimmedLine = line.trim();

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      const isNonBlockLine = this.NON_BLOCK_LINES.some((regex) =>
        regex.test(trimmedLine)
      );
      if (isNonBlockLine) {
        continue;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∞–ª–æ–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –Ω–∞—Å –±–ª–æ–∫–∞
      const isBlockStart = this.BLOCK_START_TOKENS.some((regex) =>
        regex.test(trimmedLine)
      );
      if (isBlockStart) {
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–∞—á–∞–ª–æ –±–ª–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∏–Ω–¥–µ–∫—Å.
        // –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç —Ç–∞–∫, —á—Ç–æ –Ω–æ–≤—ã–π —á–∞–Ω–∫ –Ω–∞—á–Ω–µ—Ç—Å—è —Å —ç—Ç–æ–≥–æ –±–ª–æ–∫–∞.
        return i;
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π startIndex
    return startIndex;
  }

  /**
   * –†–∞–∑–¥–µ–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
   * @param documents –ú–∞—Å—Å–∏–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ Langchain.
   * @returns –ú–∞—Å—Å–∏–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
   */
  async splitDocuments(documents: Document[]): Promise<Document[]> {
    const splitDocs: Document[] = [];
    for (const doc of documents) {
      const chunks = await this.splitText(doc.pageContent);
      chunks.forEach((chunk, i) => {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —á–∞–Ω–∫–∞ –∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        splitDocs.push(
          new Document({
            pageContent: chunk,
            metadata: {
              ...doc.metadata,
              chunk_index: i,
            },
          })
        );
      });
    }
    return splitDocs;
  }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ ---
/**
 * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª—ã, –∏—Å–∫–ª—é—á–∞—è —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è fast-glob.
 */
async function findFiles(
  directoryPath: string,
  extensions: string[],
  ignoredPatterns: string[] = IGNORED_PATTERNS
): Promise<string[]> {
  try {
    const absoluteBaseDir = path.resolve(directoryPath);
    console.log(`üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ (–∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å): ${absoluteBaseDir}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(absoluteBaseDir)) {
      console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${absoluteBaseDir}`);
      return [];
    }

    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ fs.readdirSync –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤...');
    const allFiles: string[] = [];

    function scanDirectory(dir: string, relativePath: string = '') {
      try {
        const items = fs.readdirSync(dir);
        for (const item of items) {
          const fullPath = path.join(dir, item);
          const relativeItemPath = path.join(relativePath, item);
          const stat = fs.statSync(fullPath);

          if (stat.isDirectory()) {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ node_modules –∏ dist
            if (item !== 'node_modules' && item !== 'dist') {
              scanDirectory(fullPath, relativeItemPath);
            }
          } else if (stat.isFile()) {
            const ext = path.extname(item).toLowerCase();
            if (extensions.includes(ext)) {
              allFiles.push(fullPath);
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: ${relativeItemPath}`);
            }
          }
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ${dir}:`, (error as Error).message);
      }
    }

    scanDirectory(absoluteBaseDir);

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${allFiles.length}`);
    return allFiles;
  } catch (error) {
    console.error(
      `‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ ${directoryPath}:`,
      (error as Error).message
    );
    return [];
  }
}

async function loadDocumentFromFile(
  filePath: string
): Promise<Document | null> {
  try {
    const content = fs.readFileSync(filePath, 'utf-8');
    const fileExtension = path.extname(filePath).toLowerCase();
    return new Document({
      pageContent: content,
      metadata: { source: filePath, fileType: fileExtension },
    });
  } catch (error) {
    console.warn(
      `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª ${filePath}: ${(error as Error).message}`
    );
    return null;
  }
}

async function indexDirectoryAndSave(
  directoryPath: string,
  fileExtensions: string[] = DEFAULT_EXTENSIONS,
  vectorStorePath: string = VECTOR_STORE_PATH,
  embeddingsModelName: string = EMBEDDINGS_MODEL_NAME,
  chunkSize: number = 1000,
  chunkOverlap: number = 200
) {
  if (!fs.existsSync(directoryPath)) {
    console.error(`‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${directoryPath} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.`);
    return;
  }

  console.log(`\n--- üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ ---`);
  console.log(`üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: ${directoryPath}`);
  console.log(`üíæ –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è VDB: ${vectorStorePath}`);
  console.log(`ü§ñ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: ${embeddingsModelName}`);
  console.log(`üìè –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞: ${chunkSize}, –ü–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ: ${chunkOverlap}`);

  // 1. –ù–∞–π—Ç–∏ —Ñ–∞–π–ª—ã
  const filePaths = await findFiles(directoryPath, fileExtensions);
  if (filePaths.length === 0) {
    console.log('‚ö†Ô∏è –§–∞–π–ª—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    return;
  }
  console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${filePaths.length}`);

  // 2. –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã
  const documents: Document[] = [];
  for (const filePath of filePaths) {
    const doc = await loadDocumentFromFile(filePath);
    if (doc) documents.push(doc);
  }
  if (documents.length === 0) {
    console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç.');
    return;
  }
  console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${documents.length}`);

  // 3. –†–∞–∑–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã —Å —É—á–µ—Ç–æ–º –ª–æ–≥–∏–∫–∏ –∫–æ–¥–∞
  console.log('‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ —á–∞–Ω–∫–∏...');
  const codeAwareSplitter = new CodeAwareTextSplitter(chunkSize, chunkOverlap);
  const splitDocs = await codeAwareSplitter.splitDocuments(documents);
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤: ${splitDocs.length}`);

  // 4. –°–æ–∑–¥–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ VDB
  try {
    console.log(
      `ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: ${embeddingsModelName}...`
    );
    const embeddings = new XenovaEmbeddings(embeddingsModelName);

    console.log('üß† –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...');
    const allEmbeddings = await embeddings.embedDocuments(
      splitDocs.map(doc => doc.pageContent)
    );

    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Å—Ç–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ VDB –≤ ${vectorStorePath}...`);
    await fsExtra.ensureDir(vectorStorePath);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const docstore: Record<string, { pageContent: string; metadata: any }> = {};
    splitDocs.forEach((doc, i) => {
      docstore[`doc_${i}`] = {
        pageContent: doc.pageContent,
        metadata: doc.metadata
      };
    });

    fs.writeFileSync(
      path.join(vectorStorePath, 'docstore.json'),
      JSON.stringify(docstore, null, 2)
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏
    fs.writeFileSync(
      path.join(vectorStorePath, 'embeddings.json'),
      JSON.stringify(allEmbeddings, null, 2)
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = {
      totalDocuments: splitDocs.length,
      embeddingsModel: embeddingsModelName,
      chunkSize,
      chunkOverlap,
      indexedAt: new Date().toISOString()
    };

    fs.writeFileSync(
      path.join(vectorStorePath, 'metadata.json'),
      JSON.stringify(metadata, null, 2)
    );

    console.log('üéâ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏:', (error as Error).message);
    if (error instanceof Error) {
      console.error('–î–µ—Ç–∞–ª–∏:', error.stack);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
export {
  indexDirectoryAndSave,
  VECTOR_STORE_PATH,
  EMBEDDINGS_MODEL_NAME,
  XenovaEmbeddings,
  CodeAwareTextSplitter,
};
