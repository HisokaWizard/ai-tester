import { DynamicTool } from '@langchain/core/tools';
import * as fs from 'fs';
import * as path from 'path';
import {
  EMBEDDINGS_MODEL_NAME,
  VECTOR_STORE_PATH,
  XenovaEmbeddings,
} from '@/rag';

const DEFAULT_TOP_K = 2;

// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
interface DocumentWithEmbedding {
  content: string;
  embedding: number[];
  source: string;
}

// –ü—Ä–æ—Å—Ç–æ–µ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
function cosineSimilarity(a: number[], b: number[]): number {
  if (a.length !== b.length) return 0;
  
  let dotProduct = 0;
  let normA = 0;
  let normB = 0;
  
  for (let i = 0; i < a.length; i++) {
    dotProduct += a[i] * b[i];
    normA += a[i] * a[i];
    normB += b[i] * b[i];
  }
  
  if (normA === 0 || normB === 0) return 0;
  return dotProduct / (Math.sqrt(normA) * Math.sqrt(normB));
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π RAG-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 */
export async function createRagRetrieverTool(
  vectorStorePath: string = VECTOR_STORE_PATH
): Promise<DynamicTool> {
  if (!fs.existsSync(vectorStorePath)) {
    console.error(`‚ùå VDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: ${vectorStorePath}`);
    return new DynamicTool({
      name: 'rag_search',
      description: '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.',
      func: async () => `–û—à–∏–±–∫–∞: VDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ ${vectorStorePath}.`,
    });
  }

  let documents: DocumentWithEmbedding[] = [];
  
  try {
    console.log(`üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ VDB –∏–∑ ${vectorStorePath}...`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ docstore.json
    const docstorePath = path.join(vectorStorePath, 'docstore.json');
    const embeddingsPath = path.join(vectorStorePath, 'embeddings.json');
    
    if (fs.existsSync(docstorePath) && fs.existsSync(embeddingsPath)) {
      const docstoreContent = fs.readFileSync(docstorePath, 'utf-8');
      const embeddingsContent = fs.readFileSync(embeddingsPath, 'utf-8');
      
      const docstore = JSON.parse(docstoreContent);
      const allEmbeddings = JSON.parse(embeddingsContent);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
      const docs = Object.values(docstore).map((doc: any) => doc.pageContent);
      
      if (docs.length > 0 && allEmbeddings.length === docs.length) {
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ ${docs.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ VDB`);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
        documents = docs.map((content, i) => ({
          content,
          embedding: allEmbeddings[i],
          source: `document_${i}`
        }));
        
        console.log('‚úÖ VDB —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏.');
      } else {
        console.warn('‚ö†Ô∏è VDB –ø—É—Å—Ç–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞');
      }
    } else {
      console.error('‚ùå docstore.json –∏–ª–∏ embeddings.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ VDB');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VDB:', (error as Error).message);
    return new DynamicTool({
      name: 'rag_search',
      description: '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.',
      func: async () => `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RAG: ${(error as Error).message}`,
    });
  }

  return new DynamicTool({
    name: 'rag_search',
    description:
      '–ò—Å–ø–æ–ª—å–∑—É–π, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –µ—Å—Ç—å.',
    func: async (input: string) => {
      if (documents.length === 0) return '–û—à–∏–±–∫–∞: VDB –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.';
      
      try {
        console.log(`\nüîç [RAG] –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${input}"`);
        
        // –°–æ–∑–¥–∞—ë–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const embeddings = new XenovaEmbeddings(EMBEDDINGS_MODEL_NAME);
        const queryEmbedding = await embeddings.embedQuery(input);
        
        // –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        const similarities = documents.map(doc => ({
          document: doc,
          similarity: cosineSimilarity(queryEmbedding, doc.embedding)
        }));
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É –∏ –±–µ—Ä—ë–º —Ç–æ–ø-K
        const topResults = similarities
          .sort((a, b) => b.similarity - a.similarity)
          .slice(0, DEFAULT_TOP_K)
          .filter(result => result.similarity > 0.1); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞
        
        if (topResults.length === 0) {
          console.log(`üì≠ [RAG] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${input}".`);
          return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
        }
        
        console.log(`‚úÖ [RAG] –ù–∞–π–¥–µ–Ω–æ ${topResults.length} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.`);
        
        const contextParts = topResults.map((result, i) => {
          const source = result.document.source;
          const similarity = (result.similarity * 100).toFixed(1);
          return `--- –§—Ä–∞–≥–º–µ–Ω—Ç ${i + 1} (–ò—Å—Ç–æ—á–Ω–∏–∫: ${source}, –°—Ö–æ–¥—Å—Ç–≤–æ: ${similarity}%) ---\n${result.document.content}\n`;
        });
        
        return contextParts.join('\n');
      } catch (error) {
        console.error('[RAG] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', (error as Error).message);
        return `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${(error as Error).message}`;
      }
    },
  });
}
