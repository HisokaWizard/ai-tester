import { DynamicTool } from '@langchain/core/tools';
import { HNSWLib } from '@langchain/community/vectorstores/hnswlib';
import * as fs from 'fs';
import {
  EMBEDDINGS_MODEL_NAME,
  VECTOR_STORE_PATH,
  XenovaEmbeddings,
} from '@/rag';

const DEFAULT_TOP_K = 4;

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç RAG, –∑–∞–≥—Ä—É–∂–∞—è VDB —Å –¥–∏—Å–∫–∞.
 */
export async function createRagRetrieverTool(
  vectorStorePath: string = VECTOR_STORE_PATH
): Promise<DynamicTool> {
  if (!fs.existsSync(vectorStorePath)) {
    console.error(`‚ùå VDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: ${vectorStorePath}`);
    return new DynamicTool({
      name: 'rag_search',
      description: '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.',
      func: async () => `–û—à–∏–±–∫–∞: VDB –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ ${vectorStorePath}.`,
    });
  }

  let vectorStore: HNSWLib | null = null;
  try {
    console.log(`üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ VDB –∏–∑ ${vectorStorePath}...`);
    const embeddings = new XenovaEmbeddings(EMBEDDINGS_MODEL_NAME);
    vectorStore = await HNSWLib.load(vectorStorePath, embeddings);
    console.log('‚úÖ VDB —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VDB:', (error as Error).message);
    return new DynamicTool({
      name: 'rag_search',
      description: '–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.',
      func: async () => `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ RAG: ${(error as Error).message}`,
    });
  }

  return new DynamicTool({
    name: 'rag_search',
    description:
      '–ò—Å–ø–æ–ª—å–∑—É–π, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –µ—Å—Ç—å.',
    func: async (input: string) => {
      if (!vectorStore) return '–û—à–∏–±–∫–∞: VDB –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.';
      try {
        console.log(`\nüîç [RAG] –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: "${input}"`);
        const results = await vectorStore.similaritySearchWithScore(
          input,
          DEFAULT_TOP_K
        );

        if (results.length === 0) {
          console.log(`üì≠ [RAG] –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${input}".`);
          return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.';
        }

        console.log(`‚úÖ [RAG] –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤.`);
        const contextParts = results.map(([doc, score], i) => {
          const source = doc.metadata?.source || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          return `--- –§—Ä–∞–≥–º–µ–Ω—Ç ${i + 1} (–ò—Å—Ç–æ—á–Ω–∏–∫: ${source}) ---\n${doc.pageContent}\n`;
        });
        return contextParts.join('\n');
      } catch (error) {
        console.error('[RAG] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', (error as Error).message);
        return `–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${(error as Error).message}`;
      }
    },
  });
}
