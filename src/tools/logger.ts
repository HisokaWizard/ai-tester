import { BaseCallbackHandler } from "@langchain/core/callbacks/base";
import { Serialized } from "@langchain/core/load/serializable";
import { LLMResult } from "@langchain/core/outputs";
import { ChainValues } from "@langchain/core/utils/types";

const COLORS = {
    blue: "\x1b[34m",
    bold: "\x1b[1m",
    brightBlack: "\x1b[90m",
    brightRed: "\x1b[91m",
    cyan: "\x1b[36m",
    green: "\x1b[32m",
    magenta: "\x1b[35m",
    red: "\x1b[31m",
    reset: "\x1b[0m",
    white: "\x1b[37m",
    yellow: "\x1b[33m",
};
/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
 * –†–µ–∞–ª–∏–∑—É–µ—Ç BaseCallbackHandler –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏—Ä–æ–≤–∫—É –≤—Å–µ—Ö —ç—Ç–∞–ø–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
 */
export class VerboseAgentLogger extends BaseCallbackHandler {
    /**
     * –ò–º—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
     */
    name = "VerboseAgentLogger";

    /**
     * –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–∏–ø–æ–≤ —Ü–µ–ø–æ—á–µ–∫ –ø–æ ID
     */
    private chainTypes: Record<string, string> = {};

    /**
     * –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ü–µ–ª–µ–π —Ü–µ–ø–æ—á–µ–∫ –ø–æ ID
     */
    private chainPurposes: Record<string, string> = {};

    /**
     * –°—á—ë—Ç—á–∏–∫ —à–∞–≥–æ–≤ –ø–æ ID —Ü–µ–ø–æ—á–∫–∏
     */
    private stepCounter: Record<string, number> = {};

    /**
     * –¢–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private currentRunId = "";

    /**
     * –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–µ–∫
     */
    private chainStartTime: Record<string, number> = {};

    /**
     * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    private toolTracking: Map<
        string,
        {
            callNumber: number;
            input: string;
            name: string;
            parentRunId?: string;
            startTime: number;
        }
    > = new Map();

    /**
     * –û–±—â–∏–π —Å—á—ë—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    private toolCounter = 0;

    /**
     * –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
     */
    private handledToolRuns: Set<string> = new Set();

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
     * –í—ã–≤–æ–¥–∏—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞
     */
    constructor() {
        super();
        console.log(
            this.formatSection("üöÄ Agent Logger initialized", "", "", COLORS.red)
        );
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —ç–º–æ–¥–∑–∏ –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
     * @param title - –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞
     * @param emoji - —Å–∏–º–≤–æ–ª —ç–º–æ–¥–∑–∏
     * @param content - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–∞–∑–¥–µ–ª–∞
     * @param color - —Ü–≤–µ—Ç–æ–≤–æ–π –∫–æ–¥ ANSI
     * @returns –°—Ç—Ä–æ–∫–∞ —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–æ–º
     */
    private formatSection(
        title: string,
        emoji: string,
        content: string,
        color: string
    ) {
        const separator = `${color}${"‚ïê".repeat(70)}${COLORS.reset}`;
        const timestamp = new Date().toLocaleTimeString();

        if (!content) {
            return `${separator}\n${color}${emoji} ${title} [${timestamp}]${COLORS.reset}\n${separator}`;
        }

        const sectionHeader = `${color}${emoji} ${title} [${timestamp}]${COLORS.reset}`;
        return `${separator}\n${sectionHeader}\n\n${content}\n${separator}`;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º
     * @param key - –∫–ª—é—á
     * @param value - –∑–Ω–∞—á–µ–Ω–∏–µ
     * @param emoji - —ç–º–æ–¥–∑–∏
     * @returns –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
     */
    private formatKeyValue(key: string, value: any, emoji = "‚Ä¢") {
        let formattedValue = value;
        if (key === "Tool") {
            formattedValue = `${COLORS.blue}${COLORS.bold}${value}${COLORS.reset}`;
        } else if (key === "Input") {
            formattedValue = `${COLORS.yellow}${value}${COLORS.reset}`;
        } else if (key === "Output") {
            formattedValue = `${COLORS.magenta}${value}${COLORS.reset}`;
        }
        return `${emoji} ${key.padEnd(1, " ")}: ${formattedValue}`;
    }

    private truncate(
        text: string,
        max = 500,
        truncate = true
    ): string {
        if (!text) return "Empty content";
        return truncate && text.length > max ? `${text.slice(0, max)}...` : text;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private cleanupRun(runId: string) {
        delete this.chainTypes[runId];
        delete this.chainPurposes[runId];
        delete this.stepCounter[runId];
        delete this.chainStartTime[runId];
        for (const [toolRunId, info] of this.toolTracking.entries()) {
            if (info.parentRunId === runId) {
                this.toolTracking.delete(toolRunId);
                this.handledToolRuns.delete(toolRunId);
            }
        }
        if (runId === this.currentRunId) this.currentRunId = "";
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏
     * @param chain - —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞
     * @param inputs - –≤—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
     * @param runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param parentRunId - ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param tags - —Ç–µ–≥–∏
     * @param metadata - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
     */
    handleChainStart(
        chain: Serialized,
        inputs: ChainValues,
        runId: string,
        parentRunId?: string,
        tags?: string[],
        metadata?: Record<string, unknown>,
    ) {
        const chainType = chain.id?.[chain.id.length - 1] || "unknown";
        const chainPurpose = metadata?.purpose || "General purpose";
        this.chainTypes[runId] = chainType;
        this.chainPurposes[runId] = chainPurpose as any;
        this.stepCounter[runId] = 0;
        this.currentRunId = runId;
        this.chainStartTime[runId] = Date.now();

        if (chainType === "RunnableSequence") {
            const title = `üîó CHAIN STARTED üÜî Run ID: ${runId}`;
            console.log(this.formatSection(title, "", "", COLORS.cyan));
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏
     * @param outputs - –≤—ã—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
     * @param runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    handleChainEnd(
        outputs: ChainValues,
        runId: string,
    ) {
        if (this.chainTypes[runId] === "RunnableSequence") {
            const duration = Date.now() - this.chainStartTime[runId];
            const chainType = this.chainTypes[runId];
            const content = [
                this.formatKeyValue("Chain Type", chainType, "üîó"),
                this.formatKeyValue("Duration", `${duration}ms`, "‚è±Ô∏è"),
                this.formatKeyValue("Tools Used", this.toolCounter, "üõ†Ô∏è"),
            ].join("\n");

            console.log(
                this.formatSection("üîó CHAIN COMPLETED ‚úÖ", "", content, COLORS.cyan)
            );

            this.cleanupRun(runId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã LLM
     * @param llm - —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π LLM
     * @param prompts - —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
     * @param runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    handleLLMStart(
        llm: Serialized,
        prompts: string[],
        runId: string,
    ) {
        this.stepCounter[runId]!++;
        console.log(this.formatSection("üß† LLM START", "", "", COLORS.blue));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã LLM
     * @param output - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    handleLLMEnd(
        output: LLMResult,
    ) {
        const response = output.generations?.[0]?.[0]?.text || "No response";
        const content = [
            this.formatKeyValue("Response", this.truncate(response), "üí°"),
        ].join("\n");

        console.log(
            this.formatSection("üß† LLM COMPLETED ‚úÖ", "", content, COLORS.blue)
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * @param tool - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–µ
     * @param input - –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
     * @param runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param parentRunId - ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    handleToolStart(
        tool: { name?: string },
        input: string,
        runId: string,
        parentRunId?: string,
    ) {
        this.toolCounter++;
        const toolName = tool.name || "unknown";
        this.toolTracking.set(runId, {
            callNumber: this.toolCounter,
            input,
            name: toolName,
            parentRunId: parentRunId || this.currentRunId || "None",
            startTime: Date.now(),
        });

        const content = [
            this.formatKeyValue("Call #", this.toolCounter, "#Ô∏è‚É£"),
            this.formatKeyValue("Run ID", runId, "üÜî"),
            this.formatKeyValue(
                "Parent Run",
                parentRunId || this.currentRunId || "None",
                "üë®"
            ),
            this.formatKeyValue("Tool", toolName, "üîß"),
            this.formatKeyValue("Input", this.truncate(input, 500, false), "üì•"),
        ].join("\n");

        console.log(
            this.formatSection(
                `‚ö° TOOL START [${toolName} #${this.toolCounter}]`,
                "",
                content,
                COLORS.magenta
            )
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * @param output - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     * @param runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    handleToolEnd(
        output: string,
        runId: string,
    ) {
        if (this.handledToolRuns.has(runId)) {
            console.error(
                `${COLORS.red}‚ö†Ô∏è Duplicate TOOL END for runId: ${runId}${COLORS.reset}`
            );
            return;
        }
        this.handledToolRuns.add(runId);

        const toolInfo = this.toolTracking.get(runId);
        if (!toolInfo) {
            const content = [
                this.formatKeyValue("Run ID", runId, "üÜî"),
                this.formatKeyValue("Status", "Unknown tool - no start info", "‚ö†Ô∏è"),
            ].join("\n");
            console.log(
                this.formatSection("‚ùì UNKNOWN TOOL COMPLETED", "", content, COLORS.red)
            );
            return;
        }

        const duration = Date.now() - toolInfo.startTime;
        const content = [
            this.formatKeyValue("Call #", toolInfo.callNumber, "#Ô∏è‚É£"),
            this.formatKeyValue("Run ID", runId, "üÜî"),
            this.formatKeyValue("Tool", toolInfo.name, "üîß"),
            this.formatKeyValue("Duration", `${duration}ms`, "‚è±Ô∏è"),
            this.formatKeyValue("Parent Run", toolInfo.parentRunId, "üë®"),
            this.formatKeyValue(
                "Input",
                this.truncate(toolInfo.input, 500, false),
                "üì•"
            ),
            this.formatKeyValue(
                "Output",
                this.truncate(output, 500, false) || "Empty content",
                "üì§"
            ),
        ].join("\n");

        console.log(
            this.formatSection(
                `‚ö° TOOL COMPLETED ‚úÖ [${toolInfo.name} #${toolInfo.callNumber}]`,
                "",
                content,
                COLORS.magenta
            )
        );
        this.toolTracking.delete(runId);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ —Ü–µ–ø–æ—á–∫–∏
     * @param err - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
     * @param runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    handleChainError(
        err: any,
        runId: string,
    ) {
        if (this.chainTypes[runId] === "RunnableSequence") {
            const errorMsg = err.message || err.toString();
            const stack = err.stack || "No stack trace";
            const content = [
                this.formatKeyValue("Error", errorMsg, "‚ùå"),
                this.formatKeyValue("Stack", this.truncate(stack, 500, false), "üìö"),
                this.formatKeyValue("Run ID", runId, "üÜî"),
            ].join("\n");

            console.log(
                this.formatSection("üî• CHAIN ERROR", "", content, COLORS.red)
            );
            console.log(
                `${COLORS.red}${"".repeat(
                    30
                )}\n     üî• AGENT WORK FAILED üî•\n${"".repeat(30)}${COLORS.reset}`
            );
            this.cleanupRun(runId);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ LLM
     * @param err - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
     * @param runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    handleLLMError(
        err: any,
        runId: string,
    ) {
        const errorMsg = err.message || err.toString();
        const stack = err.stack || "No stack trace";
        const content = [
            this.formatKeyValue("Error", errorMsg, "‚ùå"),
            this.formatKeyValue("Stack", this.truncate(stack, 500, false), "üìö"),
            this.formatKeyValue("Run ID", runId, "üÜî"),
        ].join("\n");

        console.log(this.formatSection("üî• LLM ERROR", "", content, COLORS.red));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
     * @param err - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
     * @param runId - ID –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    handleToolError(
        err: any,
        runId: string,
    ) {
        if (this.handledToolRuns.has(runId)) {
            console.error(
                `${COLORS.red}‚ö†Ô∏è Duplicate TOOL ERROR for runId: ${runId}${COLORS.reset}`
            );
            return;
        }
        this.handledToolRuns.add(runId);

        const toolInfo = this.toolTracking.get(runId);
        const errorMsg = err.message || err.toString();
        const stack = err.stack || "No stack trace";

        if (toolInfo) {
            const duration = Date.now() - toolInfo.startTime;
            const content = [
                this.formatKeyValue("Call #", toolInfo.callNumber, "#Ô∏è‚É£"),
                this.formatKeyValue("Tool", toolInfo.name, "üîß"),
                this.formatKeyValue("Run ID", runId, "üÜî"),
                this.formatKeyValue("Duration", `${duration}ms`, "‚è±Ô∏è"),
                this.formatKeyValue("Parent Run", toolInfo.parentRunId, "üë®"),
                this.formatKeyValue(
                    "Input",
                    this.truncate(toolInfo.input, 500, false),
                    "üì•"
                ),
                this.formatKeyValue("Error", errorMsg, "‚ùå"),
                this.formatKeyValue("Stack", this.truncate(stack, 500, false), "üìö"),
            ].join("\n");

            console.log(
                this.formatSection(
                    `üí• TOOL ERROR [${toolInfo.name} #${toolInfo.callNumber}]`,
                    "",
                    content,
                    COLORS.red
                )
            );
            this.toolTracking.delete(runId);
        } else {
            const content = [
                this.formatKeyValue("Run ID", runId, "üÜî"),
                this.formatKeyValue("Error", errorMsg, "‚ùå"),
                this.formatKeyValue("Stack", this.truncate(stack, 500, false), "üìö"),
                this.formatKeyValue("Status", "Unknown tool - no start info", "‚ö†Ô∏è"),
            ].join("\n");

            console.log(this.formatSection("üí• TOOL ERROR", "", content, COLORS.red));
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞
     */
    handleAgentAction(): Promise<void> | void {
        console.log(
            this.formatSection("‚öôÔ∏è AGENT ACTION", "", "", COLORS.brightBlack)
        );
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
     */
    handleAgentEnd(): Promise<void> | void {
        console.log(this.formatSection("üèÅ AGENT FINISH WORK", "", "", COLORS.red));
    }
}