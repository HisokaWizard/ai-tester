[["0",{"pageContent":"**Somnia Blockchain**  \nSomnia is a high-performance Layer 1 blockchain optimized for gaming, social media, and the metaverse, designed to unify fragmented digital ecosystems into a cohesive virtual society . It achieves **400,000 TPS** with sub-second finality and ultra-low fees (under $0.01) via **Multi-Stream Consensus** and **IceDB**, ensuring scalability for real-time applications . EVM-compatible, it enables seamless integration with Ethereum tools while enhancing speed.  \nKey features include **omnichain interoperability**, allowing assets and avatars to traverse metaverses , and a **reactive blockchain** for dynamic dApps responding to on-chain events instantly. Partnerships with Improbable (MSquared) and Ankr bolster infrastructure and developer tools . Somnia also upgrades NFTs into 3D metaverse-compatible objects, enhancing utility . Governed by a decentralized community, it prioritizes creator empowerment and open standards.\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/ReadMe.md","fileType":".md","chunk_index":0}}],["1",{"pageContent":"**Somnia Blockchain**  \nSomnia is a high-performance Layer 1 blockchain optimized for gaming, social media, and the metaverse, designed to unify fragmented digital ecosystems into a cohesive virtual society . It achieves **400,000 TPS** with sub-second finality and ultra-low fees (under $0.01) via **Multi-Stream Consensus** and **IceDB**, ensuring scalability for real-time applications . EVM-compatible, it enables seamless integration with Ethereum tools while enhancing speed.  \nKey features include **omnichain interoperability**, allowing assets and avatars to traverse metaverses , and a **reactive blockchain** for dynamic dApps responding to on-chain events instantly. Partnerships with Improbable (MSquared) and Ankr bolster infrastructure and developer tools . Somnia also upgrades NFTs into 3D metaverse-compatible objects, enhancing utility . Governed by a decentralized community, it prioritizes creator empowerment and open standards.\n\n## Somnia 3D viewer - Presentor of Somnia technologies","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/ReadMe.md","fileType":".md","chunk_index":1}}],["2",{"pageContent":"Somnia is a high-performance Layer 1 blockchain optimized for gaming, social media, and the metaverse, designed to unify fragmented digital ecosystems into a cohesive virtual society . It achieves **400,000 TPS** with sub-second finality and ultra-low fees (under $0.01) via **Multi-Stream Consensus** and **IceDB**, ensuring scalability for real-time applications . EVM-compatible, it enables seamless integration with Ethereum tools while enhancing speed.  \nKey features include **omnichain interoperability**, allowing assets and avatars to traverse metaverses , and a **reactive blockchain** for dynamic dApps responding to on-chain events instantly. Partnerships with Improbable (MSquared) and Ankr bolster infrastructure and developer tools . Somnia also upgrades NFTs into 3D metaverse-compatible objects, enhancing utility . Governed by a decentralized community, it prioritizes creator empowerment and open standards.\n\n## Somnia 3D viewer - Presentor of Somnia technologies\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/ReadMe.md","fileType":".md","chunk_index":2}}],["3",{"pageContent":"Key features include **omnichain interoperability**, allowing assets and avatars to traverse metaverses , and a **reactive blockchain** for dynamic dApps responding to on-chain events instantly. Partnerships with Improbable (MSquared) and Ankr bolster infrastructure and developer tools . Somnia also upgrades NFTs into 3D metaverse-compatible objects, enhancing utility . Governed by a decentralized community, it prioritizes creator empowerment and open standards.\n\n## Somnia 3D viewer - Presentor of Somnia technologies\n\nThis application is 3D visualisation of Somnia opportunities.\nApp has several compartments:\n\n- Multistream consensus\n- IceDB\n- Evm-bytecode optimisation\n- Realtime transactions\n- Partners\n\n# Installation\n\n1. Use npm to install dependencies: `npm install`\n2. Run app: `npm run dev`\n\nRight now - just a dev mode because of app in active development\n\nProject is not my general activity - it is my interesting with Somnia network.\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/ReadMe.md","fileType":".md","chunk_index":3}}],["4",{"pageContent":"Right now - just a dev mode because of app in active development\n\nProject is not my general activity - it is my interesting with Somnia network.\n\nLink to DEMO video: https://www.youtube.com/watch?v=L80RsX9LVy8\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/ReadMe.md","fileType":".md","chunk_index":4}}],["5",{"pageContent":"Вот список LLM с открытым и бесплатным API, а также примеры их подключения на JavaScript:\n\n---\n\n### **1. Mistral AI**\n\n- **Модели**: Mistral 7B, Mixtral 8x7B, Mistral Small/Large.\n- **Особенности**: Высокая скорость обработки, поддержка мультимодальных задач.\n- **Пример запроса на JavaScript**:\n\n```javascript\nconst fetch = require('node-fetch');\nconst response = await fetch('https://api.mistral.ai/v1/chat/completions', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${process.env.MISTRAL_API_KEY}`,\n  },\n  body: JSON.stringify({\n    model: 'mistral-tiny',\n    messages: [\n      { role: 'user', content: 'Кто самый известный французский писатель?' },\n    ],\n  }),\n}).then((response) => response.json());\n```\n\n---\n\n### **2. Google Gemini**\n\n- **Модели**: Gemini Pro, Gemini Flash.\n- **Особенности**: Бесплатный доступ до 1 млн токенов/день для некоторых моделей, требует API-ключ.\n- **Пример генерации текста**:\n\n```javascript","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/UsefulKnowledge.md","fileType":".md","chunk_index":0}}],["6",{"pageContent":"- **Особенности**: Бесплатный доступ до 1 млн токенов/день для некоторых моделей, требует API-ключ.\n- **Пример генерации текста**:\n\n```javascript\nconst fetch = require('node-fetch');\nconst response = await fetch(\n  `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${process.env.GOOGLE_API_KEY}`,\n  {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({\n      contents: [\n        {\n          parts: [{ text: 'Напиши историю о волшебном рюкзаке.' }],\n        },\n      ],\n    }),\n  }\n).then((response) => response.json());\n```\n\n---\n\n### **3. Groq**\n\n- **Модели**: Llama 3, Mixtral 8x7B, Gemma.\n- **Особенности**: Высокая скорость (до 18x быстрее GPU), бесплатный уровень для экспериментов.\n- **Пример использования**:\n\n```javascript\nconst response = await fetch(\n  'https://api.groq.com/openai/v1/chat/completions',\n  {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/UsefulKnowledge.md","fileType":".md","chunk_index":1}}],["7",{"pageContent":"  {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${process.env.GROQ_API_KEY}`,\n    },\n    body: JSON.stringify({\n      model: 'mixtral-8x7b-32768',\n      messages: [\n        { role: 'system', content: 'Ты полезный ассистент.' },\n        { role: 'user', content: 'Привет!' },\n      ],\n    }),\n  }\n).then((response) => response.json());\n```\n\n---\n\n### **4. Hugging Face**\n\n- **Модели**: DeepSeek-R1, Llama 3, Gemma, Mistral (через Inference API).\n- **Особенности**: Бесплатный серверный инференс для моделей <10 ГБ, требуется API-токен.\n- **Пример (адаптация Python-кода под JS)**:\n\n```javascript\n// Для использования моделей через Hugging Face API:\nconst response = await fetch(\n  'https://api-inference.huggingface.co/models/deepseek-ai/DeepSeek-R1-Distill-Qwen-1.5B',\n  {\n    method: 'POST',\n    headers: { Authorization: `Bearer ${process.env.HF_API_KEY}` },\n    body: JSON.stringify({ inputs: 'Как создать Telegram-бота?' }),\n  }","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/UsefulKnowledge.md","fileType":".md","chunk_index":2}}],["8",{"pageContent":"    method: 'POST',\n    headers: { Authorization: `Bearer ${process.env.HF_API_KEY}` },\n    body: JSON.stringify({ inputs: 'Как создать Telegram-бота?' }),\n  }\n).then((response) => response.json());\n```\n\n---\n\n### **5. Qwen (Alibaba)**\n\n- **Модели**: Qwen 2.5 Plus, Qwen2-VL-Max (мультимодальные).\n- **Особенности**: Поддержка русского языка, генерация кода и изображений.\n- **Пример запроса (общий формат)**:\n\n```javascript\n// Используйте базовый шаблон для API Alibaba:\nconst response = await fetch('https://api.qwenlm.ai/v1/chat', {\n  method: 'POST',\n  headers: { Authorization: `Bearer ${process.env.QWEN_API_KEY}` },\n  body: JSON.stringify({\n    messages: [\n      { role: 'user', content: 'Напиши код парсера веб-страниц на Python.' },\n    ],\n  }),\n});\n```\n\n---\n\n### **6. GigaChat (Сбер)**\n\n- **Особенности**: Глубокая поддержка русского языка, интеграция с Kandinsky для генерации изображений.","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/UsefulKnowledge.md","fileType":".md","chunk_index":3}}],["9",{"pageContent":"\n### **6. GigaChat (Сбер)**\n\n- **Особенности**: Глубокая поддержка русского языка, интеграция с Kandinsky для генерации изображений.\n- **Доступ**: Бесплатный через Telegram-бота (`https://t.me/gigachat_bot`), но API требует регистрации через номер телефона.\n\n---\n\n### Важные замечания:\n\n1. **Бесплатные лимиты**: У многих провайдеров (например, Google Gemini, Groq) есть дневные квоты на токены или запросы .\n2. **Регистрация**: Для получения API-ключей часто требуется верификация через email или номер телефона .\n3. **JS-библиотеки**: Для удобства используйте обёртки вроде `huggingface.js` или `groq-sdk`.\n\nДля полного списка моделей и условий использования обратитесь к [репозиторию free-llm-api-resources](https://github.com/cheahjs/free-llm-api-resources) .\n\nexport VITE_ALCHEMY_API_KEY=T16WICHISBEXvsU6t0590PyIC9aUzoZo\nexport VITE_INFURA_API_KEY=f4da9795539c4a6b933bb088f0acc2d5\nexport VITE_ANKR_API_KEY=ae5406ab97c1d4756b5541f55e3ff7a4e57ce76e408817152b81d454d6b07860","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/UsefulKnowledge.md","fileType":".md","chunk_index":4}}],["10",{"pageContent":"export VITE_ANKR_API_KEY=ae5406ab97c1d4756b5541f55e3ff7a4e57ce76e408817152b81d454d6b07860\nexport VITE_SUBGRAPH_API_KEY=\"Bearer JOWEIL4YBX90BVYHCR2L9WI9O\"\nexport DEPLOYER_KEY=\"08c9422e5ce10976936e6dd1bdd06a7ad08b5cbc839d9eb015ee14b94df3cbb4\"\nexport CONTRACT_ADDRESS=\"0xf6aa8Db8312F95502d48F422B6e3EBCCB9d001e9\"\nexport OPEN_ROUTER_API_KEY=\"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\"\nexport STABILITY_API_KEY=\"sk-3BhuVEW5OPCaJhMuuMgCkYqxZCxUAGMkuzQKfWgh6Zo8dqTs\"\nexport NEXT_PUBLIC_GOOGLE_GEMINI_API_KEY=\"AIzaSyAMykvDw1-1e8-4LHijubEwon_lgj50rgk\"\n\ncp -r /root/Projects/somnia_relay_viewer/dist/ /var/www/somniapresentor/\n\nsudo nginx -t\nsudo systemctl reload nginx\n\nСовместить и агента и блокчейн\nРеализовать бота, который каждые N минут задает вопросы по вселенной властелина колец и дает несколько вариантов ответа\nПри этом выбор ответа, это транзакция со ставкой, и чем сложнее вопрос, тем выше уровень ставки","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/UsefulKnowledge.md","fileType":".md","chunk_index":5}}],["11",{"pageContent":"\nСовместить и агента и блокчейн\nРеализовать бота, который каждые N минут задает вопросы по вселенной властелина колец и дает несколько вариантов ответа\nПри этом выбор ответа, это транзакция со ставкой, и чем сложнее вопрос, тем выше уровень ставки\nВсе средства суммируются на контракте, и потом распределяются по победителям, т е если все выбрали один вариант ответа, то просто получат обратно свой вклад, а если кто-то ошибся, то награда будет равномерно распределена между победителями\nЛОР по всем произведениями Толкиена, т е не только сюжет LOTR, а полностью все что касается Middle Earth во всех эпохах - тут надо будет надрочить агента\nНужен также дизайн и генерация изображения на тему вопроса/загадки, тут мне пиздец, нужно будет привлекать помощь\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/UsefulKnowledge.md","fileType":".md","chunk_index":6}}],["12",{"pageContent":"require('@nomiclabs/hardhat-ethers');\n\nrequire('dotenv').config();\n\nconst key = process.env.DEPLOYER_KEY;\nif (!key) {\n  console.warn('⚠️ Variable DEPLOYER_KEY not exists in the .env');\n}\n\nmodule.exports = {\n  solidity: '0.8.22',\n  networks: {\n    somnia: {\n      url: 'https://rpc.ankr.com/somnia_testnet/',\n      chainId: 50312,\n      accounts: key ? [key] : [],\n      timeout: 60000,\n    },\n  },\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/hardhat.config.js","fileType":".js","chunk_index":0}}],["13",{"pageContent":"/// <reference types=\"vite/client\" />\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/vite-env.d.ts","fileType":".ts","chunk_index":0}}],["14",{"pageContent":"import { defineConfig, loadEnv } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\nexport default defineConfig(({ command, mode }) => {\n  const env = loadEnv(mode, process.cwd(), '');\n  return {\n    root: path.resolve(__dirname, '.'),\n    plugins: [react()],\n    publicDir: 'public',\n    build: {\n      outDir: 'dist',\n      rollupOptions: {\n        input: {\n          main: path.resolve(__dirname, 'index.html'),\n        },\n        output: {\n          manualChunks: {\n            vendor_three: ['three'],\n            vendor_react: [\n              'react',\n              'react-dom',\n              'react-router',\n              'react-router-dom',\n            ],\n            vendor_3d: ['@react-three/fiber', '@react-three/drei'],\n            vendor_web3: ['axios', 'web3'],\n          },\n        },\n      },\n    },\n    assetsInclude: [\n      '**/*.jpg',\n      '**/*.png',\n      '**/*.glb',\n      '**/*.jpeg',\n      '**/*.webp',\n      '**/*.svg',\n      '**/*.gif',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/vite.config.js","fileType":".js","chunk_index":0}}],["15",{"pageContent":"      '**/*.jpeg',\n      '**/*.webp',\n      '**/*.svg',\n      '**/*.gif',\n    ],\n    server: {\n      port: 12021,\n      open: true,\n      host: true,\n      strictPort: true,\n      historyApiFallback: true,\n    },\n    resolve: {\n      alias: {\n        '@': path.resolve(__dirname, 'src'),\n      },\n    },\n    define: {\n      'process.env.VITE_ALCHEMY_API_KEY': JSON.stringify(\n        env.VITE_ALCHEMY_API_KEY\n      ),\n      'process.env.VITE_INFURA_API_KEY': JSON.stringify(\n        env.VITE_INFURA_API_KEY\n      ),\n      'process.env.VITE_ANKR_API_KEY': JSON.stringify(env.VITE_ANKR_API_KEY),\n      'process.env.VITE_SUBGRAPH_API_KEY': JSON.stringify(\n        env.VITE_SUBGRAPH_API_KEY\n      ),\n      'process.env.CONTRACT_ADDRESS': JSON.stringify(env.CONTRACT_ADDRESS),\n      'process.env.OPEN_ROUTER_API_KEY': JSON.stringify(\n        env.OPEN_ROUTER_API_KEY\n      ),\n      'process.env.STABILITY_API_KEY': JSON.stringify(env.STABILITY_API_KEY),","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/vite.config.js","fileType":".js","chunk_index":1}}],["16",{"pageContent":"      'process.env.OPEN_ROUTER_API_KEY': JSON.stringify(\n        env.OPEN_ROUTER_API_KEY\n      ),\n      'process.env.STABILITY_API_KEY': JSON.stringify(env.STABILITY_API_KEY),\n      'process.env.NEXT_PUBLIC_GOOGLE_GEMINI_API_KEY': JSON.stringify(\n        env.NEXT_PUBLIC_GOOGLE_GEMINI_API_KEY\n      ),\n      'process.env.CONTRACT_QUIZ_ADDRESS': JSON.stringify(\n        env.CONTRACT_QUIZ_ADDRESS\n      ),\n      'process.env.DEPLOYER_ADDRESS': JSON.stringify(env.DEPLOYER_ADDRESS),\n      'process.env.CONTRACT_NFT_STAKING': JSON.stringify(\n        env.CONTRACT_NFT_STAKING\n      ),\n      'process.env.BASE_URL': JSON.stringify('/'),\n    },\n  };\n});\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/vite.config.js","fileType":".js","chunk_index":2}}],["17",{"pageContent":"import pkg from 'hardhat';\nconst { ethers } = pkg;\n\nasync function main() {\n  console.log('Deploying GameLifecycleNative contract...');\n\n  const GameLifecycleNative = await ethers.getContractFactory(\n    'GameLifecycleNative'\n  );\n\n  const gameContract = await GameLifecycleNative.deploy();\n\n  await gameContract.deployed();\n\n  console.log(\n    `GameLifecycleNative contract deployed to: ${gameContract.address}`\n  );\n}\n\nmain().catch(console.error);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/scripts/deploy.js","fileType":".js","chunk_index":0}}],["18",{"pageContent":"import pkg from 'hardhat';\nconst { ethers } = pkg;\n\nasync function main() {\n  console.log('Deploying NFTStaking contract...');\n\n  const NFTStaking = await ethers.getContractFactory('NFTStaking');\n\n  const rewardTokenAddress = '0xF2F773753cEbEFaF9b68b841d80C083b18C69311';\n  const nftCollectionAddress = '0xD138b32A0f66E2891D6F7f33B576f9917f657C99';\n\n  const nftStaking = await NFTStaking.deploy(\n    nftCollectionAddress,\n    rewardTokenAddress\n  );\n\n  await nftStaking.deployed();\n\n  console.log(`NFTStaking contract deployed to: ${nftStaking.address}`);\n}\n\nmain().catch(console.error);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/scripts/deploy_nft_staking.js","fileType":".js","chunk_index":0}}],["19",{"pageContent":"import pkg from 'hardhat';\nconst { ethers } = pkg;\n\nasync function main() {\n  console.log('Deploying OptimizedQuizGame contract...');\n\n  const OptimizedQuizGame =\n    await ethers.getContractFactory('OptimizedQuizGame');\n\n  const gameContract = await OptimizedQuizGame.deploy();\n\n  await gameContract.deployed();\n\n  console.log(\n    `OptimizedQuizGame contract deployed to: ${gameContract.address}`\n  );\n}\n\nmain().catch(console.error);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/scripts/deploy_quiz.js","fileType":".js","chunk_index":0}}],["20",{"pageContent":"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { App } from '@/app/App';\n\nconst rootElement = document.getElementById('root');\nif (rootElement) {\n  ReactDOM.createRoot(rootElement).render(\n    (\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    ) as React.ReactNode\n  );\n} else {\n  throw new Error('Root element not found');\n}\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/main.tsx","fileType":".tsx","chunk_index":0}}],["21",{"pageContent":"import React from 'react';\nimport { AppRouter } from './AppRouter';\n\nexport const App = () => {\n  return <AppRouter />;\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/app/App.tsx","fileType":".tsx","chunk_index":0}}],["22",{"pageContent":"import { useMemo } from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router';\nimport { Canvas } from '@react-three/fiber';\nimport { SomniaScene } from '@/pages/SomniaScene';\nimport { ModuleDetails } from '@/pages/ModuleDetails';\nimport { DescriptionContainer } from '@/entities/DescriptionContainer';\n\nexport const AppRouter = () => {\n  const description = useMemo(\n    () => (\n      <DescriptionContainer>\n        <>\n          <strong>Controls:</strong>\n          <div>\n            <strong>W A S D</strong> - moving\n          </div>\n          <div>\n            <strong>Enter</strong> - redirect to module - works if module selected by cursor(target)\n          </div>\n          <div>\n            <strong>Esc</strong> - to back from 3D Scene\n          </div>\n          <br />\n          <strong>Interactive:</strong> You can move inside the 3d space and around hovering\n          objects. If you want to get more details about one of the objects, you can focus on it","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/app/AppRouter.tsx","fileType":".tsx","chunk_index":0}}],["23",{"pageContent":"          </div>\n          <br />\n          <strong>Interactive:</strong> You can move inside the 3d space and around hovering\n          objects. If you want to get more details about one of the objects, you can focus on it\n          with your mouse and press Enter\n        </>\n      </DescriptionContainer>\n    ),\n    [],\n  );\n\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route\n          path='/'\n          element={\n            <div style={{ width: '100vw', height: '100vh' }}>\n              {description}\n              <Canvas camera={{ position: [0, 2, 5] }}>\n                <SomniaScene />\n              </Canvas>\n            </div>\n          }\n        />\n        <Route path='/:id' element={<ModuleDetails />} />\n      </Routes>\n    </BrowserRouter>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/app/AppRouter.tsx","fileType":".tsx","chunk_index":1}}],["24",{"pageContent":"import { ModelRotate, NumberVector3 } from '@/shared';\nimport { useFrame } from '@react-three/fiber'; // Нужен для вращения\nimport { useLoader, useThree } from '@react-three/fiber';\nimport { useEffect, useRef } from 'react';\nimport * as THREE from 'three';\n\ninterface Model2DTemplateProps {\n  id: string;\n  imageName: string;\n  scale?: number | NumberVector3;\n  initialRotation?: NumberVector3;\n  rotate?: ModelRotate;\n  planeSize?: [number, number];\n}\n\nexport const Model2DTemplate = ({\n  id,\n  imageName,\n  scale = 1,\n  initialRotation = [0, 0, 0],\n  rotate,\n  planeSize = [1, 1],\n}: Model2DTemplateProps) => {\n  const meshRef = useRef<THREE.Mesh>(null);\n  const { scene: threeScene } = useThree();\n\n  const imageUrl = `${process.env.BASE_URL}models/${imageName}`;\n\n  const texture = useLoader(THREE.TextureLoader, imageUrl);\n\n  const [x, y, z] = Array.isArray(scale) ? scale : [scale, scale, scale];\n  const finalScale = new THREE.Vector3(x, y, z);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/2DModels.tsx","fileType":".tsx","chunk_index":0}}],["25",{"pageContent":"\n  const [x, y, z] = Array.isArray(scale) ? scale : [scale, scale, scale];\n  const finalScale = new THREE.Vector3(x, y, z);\n\n  const finalInitialRotation = Array.isArray(initialRotation)\n    ? initialRotation\n    : typeof initialRotation === 'number'\n      ? [0, initialRotation, 0]\n      : [0, 0, 0];\n\n  useEffect(() => {\n    if (meshRef.current) {\n      const [rx, ry, rz] = finalInitialRotation;\n      meshRef.current.rotation.set(rx, ry, rz);\n      meshRef.current.userData.id = id;\n    }\n  }, [id, finalInitialRotation]);\n\n  useFrame(() => {\n    if (rotate && meshRef.current) {\n      const [rotateX, rotateY, rotateZ] = rotate.rotateO;\n      const [speedX, speedY, speedZ] = rotate.rotateSpeed;\n\n      if (rotateX) {\n        meshRef.current.rotation.x += speedX;\n      }\n      if (rotateY) {\n        meshRef.current.rotation.y += speedY;\n      }\n      if (rotateZ) {\n        meshRef.current.rotation.z += speedZ;\n      }\n    }\n  });\n\n  return (","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/2DModels.tsx","fileType":".tsx","chunk_index":1}}],["26",{"pageContent":"    }\n  });\n\n  return (\n    <mesh ref={meshRef} scale={finalScale as THREE.Vector3}>\n      <planeGeometry args={planeSize} />\n      <meshBasicMaterial\n        map={texture}\n        transparent={true}\n        side={THREE.DoubleSide}\n      />\n    </mesh>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/2DModels.tsx","fileType":".tsx","chunk_index":2}}],["27",{"pageContent":"import { ModelRotate, NumberVector3 } from '@/shared';\nimport { useGLTF } from '@react-three/drei';\nimport { PrimitiveProps, useFrame } from '@react-three/fiber';\nimport { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\n\ninterface Model3DTemplateProps {\n  id: string;\n  name: string;\n  scale: number;\n  initialRotation: NumberVector3;\n  rotate: ModelRotate;\n}\n\nexport const Model3DTemplate = ({\n  id,\n  name,\n  scale = 1,\n  initialRotation = [0, 0, 0],\n  rotate,\n}: Model3DTemplateProps) => {\n  const { scene } = useGLTF(`${process.env.BASE_URL}models/${name}`);\n  const modelRef = useRef<PrimitiveProps | null>(null);\n\n  const finalScale = Array.isArray(scale) ? scale : [scale, scale, scale];\n\n  const finalRotation = Array.isArray(initialRotation)\n    ? initialRotation\n    : typeof initialRotation === 'number'\n      ? [0, initialRotation, 0]\n      : [0, 0, 0];\n\n  useEffect(() => {\n    scene.userData.id = id;\n  }, [scene, id]);\n\n  useEffect(() => {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/3DModels.tsx","fileType":".tsx","chunk_index":0}}],["28",{"pageContent":"    scene.userData.id = id;\n  }, [scene, id]);\n\n  useEffect(() => {\n    if (modelRef.current) {\n      const [rx, ry, rz] = finalRotation;\n      modelRef.current.rotation.set(rx, ry, rz);\n    }\n  }, [finalRotation]);\n\n  useFrame(() => {\n    const [rotateX, rotateY, rotateZ] = rotate.rotateO;\n    const [sppedX, sppedY, sppedZ] = rotate.rotateSpeed;\n    if (rotateX && modelRef.current) {\n      modelRef.current.rotation.x += sppedX;\n    }\n    if (rotateY && modelRef.current) {\n      modelRef.current.rotation.y += sppedY;\n    }\n    if (rotateZ && modelRef.current) {\n      modelRef.current.rotation.z += sppedZ;\n    }\n  });\n\n  return <primitive ref={modelRef} object={scene} scale={finalScale} />;\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/3DModels.tsx","fileType":".tsx","chunk_index":1}}],["29",{"pageContent":"import { NumberVector3 } from '@/shared';\nimport React, { useMemo } from 'react';\nimport * as THREE from 'three';\n\ninterface BezierLineProps {\n  start: NumberVector3;\n  end: NumberVector3;\n  color: string;\n  width: number;\n  curvature: number;\n  controlPoints?: number[][];\n  segments?: number;\n}\n\nexport const BezierLine = ({\n  start,\n  end,\n  color = '#ffffff',\n  width = 0.5,\n  curvature = 1,\n  controlPoints = [],\n  segments = 100,\n}: BezierLineProps) => {\n  const curve = useMemo(() => {\n    const startVec = new THREE.Vector3(start[0], start[1], start[2]);\n    const endVec = new THREE.Vector3(end[0], end[1], end[2]);\n\n    let cpVecs = [];\n    if (controlPoints.length >= 2) {\n      cpVecs = controlPoints\n        .slice(0, 2)\n        .map((p) => new THREE.Vector3(p[0], p[1], p[2]));\n      return new THREE.CubicBezierCurve3(\n        startVec,\n        cpVecs[0],\n        cpVecs[1],\n        endVec\n      );\n    } else if (controlPoints.length === 1) {\n      const cp = new THREE.Vector3(","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/BezierLine.tsx","fileType":".tsx","chunk_index":0}}],["30",{"pageContent":"        endVec\n      );\n    } else if (controlPoints.length === 1) {\n      const cp = new THREE.Vector3(\n        controlPoints[0][0],\n        controlPoints[0][1],\n        controlPoints[0][2]\n      );\n      return new THREE.QuadraticBezierCurve3(startVec, cp, endVec);\n    } else {\n      const mid = startVec.clone().add(endVec).multiplyScalar(0.5);\n      mid.y += curvature;\n      return new THREE.QuadraticBezierCurve3(startVec, mid, endVec);\n    }\n  }, [start, end, curvature, controlPoints]);\n\n  const tubeGeometry = useMemo(\n    () => new THREE.TubeGeometry(curve, segments, width, 8, false),\n    [curve, segments, width]\n  );\n\n  return (\n    <mesh geometry={tubeGeometry} castShadow receiveShadow>\n      <meshStandardMaterial color={color} />\n    </mesh>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/BezierLine.tsx","fileType":".tsx","chunk_index":1}}],["31",{"pageContent":"import React, { useRef } from 'react';\nimport { Html } from '@react-three/drei';\nimport { MeshWrapper, NumberVector3 } from '@/shared';\nimport { Color } from 'three';\n\ninterface TransactionModuleProps {\n  position: NumberVector3;\n  color: string;\n  name: string;\n}\n\nexport const TransactionModule = ({\n  position,\n  color,\n  name,\n}: TransactionModuleProps) => {\n  const meshRef = useRef<MeshWrapper | null>(null);\n\n  return (\n    <mesh ref={meshRef} position={position}>\n      <octahedronGeometry args={[name === 'Somnia' ? 1 : 0.5, 0]} />\n      <meshStandardMaterial color={new Color(color)} />\n\n      <Html position={[0, 1, 0]}>\n        <h3 style={{ color: 'lightgreen' }}>{name}</h3>\n      </Html>\n    </mesh>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/TransactionModule.tsx","fileType":".tsx","chunk_index":0}}],["32",{"pageContent":"import React, { useRef, useMemo, useEffect } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport * as THREE from 'three';\nimport { transactionModules } from '@/shared/transactionModules';\n\ninterface ParticleList {\n  module: string;\n  startVec: THREE.Vector3;\n  t: number;\n}\n\ninterface TransactionParticlesProps {\n  transactions: Array<any>;\n  speed: number;\n  size: number;\n  spacing: number;\n}\n\ntype MeshRef = THREE.InstancedMesh<\n  THREE.BufferGeometry<THREE.NormalBufferAttributes>,\n  THREE.Material | THREE.Material[],\n  THREE.InstancedMeshEventMap\n>;\n\nexport const TransactionParticles = ({\n  transactions,\n  speed = 1,\n  size = 0.05,\n  spacing = 10,\n}: TransactionParticlesProps) => {\n  const meshRef = useRef<MeshRef | null>(null);\n  const particles = useRef<ParticleList[]>([]);\n\n  useEffect(() => {\n    const list: ParticleList[] = [];\n    let counter = 0;\n    transactions.forEach((_transaction) => {\n      if (counter === transactionModules.length - 1) {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/TransactionParticles.tsx","fileType":".tsx","chunk_index":0}}],["33",{"pageContent":"    const list: ParticleList[] = [];\n    let counter = 0;\n    transactions.forEach((_transaction) => {\n      if (counter === transactionModules.length - 1) {\n        counter = 0;\n      }\n      const startPos = transactionModules[counter].position || [0, 0, 0];\n      const startVec = new THREE.Vector3(...startPos);\n      const amountOfTransactions = Math.round(Math.random() * 20);\n      for (let i = 0; i < amountOfTransactions; i++) {\n        list.push({\n          module: transactionModules[counter].id,\n          startVec,\n          t: -(i / amountOfTransactions) * spacing,\n        });\n      }\n      counter++;\n    });\n    particles.current = list;\n    if (meshRef.current) meshRef.current.count = 0;\n  }, [transactions, spacing]);\n\n  const endVec = useMemo(\n    () => new THREE.Vector3(...transactionModules[6].position),\n    []\n  );\n\n  const sphereGeometry = useMemo(\n    () => new THREE.SphereGeometry(size, 8, 8),\n    [size]\n  );\n\n  const material = useMemo(\n    () =>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/TransactionParticles.tsx","fileType":".tsx","chunk_index":1}}],["34",{"pageContent":"  );\n\n  const material = useMemo(\n    () =>\n      new THREE.MeshStandardMaterial({ color: '#00aaff', emissive: '#005577' }),\n    []\n  );\n\n  useFrame((_, delta) => {\n    if (!meshRef.current) return;\n    const matrix = new THREE.Matrix4();\n    let visible = 0;\n    particles.current.forEach((p) => {\n      p.t += delta * speed;\n      if (p.t < 0 || p.t > 1) return;\n      const pos = p.startVec.clone().lerp(endVec, p.t);\n      matrix.setPosition(pos);\n      meshRef.current?.setMatrixAt?.(visible++, matrix);\n    });\n    meshRef.current.count = visible;\n    if (!meshRef.current.instanceMatrix) return;\n    meshRef.current.instanceMatrix.needsUpdate = true;\n  });\n\n  return (\n    <instancedMesh\n      ref={meshRef}\n      args={[sphereGeometry, material, particles.current.length]}\n    />\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/features/TransactionParticles.tsx","fileType":".tsx","chunk_index":2}}],["35",{"pageContent":"import React, { useRef, useEffect, useState, CSSProperties } from 'react';\nimport { ModuleRouteId, modules } from '@/shared/generalModules';\nimport { useParams } from 'react-router';\nimport { RealtimeTransactions } from '@/widgets/RealtimeTransactions';\nimport { MultistreamConsensusScene } from '@/widgets/MultistreamConsensus';\nimport { OptimisationVisualizer } from '@/widgets/OptimisationVisualizer';\nimport { SomniaPartners } from '@/widgets/SomniaPartners';\nimport { IceDB } from '@/widgets/IceDB';\nimport { Canvas } from '@react-three/fiber';\nimport { somniaSubGraphApi, somniaSubgraphConfig } from '@/shared/apis';\nimport * as THREE from 'three';\nimport axios from 'axios';\nimport { Quiz } from '@/widgets/Quiz/Quiz';\nimport { GameWidget } from '@/widgets/QuizGenerator';\nimport { NFTStaking } from '@/widgets/SpecificTestContract/NFTStaking';\n\nconst moduleRouterMap: Record<ModuleRouteId, () => JSX.Element> = {\n  multistream: MultistreamConsensusScene,\n  icedb: IceDB,","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/ModuleDetails.tsx","fileType":".tsx","chunk_index":0}}],["36",{"pageContent":"\nconst moduleRouterMap: Record<ModuleRouteId, () => JSX.Element> = {\n  multistream: MultistreamConsensusScene,\n  icedb: IceDB,\n  evm_optimisation: () => (\n    <Canvas\n      scene={{ background: new THREE.Color('black') }}\n      camera={{ position: [0, 10, 10], fov: 60 }}\n    >\n      <OptimisationVisualizer />\n    </Canvas>\n  ),\n  partners: SomniaPartners,\n  transactions: RealtimeTransactions,\n  lotr: Quiz,\n  infinite_quiz: GameWidget,\n  nft_staking: NFTStaking,\n};\n\nconst generalContainerStyles: CSSProperties = {\n  margin: 0,\n  padding: 0,\n  width: '100%',\n  height: '100vh',\n  position: 'relative',\n};\n\nconst commonStyles: CSSProperties = {\n  width: '100%',\n  height: '50px',\n  backgroundColor: 'black',\n  padding: '10px',\n  color: 'whitesmoke',\n  zIndex: 1,\n};\n\nconst sceneStyles = (): CSSProperties => ({\n  position: 'absolute',\n  top: '70px',\n  width: '100%',\n  height: `${window.document.body.clientHeight - 140}px`,\n});\n\nconst headerStyles: CSSProperties = {\n  ...commonStyles,","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/ModuleDetails.tsx","fileType":".tsx","chunk_index":1}}],["37",{"pageContent":"});\n\nconst headerStyles: CSSProperties = {\n  ...commonStyles,\n  borderBottom: '2px solid darkgrey',\n  display: 'flex',\n  justifyContent: 'space-between',\n  position: 'absolute',\n  alignItems: 'center',\n  top: 0,\n};\n\nconst footerStyles: CSSProperties = {\n  ...commonStyles,\n  borderTop: '2px solid darkgrey',\n  display: 'flex',\n  alignItems: 'center',\n  position: 'absolute',\n  bottom: 0,\n};\n\nexport const ModuleDetails = () => {\n  const [totalBlocks, setTotalBlocks] = useState(0);\n  const { id } = useParams();\n  const module = modules.find((m) => m.id === id);\n  const Component = module?.id ? moduleRouterMap[module.id] : () => null;\n\n  const statsRef = useRef({\n    totalBlocks: 0,\n    totalTransactions: 0,\n    todayTransactions: 0,\n  });\n\n  useEffect(() => {\n    if (id !== 'transactions') return;\n\n    const runQuery = async () => {\n      try {\n        const stats = await axios.get(\n          'https://somnia-poc.w3us.site/api/v2/stats'\n        );\n        statsRef.current = {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/ModuleDetails.tsx","fileType":".tsx","chunk_index":2}}],["38",{"pageContent":"        const stats = await axios.get(\n          'https://somnia-poc.w3us.site/api/v2/stats'\n        );\n        statsRef.current = {\n          totalBlocks: 0,\n          totalTransactions: Number(stats?.data?.total_transactions ?? 0),\n          todayTransactions: Number(stats?.data?.transactions_today ?? 0),\n        };\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    const runPollingQuery = async () => {\n      try {\n        const url = `${somniaSubGraphApi}/block/latest`;\n        const response = await axios.get(url, somniaSubgraphConfig);\n\n        const totalBlocks = response?.data?.number ?? 0;\n        const delta =\n          totalBlocks - statsRef.current.totalBlocks <= 0 ||\n          statsRef.current.totalBlocks === 0\n            ? 1\n            : totalBlocks - statsRef.current.totalBlocks;\n        const transactions_increment =\n          (response?.data?.transaction_count ?? 0) * delta;\n\n        statsRef.current.totalBlocks = totalBlocks;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/ModuleDetails.tsx","fileType":".tsx","chunk_index":3}}],["39",{"pageContent":"        const transactions_increment =\n          (response?.data?.transaction_count ?? 0) * delta;\n\n        statsRef.current.totalBlocks = totalBlocks;\n        statsRef.current.totalTransactions += transactions_increment;\n        statsRef.current.todayTransactions += transactions_increment;\n        setTotalBlocks(totalBlocks);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    runQuery();\n    const interval = setInterval(runPollingQuery, 5000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [id]);\n\n  return (\n    <div style={generalContainerStyles}>\n      <div style={headerStyles}>\n        <h1>{module?.name}</h1>\n        <p style={{ marginRight: '20px' }}>{module?.description}</p>\n      </div>\n      <div style={sceneStyles()}>\n        {id === 'transactions' ? (\n          <>\n            <div\n              style={{\n                zIndex: 1,\n                position: 'absolute',\n                top: '20px',\n                left: '20px',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/ModuleDetails.tsx","fileType":".tsx","chunk_index":4}}],["40",{"pageContent":"                zIndex: 1,\n                position: 'absolute',\n                top: '20px',\n                left: '20px',\n                color: 'green',\n              }}\n            >\n              <h3>Today Blocks: {totalBlocks}</h3>\n              <h3>Today Transactions: {statsRef.current.todayTransactions}</h3>\n              <h3>Total Transactions: {statsRef.current.totalTransactions}</h3>\n            </div>\n            <Canvas camera={{ position: [0, 4, 8], fov: 50 }}>\n              <Component />\n            </Canvas>\n          </>\n        ) : (\n          <Component />\n        )}\n      </div>\n      <div style={footerStyles}>\n        <a href=\"/\">Return to scene</a>\n      </div>\n    </div>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/ModuleDetails.tsx","fileType":".tsx","chunk_index":5}}],["41",{"pageContent":"import React, {\n  useState,\n  useEffect,\n  useRef,\n  useMemo,\n  Suspense,\n  useCallback,\n} from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { PointerLockControls, Html } from '@react-three/drei';\nimport { useNavigate } from 'react-router';\nimport * as THREE from 'three';\nimport { MainSceneModule, modules } from '@/shared/generalModules';\nimport { lines } from '@/shared/lines';\nimport { BezierLine } from '@/features/BezierLine';\nimport { MeshWrapper } from '@/shared';\nimport { SceneStarrySky } from '@/entities/SceneStarrySky';\nimport { Model2DTemplate } from '@/features/2DModels';\n\ntype RaycastableObject = THREE.Mesh<\n  THREE.BufferGeometry<THREE.NormalBufferAttributes>,\n  THREE.Material | THREE.Material[],\n  THREE.Object3DEventMap\n>;\n\ntype EmissiveMaterial = THREE.Material & {\n  emissive: THREE.Color;\n  emissiveIntensity?: number;\n};\n\nexport const SomniaScene = () => {\n  const [keys, setKeys] = useState({\n    forward: false,\n    backward: false,","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":0}}],["42",{"pageContent":"export const SomniaScene = () => {\n  const [keys, setKeys] = useState({\n    forward: false,\n    backward: false,\n    left: false,\n    right: false,\n  });\n  const moduleMeshes = useRef<RaycastableObject[]>([]);\n  const [hoveredModule, setHoveredModule] = useState<MainSceneModule | null>(\n    null\n  );\n  const previousHighlighted =\n    useRef<THREE.Object3D<THREE.Object3DEventMap> | null>(null);\n  const currentlyHighlightedMeshRef = useRef<RaycastableObject | null>(null);\n  const aimPointRef = useRef<MeshWrapper | null>(null);\n  const { camera, scene } = useThree();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    scene.background = new THREE.Color('#000011');\n    camera.userData.initialRotation = { x: 0.2, y: 0, z: 0 };\n    camera.rotation.set(\n      camera.userData.initialRotation.x,\n      camera.userData.initialRotation.y,\n      camera.userData.initialRotation.z\n    );\n  }, [scene, camera]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":1}}],["43",{"pageContent":"  }, [scene, camera]);\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'w':\n          setKeys((prev) => ({ ...prev, forward: true }));\n          break;\n        case 's':\n          setKeys((prev) => ({ ...prev, backward: true }));\n          break;\n        case 'a':\n          setKeys((prev) => ({ ...prev, left: true }));\n          break;\n        case 'd':\n          setKeys((prev) => ({ ...prev, right: true }));\n          break;\n        case 'Enter':\n          const raycaster = new THREE.Raycaster();\n          raycaster.setFromCamera(new THREE.Vector2(0, 0), camera);\n          const intersects = raycaster.intersectObjects(\n            moduleMeshes.current,\n            true\n          );\n          if (intersects.length > 0) {\n            const hit = intersects[0].object;\n            const selectedId = hit.userData?.id;\n            const module = modules.find((m) => m.id === selectedId);\n            if (module) {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":2}}],["44",{"pageContent":"            const hit = intersects[0].object;\n            const selectedId = hit.userData?.id;\n            const module = modules.find((m) => m.id === selectedId);\n            if (module) {\n              navigate(`/${module.id}`);\n            }\n          }\n          break;\n        default:\n          break;\n      }\n    };\n\n    const handleKeyUp = (event: KeyboardEvent) => {\n      switch (event.key) {\n        case 'w':\n          setKeys((prev) => ({ ...prev, forward: false }));\n          break;\n        case 's':\n          setKeys((prev) => ({ ...prev, backward: false }));\n          break;\n        case 'a':\n          setKeys((prev) => ({ ...prev, left: false }));\n          break;\n        case 'd':\n          setKeys((prev) => ({ ...prev, right: false }));\n          break;\n        default:\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":3}}],["45",{"pageContent":"    window.addEventListener('keydown', handleKeyDown);\n    window.addEventListener('keyup', handleKeyUp);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n      window.removeEventListener('keyup', handleKeyUp);\n    };\n  }, [camera, navigate]);\n\n  const resetHighlight = useCallback(() => {\n    if (currentlyHighlightedMeshRef.current) {\n      const material = currentlyHighlightedMeshRef.current.material;\n      if (Array.isArray(material)) {\n        material.forEach((mat) => {\n          const emissiveMat = mat as EmissiveMaterial;\n          if (emissiveMat.emissive) {\n            emissiveMat.emissive.set(0x000000);\n            if (emissiveMat.emissiveIntensity !== undefined) {\n              emissiveMat.emissiveIntensity = 0;\n            }\n          }\n        });\n      } else {\n        const emissiveMat = material as EmissiveMaterial;\n        if (emissiveMat.emissive) {\n          emissiveMat.emissive.set(0x000000);","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":4}}],["46",{"pageContent":"      } else {\n        const emissiveMat = material as EmissiveMaterial;\n        if (emissiveMat.emissive) {\n          emissiveMat.emissive.set(0x000000);\n          if (emissiveMat.emissiveIntensity !== undefined) {\n            emissiveMat.emissiveIntensity = 0;\n          }\n        }\n      }\n      currentlyHighlightedMeshRef.current = null;\n    }\n  }, []);\n\n  const setHighlight = useCallback((object: RaycastableObject) => {\n    resetHighlight();\n\n    const material = object.material;\n    const highlightColor = new THREE.Color(0xff0000);\n    const highlightIntensity = 1;\n\n    if (Array.isArray(material)) {\n      material.forEach((mat) => {\n        const emissiveMat = mat as EmissiveMaterial;\n        if (emissiveMat.emissive) {\n          emissiveMat.emissive.copy(highlightColor);\n          if (emissiveMat.emissiveIntensity !== undefined) {\n            emissiveMat.emissiveIntensity = highlightIntensity;\n          }\n        }\n      });\n    } else {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":5}}],["47",{"pageContent":"          }\n        }\n      });\n    } else {\n      const emissiveMat = material as EmissiveMaterial;\n      if (emissiveMat.emissive) {\n        emissiveMat.emissive.copy(highlightColor);\n        if (emissiveMat.emissiveIntensity !== undefined) {\n          emissiveMat.emissiveIntensity = highlightIntensity;\n        }\n      }\n    }\n    currentlyHighlightedMeshRef.current = object;\n  }, []);\n\n  const pulseHighlighted = useCallback((time: number) => {\n    if (currentlyHighlightedMeshRef.current) {\n      const material = currentlyHighlightedMeshRef.current.material;\n      const intensity = 0.5 + 0.5 * Math.sin(time * 5);\n\n      const applyPulse = (mat: THREE.Material) => {\n        const emissiveMat = mat as EmissiveMaterial;\n        if (emissiveMat.emissiveIntensity !== undefined) {\n          emissiveMat.emissiveIntensity = intensity;\n        }\n      };\n\n      if (Array.isArray(material)) {\n        material.forEach(applyPulse);\n      } else {\n        applyPulse(material);\n      }\n    }","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":6}}],["48",{"pageContent":"      } else {\n        applyPulse(material);\n      }\n    }\n  }, []);\n\n  const handleRaycastingAndAim = useCallback((state: any) => {\n    const time = state.clock.getElapsedTime();\n    const direction = new THREE.Vector3();\n    camera.getWorldDirection(direction);\n    direction.normalize();\n\n    const raycaster = new THREE.Raycaster();\n    raycaster.setFromCamera(new THREE.Vector2(0, 0), camera);\n    const intersects = raycaster.intersectObjects(moduleMeshes.current, true);\n\n    if (aimPointRef.current) {\n      let hitPoint = camera.position.clone().addScaledVector(direction, 5);\n      let pulse = 0.3;\n\n      if (intersects.length > 0) {\n        hitPoint = intersects[0].point;\n        hitPoint.y += 0.01;\n        pulse = 0.3 + 0.1 * Math.sin(time * 5);\n\n        const hit = intersects[0].object;\n        const selectedId = hit.userData?.id;\n        const module = modules.find((m) => m.id === selectedId);\n        setHoveredModule(module || null);\n      } else {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":7}}],["49",{"pageContent":"        const selectedId = hit.userData?.id;\n        const module = modules.find((m) => m.id === selectedId);\n        setHoveredModule(module || null);\n      } else {\n        setHoveredModule(null);\n      }\n\n      aimPointRef.current.position.copy(hitPoint);\n      aimPointRef.current.scale.set(pulse, pulse, pulse);\n    }\n\n    if (intersects.length > 0) {\n      const newHighlightedObject = intersects[0].object as RaycastableObject;\n\n      if (newHighlightedObject !== currentlyHighlightedMeshRef.current) {\n        setHighlight(newHighlightedObject);\n\n        const selectedId = newHighlightedObject.userData?.id;\n        const module = modules.find((m) => m.id === selectedId);\n        setHoveredModule(module || null);\n      }\n    } else {\n      resetHighlight();\n      setHoveredModule(null);\n    }\n  }, []);\n\n  useFrame((state) => {\n    const speed = 0.1;\n    const direction = new THREE.Vector3();\n    camera.getWorldDirection(direction);\n    direction.normalize();\n\n    if (keys.forward) {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":8}}],["50",{"pageContent":"    camera.getWorldDirection(direction);\n    direction.normalize();\n\n    if (keys.forward) {\n      camera.position.addScaledVector(direction, speed);\n    }\n    if (keys.backward) {\n      camera.position.addScaledVector(direction, -speed);\n    }\n    if (keys.left) {\n      const left = new THREE.Vector3();\n      left.crossVectors(camera.up, direction).normalize();\n      camera.position.addScaledVector(left, speed);\n    }\n    if (keys.right) {\n      const right = new THREE.Vector3();\n      right.crossVectors(direction, camera.up).normalize();\n      camera.position.addScaledVector(right, speed);\n    }\n\n    const MIN_X = -8;\n    const MAX_X = 8;\n    const MIN_Z = -8;\n    const MAX_Z = 8;\n    camera.position.x = Math.max(MIN_X, Math.min(MAX_X, camera.position.x));\n    camera.position.z = Math.max(MIN_Z, Math.min(MAX_Z, camera.position.z));\n    camera.position.y = 3;\n\n    handleRaycastingAndAim(state);\n\n    pulseHighlighted(state.clock.getElapsedTime());\n  });\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":9}}],["51",{"pageContent":"\n    pulseHighlighted(state.clock.getElapsedTime());\n  });\n\n  const modulesRender = useMemo(\n    () =>\n      modules.map((module, index) => (\n        <Suspense fallback={null} key={module.id}>\n          <mesh\n            key={module.id}\n            ref={(el) => {\n              if (el) {\n                moduleMeshes.current[index] = el as RaycastableObject;\n              } else {\n                delete moduleMeshes.current[index];\n              }\n            }}\n            position={[\n              module.position[0],\n              module.position[1],\n              module.position[2],\n            ]}\n            userData={{ id: module.id }}\n          >\n            <Model2DTemplate id={module.id} {...module.model} />\n          </mesh>\n        </Suspense>\n      )),\n    []\n  );\n\n  const logoLines = useMemo(\n    () =>\n      lines.map((line, index) => {\n        return (\n          <BezierLine\n            key={index}\n            start={line.start}\n            end={line.end}","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":10}}],["52",{"pageContent":"          <BezierLine\n            key={index}\n            start={line.start}\n            end={line.end}\n            color={line.color}\n            width={line.width}\n            curvature={line.curvature}\n          />\n        );\n      }),\n    []\n  );\n\n  return (\n    <>\n      <ambientLight intensity={1} />\n      <pointLight position={[10, 10, 10]} />\n\n      <Suspense fallback={null}>\n        <SceneStarrySky />\n      </Suspense>\n\n      <mesh ref={aimPointRef}>\n        <sphereGeometry args={[0.1, 16, 16]} />\n        <meshBasicMaterial color=\"white\" />\n      </mesh>\n\n      {modulesRender}\n      {logoLines}\n\n      {hoveredModule && (\n        <Html\n          style={{\n            padding: '10px',\n            backgroundColor: 'rgba(0,0,0,0.8)',\n            borderRadius: '8px',\n          }}\n          position={[\n            hoveredModule.position[0],\n            hoveredModule.position[1],\n            hoveredModule.position[2],\n          ]}\n        >","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":11}}],["53",{"pageContent":"            hoveredModule.position[1],\n            hoveredModule.position[2],\n          ]}\n        >\n          <h3 style={{ color: 'white', margin: 0 }}>\n            {hoveredModule.description}\n          </h3>\n        </Html>\n      )}\n\n      <PointerLockControls />\n    </>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/pages/SomniaScene.tsx","fileType":".tsx","chunk_index":12}}],["54",{"pageContent":"import React from 'react';\n\ninterface DescriptionContainerProps {\n  children: React.ReactNode;\n}\n\nexport const DescriptionContainer = ({\n  children,\n}: DescriptionContainerProps) => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        top: '10px',\n        left: '10px',\n        maxWidth: '300px',\n        backgroundColor: 'rgba(0, 0, 0, 0.9)',\n        color: 'white',\n        padding: '8px',\n        borderRadius: '4px',\n        fontSize: '14px',\n        zIndex: 10,\n        pointerEvents: 'none',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/entities/DescriptionContainer.tsx","fileType":".tsx","chunk_index":0}}],["55",{"pageContent":"import React from 'react';\nimport { MeshReflectorMaterial, Plane } from '@react-three/drei';\n\nexport const SceneConstellation = () => {\n  return (\n    <Plane name=\"floor\" rotation={[-Math.PI / 2, 0, 0]} args={[100, 100]}>\n      <MeshReflectorMaterial\n        blur={[400, 100]}\n        resolution={1024}\n        mixBlur={1}\n        mixStrength={0.8}\n        roughness={0.1}\n        metalness={0.9}\n        mirror={0.5}\n        side={2}\n      />\n    </Plane>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/entities/SceneFloor.tsx","fileType":".tsx","chunk_index":0}}],["56",{"pageContent":"import React, { useRef } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport { Stars } from '@react-three/drei';\nimport * as THREE from 'three';\n\nexport const SceneStarrySky = () => {\n  const starsRef = useRef<THREE.Points | null>(null);\n\n  useFrame((state) => {\n    if (starsRef.current) {\n      const lightness = 0.5 + 0.5 * Math.sin(state.clock.getElapsedTime());\n\n      const material = starsRef.current.material as THREE.PointsMaterial;\n      material?.color?.setHSL(0.6, 0.8, lightness);\n    }\n  });\n  return (\n    <>\n      <Stars\n        ref={starsRef}\n        radius={100}\n        depth={50}\n        count={5000}\n        factor={4}\n        saturation={0}\n        fade\n        speed={1}\n      />\n    </>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/entities/SceneStarrySky.tsx","fileType":".tsx","chunk_index":0}}],["57",{"pageContent":"import axios from 'axios';\nimport { GoogleGenAI } from '@google/genai';\n\nexport const ankrSomniaUrl = `https://rpc.ankr.com/somnia_testnet/${\n  process.env.VITE_ANKR_API_KEY\n}`;\n\nexport const somniaSubGraphApi =\n  'https://api.subgraph.somnia.network/public_api/data_api/somnia/v1';\n\nexport const somniaSubgraphConfig = {\n  headers: {\n    Authorization: process.env.VITE_SUBGRAPH_API_KEY,\n    'Content-Type': 'application/json',\n  },\n  timeout: 20000,\n};\n\nexport const requestToOpenRouter = async (\n  context: string,\n  otherModel?: string\n) => {\n  try {\n    const url = 'https://openrouter.ai/api/v1/chat/completions';\n\n    const data = JSON.stringify({\n      model: otherModel ?? 'qwen/qwen3-coder:free',\n      messages: [{ role: 'user', content: context }],\n      stream: false,\n    });\n\n    const response = await axios.post(url, data, {\n      headers: {\n        Authorization: `Bearer ${process.env.OPEN_ROUTER_API_KEY}`,\n        'HTTP-Referer': 'https://somniapresentor.info/',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/apis.ts","fileType":".ts","chunk_index":0}}],["58",{"pageContent":"    const response = await axios.post(url, data, {\n      headers: {\n        Authorization: `Bearer ${process.env.OPEN_ROUTER_API_KEY}`,\n        'HTTP-Referer': 'https://somniapresentor.info/',\n        'X-Title': 'Somnia Presentor',\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const content = response.data.choices?.[0]?.message?.content;\n    return content;\n  } catch (error) {\n    console.error(error);\n    await requestToOpenRouter(context, 'openai/gpt-5-chat');\n  }\n};\n\nconst ai = new GoogleGenAI({\n  apiKey: process.env.NEXT_PUBLIC_GOOGLE_GEMINI_API_KEY,\n});\n\nexport const requestToGemini = async (\n  context: string\n): Promise<string | undefined> => {\n  const apiKey = process.env.NEXT_PUBLIC_GOOGLE_GEMINI_API_KEY;\n\n  if (!apiKey) {\n    console.error(\n      'API ключ для Google Gemini не найден в переменных окружения.'\n    );\n    return;\n  }\n\n  try {\n    const response = await ai.models.generateContent({\n      model: 'gemini-2.5-flash',\n      contents: [\n        {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/apis.ts","fileType":".ts","chunk_index":1}}],["59",{"pageContent":"    const response = await ai.models.generateContent({\n      model: 'gemini-2.5-flash',\n      contents: [\n        {\n          role: 'user',\n          parts: [{ text: context }],\n        },\n      ],\n    });\n\n    return response.text;\n  } catch (error) {\n    console.error('Gemeny model answer with error:', error);\n  }\n};\n\nexport const requestToStabilityAI = async (context: string) => {\n  try {\n    const url = 'https://api.stability.ai/v2beta/stable-image/generate/sd3';\n\n    const data = JSON.stringify({\n      text_prompts: [{ text: context }],\n      cfg_scale: 7.5,\n      clip_guidance_preset: 'FAST_BLUE',\n      height: 512,\n      width: 512,\n      samples: 1,\n      steps: 50,\n    });\n\n    const response = await axios.post(url, data, {\n      headers: {\n        Authorization: `Bearer ${process.env.STABILITY_API_KEY}`,\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n      },\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/apis.ts","fileType":".ts","chunk_index":2}}],["60",{"pageContent":"    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/apis.ts","fileType":".ts","chunk_index":3}}],["61",{"pageContent":"import { BooleanVector3, NumberVector3 } from './types';\n\nexport type ModuleRouteId =\n  | 'multistream'\n  | 'icedb'\n  | 'evm_optimisation'\n  | 'partners'\n  | 'transactions'\n  | 'lotr'\n  | 'infinite_quiz'\n  | 'nft_staking';\n\nexport interface ModelRotate {\n  rotateSpeed: NumberVector3;\n  rotateO: BooleanVector3;\n}\n\nexport interface Model3D {\n  name: string;\n  rotate: ModelRotate;\n  scale: number;\n  initialRotation: NumberVector3;\n  imageName: string;\n}\n\nexport interface MainSceneModule {\n  id: ModuleRouteId;\n  name: string;\n\n  position: NumberVector3;\n  color: string;\n  description: string;\n  model: Model3D;\n}\n\nexport const modules: MainSceneModule[] = [\n  {\n    id: 'multistream',\n    name: 'Consensus Mechanism',\n    position: [-3.3, 3.8, 0],\n    color: 'blue',\n    description: 'Demonstaration of Multistream consensus',\n    model: {\n      name: 'multistream_pipe.glb',\n      rotate: {\n        rotateSpeed: [0, 0, 0.01],\n        rotateO: [false, false, true],\n      },\n      scale: 1.25,","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/generalModules.ts","fileType":".ts","chunk_index":0}}],["62",{"pageContent":"        rotateSpeed: [0, 0, 0.01],\n        rotateO: [false, false, true],\n      },\n      scale: 1.25,\n      initialRotation: [0, 0, 0],\n      imageName: 'multistream_pipe.png',\n    },\n  },\n  {\n    id: 'icedb',\n    name: 'Database (IceDB)',\n    position: [1, 6.5, 0],\n    color: 'red',\n    description: 'Visualisation of IceDB speed',\n    model: {\n      name: 'ice_db.glb',\n      rotate: {\n        rotateSpeed: [0, 0.01, 0],\n        rotateO: [false, true, false],\n      },\n      scale: 1.25,\n      initialRotation: [0, 0, 0],\n      imageName: 'ice_db.png',\n    },\n  },\n  {\n    id: 'evm_optimisation',\n    name: 'EVM Optimization',\n    position: [-1, 1, 0],\n    color: 'yellow',\n    description: 'Optimization EVM-bitecode',\n    model: {\n      name: 'evm_optimisation.glb',\n      rotate: {\n        rotateSpeed: [0, 0.01, 0],\n        rotateO: [false, true, false],\n      },\n      scale: 0.85,\n      initialRotation: [0, 0, 0],\n      imageName: 'evm_optimisation.png',\n    },\n  },\n  {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/generalModules.ts","fileType":".ts","chunk_index":1}}],["63",{"pageContent":"      imageName: 'evm_optimisation.png',\n    },\n  },\n  {\n    id: 'partners',\n    name: 'Ecosystem Partners',\n    position: [3.2, 3.7, 0],\n    color: 'green',\n    description: 'Somnia ecosystem partners',\n    model: {\n      name: 'partnerships_bros.glb',\n      rotate: {\n        rotateSpeed: [0, 0, 0.01],\n        rotateO: [false, false, true],\n      },\n      scale: 1.25,\n      initialRotation: [0, 0, 0],\n      imageName: 'partnerships_bros.png',\n    },\n  },\n  {\n    id: 'transactions',\n    name: 'Transaction Visualization',\n    position: [0, 3.4, 0],\n    color: 'purple',\n    description: 'Transactions in real time',\n    model: {\n      name: 'somnia_logo.glb',\n      rotate: {\n        rotateSpeed: [0, -0.005, 0],\n        rotateO: [false, true, false],\n      },\n      scale: 1.25,\n      initialRotation: [0, 0, 0],\n      imageName: 'somnia_logo.png',\n    },\n  },\n  {\n    id: 'infinite_quiz',\n    name: 'Infinite Quiz',\n    position: [-3, 3, -4],\n    color: 'violet',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/generalModules.ts","fileType":".ts","chunk_index":2}}],["64",{"pageContent":"    id: 'infinite_quiz',\n    name: 'Infinite Quiz',\n    position: [-3, 3, -4],\n    color: 'violet',\n    description: 'Infinite Quiz',\n    model: {\n      name: 'quiz.glb',\n      rotate: {\n        rotateSpeed: [0, 0, 0],\n        rotateO: [false, true, false],\n      },\n      scale: 1.25,\n      initialRotation: [0, 0, 0],\n      imageName: 'quiz.png',\n    },\n  },\n  {\n    id: 'lotr',\n    name: 'LOTR',\n    position: [3, 3, -4],\n    color: 'orange',\n    description: 'Lord of the Ring Quiz',\n    model: {\n      name: 'lotr.glb',\n      rotate: {\n        rotateSpeed: [0, 0, 0],\n        rotateO: [false, true, false],\n      },\n      scale: 1.25,\n      initialRotation: [0, 0, 0],\n      imageName: 'lotr.png',\n    },\n  },\n  {\n    id: 'nft_staking',\n    name: 'NFT_Staking',\n    position: [0, 3, -4],\n    color: 'red',\n    description: 'NFT_Staking',\n    model: {\n      name: 'nft_staking.glb',\n      rotate: {\n        rotateSpeed: [0, 0, 0],\n        rotateO: [false, true, false],\n      },","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/generalModules.ts","fileType":".ts","chunk_index":3}}],["65",{"pageContent":"      rotate: {\n        rotateSpeed: [0, 0, 0],\n        rotateO: [false, true, false],\n      },\n      scale: 1.25,\n      initialRotation: [0, 0, 0],\n      imageName: 'nft_staking.png',\n    },\n  },\n];\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/generalModules.ts","fileType":".ts","chunk_index":4}}],["66",{"pageContent":"export * from './apis';\nexport * from './generalModules';\nexport * from './lines';\nexport * from './somniaPartners';\nexport * from './transactionModules';\nexport * from './types';\nexport * from './useWeb3State';\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/index.ts","fileType":".ts","chunk_index":0}}],["67",{"pageContent":"export interface MainSceneLine {\n  start: [number, number, number];\n  end: [number, number, number];\n  color: string;\n  width: number;\n  curvature: number;\n}\n\nexport const lines: MainSceneLine[] = [\n  {\n    start: [1, 5.5, 0],\n    end: [2.5, 3.2, 0],\n    color: '#0057ff',\n    width: 0.05,\n    curvature: -1,\n  }, // right\n  {\n    start: [-2.5, 3.3, 0],\n    end: [1, 5.5, 0],\n    color: '#0896d7',\n    width: 0.05,\n    curvature: -1,\n  }, // top\n  {\n    start: [-2.5, 3.25, 0],\n    end: [-1, 1.5, 0],\n    color: '#8f08d7',\n    width: 0.05,\n    curvature: 0.8,\n  }, // left\n  {\n    start: [-1, 1.5, 0],\n    end: [2.5, 3.15, 0],\n    color: '#d70859',\n    width: 0.05,\n    curvature: 1,\n  }, // bottom\n];\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/lines.ts","fileType":".ts","chunk_index":0}}],["68",{"pageContent":"export const somniaPartners = {\n  nodes: [\n    {\n      id: 'Somnia',\n      name: 'Somnia',\n      description:\n        'Somnia is the fastest EVM-compatible layer one blockchain for a fully onchain world',\n      logo: `${process.env.BASE_URL}textures/somnia_logo.png`,\n    },\n    {\n      id: 'Ankr RPC',\n      name: 'Ankr RPC',\n      description:\n        'A provider of RPC nodes and subgraphs for blockchains. Supplies infrastructure for developers within the Somnia ecosystem.',\n      logo: `${process.env.BASE_URL}textures/ankr_logo.png`,\n    },\n    {\n      id: 'Privy.io',\n      name: 'Privy.io',\n      description:\n        'A platform enabling seamless wallet integration into Web3 applications, offering smooth onboarding and wallet management.',\n      logo: `${process.env.BASE_URL}textures/privy_logo.gif`,\n    },\n    {\n      id: 'Thirdweb',\n      name: 'Thirdweb',\n      description:","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":0}}],["69",{"pageContent":"    {\n      id: 'Thirdweb',\n      name: 'Thirdweb',\n      description:\n        'A platform offering development tools, SDKs, and templates for building Web3 applications and Unity-based projects.',\n      logo: `${process.env.BASE_URL}textures/thirdweb.png`,\n    },\n    {\n      id: 'YagaLabs',\n      name: 'YagaLabs',\n      description:\n        'Creator of prominent NFT collections like Bored Ape Yacht Club and CryptoPunks. Collaborates with Somnia to enhance metaverse interoperability.',\n      logo: `${process.env.BASE_URL}textures/yagalabs.png`,\n    },\n    {\n      id: 'Ormi',\n      name: 'Ormi',\n      description:\n        'A blockchain data platform providing subgraphs, SQL engines, and analytics tools.',\n      logo: `${process.env.BASE_URL}textures/ormi.svg`,\n    },\n    {\n      id: 'Protofire',\n      name: 'Protofire',\n      description:\n        'Supplies Chainlink-compatible VRF and price feeds, as well as data indexing infrastructure via The Graph.',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":1}}],["70",{"pageContent":"      id: 'Protofire',\n      name: 'Protofire',\n      description:\n        'Supplies Chainlink-compatible VRF and price feeds, as well as data indexing infrastructure via The Graph.',\n      logo: `${process.env.BASE_URL}textures/protofire.png`,\n    },\n    {\n      id: 'Safe (Palmera)',\n      name: 'Safe (Palmera)',\n      description:\n        'Offers infrastructure for managing multisig wallets and treasuries for on-chain organizations.',\n      logo: `${process.env.BASE_URL}textures/safe.jpg`,\n    },\n    {\n      id: 'DIA',\n      name: 'DIA',\n      description:\n        'A decentralized oracle network providing price feeds and verifiable randomness.',\n      logo: `${process.env.BASE_URL}textures/dia.webp`,\n    },\n    {\n      id: 'Hyperlane',\n      name: 'Hyperlane',\n      description:\n        'A framework for cross-chain interoperability, enabling asset transfers across over 100 blockchains.',\n      logo: `${process.env.BASE_URL}textures/hyperlane.svg`,\n    },\n    {\n      id: 'Dune',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":2}}],["71",{"pageContent":"      logo: `${process.env.BASE_URL}textures/hyperlane.svg`,\n    },\n    {\n      id: 'Dune',\n      name: 'Dune',\n      description:\n        'A blockchain analytics platform offering real-time visualizations and API access to on-chain data.',\n      logo: `${process.env.BASE_URL}textures/dune.jpg`,\n    },\n    {\n      id: 'Sequence',\n      name: 'Sequence',\n      description:\n        'A Web3 gaming infrastructure provider offering smart wallets and Unity SDKs.',\n      logo: `${process.env.BASE_URL}textures/sequence.jpg`,\n    },\n    {\n      id: 'Hemera’s Social Scan',\n      name: 'Hemera’s Social Scan',\n      description:\n        'A blockchain explorer with advanced indexing and semantic data layers.',\n      logo: `${process.env.BASE_URL}textures/social_scan.jpg`,\n    },\n    {\n      id: 'Validation Cloud',\n      name: 'Validation Cloud',\n      description:\n        'High-performance infrastructure provider for staking and nodes, ensuring network stability and security.',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":3}}],["72",{"pageContent":"      id: 'Validation Cloud',\n      name: 'Validation Cloud',\n      description:\n        'High-performance infrastructure provider for staking and nodes, ensuring network stability and security.',\n      logo: `${process.env.BASE_URL}textures/validation_cloud.png`,\n    },\n    {\n      id: 'B-Harvest',\n      name: 'B-Harvest',\n      description:\n        'A veteran validator in the Cosmos and EVM ecosystems with experience in developing DeFi protocols.',\n      logo: `${process.env.BASE_URL}textures/b_harvest.jpg`,\n    },\n    {\n      id: 'Mirana',\n      name: 'Mirana',\n      description:\n        'Mirana Ventures, a global investment fund focused on blockchain and Web3 projects, supporting startups in decentralized finance, gaming, and infrastructure with investments and partnerships.',\n      logo: `${process.env.BASE_URL}textures/mirana.jpg`,\n    },\n    {\n      id: 'MML',\n      name: 'MML',\n      description:","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":4}}],["73",{"pageContent":"    {\n      id: 'MML',\n      name: 'MML',\n      description:\n        'Metaverse Markup Language (MML), a language developed by Somnia for defining interoperable objects and avatars in metaverse environments, enabling seamless digital asset integration.',\n      logo: `${process.env.BASE_URL}textures/mml.png`,\n    },\n    {\n      id: 'Grillz Gang',\n      name: 'Grillz Gang',\n      description:\n        'NFT project focused on creating and managing non-fungible tokens.',\n      logo: `${process.env.BASE_URL}textures/grillz_gang.jpg`,\n    },\n    {\n      id: 'Improbable',\n      name: 'Improbable',\n      description:\n        'Metaverse and gaming company supporting the development of Somnia’s ecosystem.',\n      logo: `${process.env.BASE_URL}textures/improbable.png`,\n    },\n    {\n      id: 'MSquared',\n      name: 'MSquared',\n      description:\n        'Interoperable metaverse network providing financial and technical support to Somnia.',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":5}}],["74",{"pageContent":"      id: 'MSquared',\n      name: 'MSquared',\n      description:\n        'Interoperable metaverse network providing financial and technical support to Somnia.',\n      logo: `${process.env.BASE_URL}textures/msquared.png`,\n    },\n    {\n      id: 'Playground',\n      name: 'Playground',\n      description:\n        'Web-based metaverse platform for user interaction and engagement.',\n      logo: `${process.env.BASE_URL}textures/playground.jpg`,\n    },\n    {\n      id: 'Uprising',\n      name: 'Uprising',\n      description:\n        'Game publisher supporting the growth of Somnia’s gaming ecosystem.',\n      logo: `${process.env.BASE_URL}textures/uprising.jpeg`,\n    },\n    {\n      id: 'Maelstrom',\n      name: 'Maelstrom',\n      description: 'Naval battle royale game built on blockchain technology.',\n      logo: `${process.env.BASE_URL}textures/maelstorm.jpg`,\n    },\n    {\n      id: 'Standard',\n      name: 'Standard',\n      description: 'Decentralized exchange with an on-chain order book system.',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":6}}],["75",{"pageContent":"    {\n      id: 'Standard',\n      name: 'Standard',\n      description: 'Decentralized exchange with an on-chain order book system.',\n      logo: `${process.env.BASE_URL}textures/standard.png`,\n    },\n    {\n      id: 'ForU AI',\n      name: 'ForU AI',\n      description: 'AI-driven platform for decentralized identity solutions.',\n      logo: `${process.env.BASE_URL}textures/foruai.jpg`,\n    },\n    {\n      id: 'Otomato',\n      name: 'Otomato',\n      description: 'No-code platform for creating AI agents.',\n      logo: `${process.env.BASE_URL}textures/otomato.jpg`,\n    },\n    {\n      id: 'LootMogul',\n      name: 'LootMogul',\n      description:\n        'AI-powered sports technology platform for blockchain-based applications.',\n      logo: `${process.env.BASE_URL}textures/loot_mogul.webp`,\n    },\n    {\n      id: 'Sogni AI',\n      name: 'Sogni AI',\n      description:\n        'Creative AI platform assisting content creators in the metaverse.',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":7}}],["76",{"pageContent":"      id: 'Sogni AI',\n      name: 'Sogni AI',\n      description:\n        'Creative AI platform assisting content creators in the metaverse.',\n      logo: `${process.env.BASE_URL}textures/sogniai.jpg`,\n    },\n    {\n      id: 'YOM',\n      name: 'YOM',\n      description:\n        'Cloud gaming network supporting blockchain-based gaming ecosystems.',\n      logo: `${process.env.BASE_URL}textures/yom.jpg`,\n    },\n    {\n      id: 'Lucky Adventure Gambit',\n      name: 'Lucky Adventure Gambit',\n      description:\n        'Turn-based role-playing game integrated with blockchain technology.',\n      logo: `${process.env.BASE_URL}textures/lag.jpg`,\n    },\n    {\n      id: 'Quills',\n      name: 'Quills',\n      description:\n        'NFT project focused on creating unique digital collectibles.',\n      logo: `${process.env.BASE_URL}textures/quills.jpg`,\n    },\n    {\n      id: 'Galeon',\n      name: 'Galeon',\n      description: 'No-code platform for building blockchain-based games.',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":8}}],["77",{"pageContent":"    {\n      id: 'Galeon',\n      name: 'Galeon',\n      description: 'No-code platform for building blockchain-based games.',\n      logo: `${process.env.BASE_URL}textures/galeon.jpg`,\n    },\n    {\n      id: 'QSTN',\n      name: 'QSTN',\n      description:\n        'Survey-to-earn platform rewarding users for participating in blockchain-based surveys.',\n      logo: `${process.env.BASE_URL}textures/qstn.jpeg`,\n    },\n    {\n      id: 'Glacis Labs',\n      name: 'Glacis Labs',\n      description:\n        'Cross-chain messaging platform for secure blockchain interactions.',\n      logo: `${process.env.BASE_URL}textures/glacis_labs.jpg`,\n    },\n    {\n      id: 'Coin98',\n      name: 'Coin98',\n      description:\n        'Multi-chain wallet for managing assets across various blockchains.',\n      logo: `${process.env.BASE_URL}textures/coin98.png`,\n    },\n    {\n      id: 'Netherak Demons',\n      name: 'Netherak Demons',\n      description:","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":9}}],["78",{"pageContent":"    {\n      id: 'Netherak Demons',\n      name: 'Netherak Demons',\n      description:\n        'Dark fantasy role-playing game built on blockchain technology.',\n      logo: `${process.env.BASE_URL}textures/demons.jpg`,\n    },\n    {\n      id: 'Dark Table CCG',\n      name: 'Dark Table CCG',\n      description:\n        'On-chain collectible card game leveraging blockchain for asset ownership.',\n      logo: `${process.env.BASE_URL}textures/dark_table.png`,\n    },\n    {\n      id: 'Kraft Labs',\n      name: 'Kraft Labs',\n      description:\n        'Platform for creating hybrid casual games with blockchain integration.',\n      logo: `${process.env.BASE_URL}textures/kraft_labs.jpeg`,\n    },\n    {\n      id: 'Zerion',\n      name: 'Zerion',\n      description:\n        'Non-custodial wallet for managing DeFi assets and investments.',\n      logo: `${process.env.BASE_URL}textures/zerion.png`,\n    },\n    {\n      id: 'Particle Network',\n      name: 'Particle Network',\n      description:","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":10}}],["79",{"pageContent":"    {\n      id: 'Particle Network',\n      name: 'Particle Network',\n      description:\n        'Wallet abstraction SDK and wallet provider for Web3 developers.',\n      logo: `${process.env.BASE_URL}textures/particle_network.png`,\n    },\n    {\n      id: 'Mullet Cop The Game',\n      name: 'Mullet Cop The Game',\n      description:\n        'Blockchain-based simulation game set in a mall environment.',\n      logo: `${process.env.BASE_URL}textures/mcg.jpg`,\n    },\n    {\n      id: 'Chunked',\n      name: 'Chunked',\n      description:\n        'Fully on-chain game leveraging blockchain for gameplay and assets.',\n      logo: `${process.env.BASE_URL}textures/chunked.webp`,\n    },\n    {\n      id: 'GAM3S.GG',\n      name: 'GAM3S.GG',\n      description:\n        'Web3 gaming superapp aggregating blockchain-based gaming experiences.',\n      logo: `${process.env.BASE_URL}textures/g3.webp`,\n    },\n    {\n      id: 'Luckysea',\n      name: 'Luckysea',\n      description:","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":11}}],["80",{"pageContent":"    {\n      id: 'Luckysea',\n      name: 'Luckysea',\n      description:\n        'Web3 gaming superapp supporting decentralized gaming applications.',\n      logo: `${process.env.BASE_URL}textures/luckysea.jpg`,\n    },\n    {\n      id: 'Blocksense',\n      name: 'Blocksense',\n      description:\n        'Permissionless oracle protocol for DeFi and blockchain applications.',\n      logo: `${process.env.BASE_URL}textures/blocksense.png`,\n    },\n    {\n      id: 'Euclid Protocol',\n      name: 'Euclid Protocol',\n      description:\n        'Unified cross-chain liquidity layer for seamless asset transfers.',\n      logo: `${process.env.BASE_URL}textures/euclid.jpg`,\n    },\n  ],\n  links: [\n    { source: 'Somnia', target: 'Ankr RPC', color: 'blue' },\n    { source: 'Somnia', target: 'Privy.io', color: 'violet' },\n    { source: 'Somnia', target: 'Thirdweb', color: 'darkblue' },\n    { source: 'Somnia', target: 'YagaLabs', color: 'pink' },\n    { source: 'Somnia', target: 'Ormi', color: 'red' },\n    //","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":12}}],["81",{"pageContent":"    { source: 'Somnia', target: 'Thirdweb', color: 'darkblue' },\n    { source: 'Somnia', target: 'YagaLabs', color: 'pink' },\n    { source: 'Somnia', target: 'Ormi', color: 'red' },\n    //\n    { source: 'Somnia', target: 'Protofire', color: 'blue' },\n    { source: 'Somnia', target: 'Safe (Palmera)', color: 'violet' },\n    { source: 'Somnia', target: 'DIA', color: 'darkblue' },\n    { source: 'Somnia', target: 'Hyperlane', color: 'pink' },\n    { source: 'Somnia', target: 'Dune', color: 'red' },\n    //\n    { source: 'Somnia', target: 'Sequence', color: 'blue' },\n    { source: 'Somnia', target: 'Hemera’s Social Scan', color: 'violet' },\n    { source: 'Somnia', target: 'Validation Cloud', color: 'darkblue' },\n    { source: 'Somnia', target: 'B-Harvest', color: 'pink' },\n    //\n    { source: 'Somnia', target: 'MSquared', color: 'blue' },\n    { source: 'Somnia', target: 'Mirana', color: 'violet' },\n    { source: 'Somnia', target: 'MML', color: 'darkblue' },","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":13}}],["82",{"pageContent":"    //\n    { source: 'Somnia', target: 'MSquared', color: 'blue' },\n    { source: 'Somnia', target: 'Mirana', color: 'violet' },\n    { source: 'Somnia', target: 'MML', color: 'darkblue' },\n    { source: 'Somnia', target: 'Grillz Gang', color: 'pink' },\n    { source: 'Somnia', target: 'Improbable', color: 'red' },\n    //\n    { source: 'Somnia', target: 'Playground', color: 'violet' },\n    { source: 'Somnia', target: 'Uprising', color: 'darkblue' },\n    { source: 'Somnia', target: 'Maelstrom', color: 'red' },\n    //\n    { source: 'Somnia', target: 'Standard', color: 'blue' },\n    { source: 'Somnia', target: 'ForU AI', color: 'violet' },\n    { source: 'Somnia', target: 'Otomato', color: 'darkblue' },\n    { source: 'Somnia', target: 'LootMogul', color: 'pink' },\n    { source: 'Somnia', target: 'Sogni AI', color: 'red' },\n    //\n    { source: 'Somnia', target: 'YOM', color: 'blue' },\n    { source: 'Somnia', target: 'Lucky Adventure Gambit', color: 'violet' },","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":14}}],["83",{"pageContent":"    { source: 'Somnia', target: 'Sogni AI', color: 'red' },\n    //\n    { source: 'Somnia', target: 'YOM', color: 'blue' },\n    { source: 'Somnia', target: 'Lucky Adventure Gambit', color: 'violet' },\n    { source: 'Somnia', target: 'Quills', color: 'darkblue' },\n    { source: 'Somnia', target: 'Galeon', color: 'pink' },\n    { source: 'Somnia', target: 'QSTN', color: 'red' },\n    //\n    { source: 'Somnia', target: 'Glacis Labs', color: 'blue' },\n    { source: 'Somnia', target: 'Coin98', color: 'violet' },\n    { source: 'Somnia', target: 'Netherak Demons', color: 'darkblue' },\n    { source: 'Somnia', target: 'Dark Table CCG', color: 'pink' },\n    { source: 'Somnia', target: 'Kraft Labs', color: 'red' },\n    //\n    { source: 'Somnia', target: 'Zerion', color: 'blue' },\n    { source: 'Somnia', target: 'Particle Network', color: 'violet' },\n    { source: 'Somnia', target: 'Mullet Cop The Game', color: 'darkblue' },\n    { source: 'Somnia', target: 'Chunked', color: 'pink' },","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":15}}],["84",{"pageContent":"    { source: 'Somnia', target: 'Zerion', color: 'blue' },\n    { source: 'Somnia', target: 'Particle Network', color: 'violet' },\n    { source: 'Somnia', target: 'Mullet Cop The Game', color: 'darkblue' },\n    { source: 'Somnia', target: 'Chunked', color: 'pink' },\n    { source: 'Somnia', target: 'GAM3S.GG', color: 'red' },\n    //\n    { source: 'Somnia', target: 'Luckysea', color: 'blue' },\n    { source: 'Somnia', target: 'Blocksense', color: 'violet' },\n    { source: 'Somnia', target: 'Euclid Protocol', color: 'darkblue' },\n    //\n    //\n    //\n    //\n    { source: 'Thirdweb', target: 'Safe (Palmera)', color: 'whitesmoke' },\n    { source: 'Uprising', target: 'Maelstrom', color: 'whitesmoke' },\n    { source: 'YagaLabs', target: 'MSquared', color: 'whitesmoke' },\n  ],\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/somniaPartners.ts","fileType":".ts","chunk_index":16}}],["85",{"pageContent":"import { NumberVector3 } from './types';\n\nexport interface TransactionModule {\n  id: string;\n  name: string;\n  position: NumberVector3;\n  color: string;\n}\n\nexport const transactionModules: TransactionModule[] = [\n  {\n    id: 'dApp_1',\n    name: 'dApp_1',\n    position: [3, 1, 0],\n    color: 'red',\n  },\n  {\n    id: 'dApp_2',\n    name: 'dApp_2',\n    position: [1.5, 1, 2.598],\n    color: 'green',\n  },\n  {\n    id: 'dApp_3',\n    name: 'dApp_3',\n    position: [-1.5, 1, 2.598],\n    color: 'blue',\n  },\n  {\n    id: 'dApp_4',\n    name: 'dApp_4',\n    position: [-3, 1, 0],\n    color: 'orange',\n  },\n  {\n    id: 'dApp_N',\n    name: 'dApp_N',\n    position: [1.5, 1, -2.598],\n    color: 'violet',\n  },\n  {\n    id: 'dApp...',\n    name: 'dApp...',\n    position: [-1.5, 1, -2.598],\n    color: 'aqua',\n  },\n  {\n    id: 'Somnia',\n    name: 'Somnia',\n    position: [0, 2, 0],\n    color: 'silver',\n  },\n];\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/transactionModules.ts","fileType":".ts","chunk_index":0}}],["86",{"pageContent":"import {\n  BufferGeometry,\n  Material,\n  Mesh,\n  NormalBufferAttributes,\n  Object3DEventMap,\n} from 'three';\n\nexport type NumberVector3 = [number, number, number];\nexport type BooleanVector3 = [boolean, boolean, boolean];\n\nexport type MeshWrapper = Mesh<\n  BufferGeometry<NormalBufferAttributes>,\n  Material | Material[],\n  Object3DEventMap\n>;\n\nexport type Coords = { x: number; y: number; z: number };\n\ninterface Contract {\n  hash: string;\n  implementation_name: string;\n  name: string;\n  ens_domain_name: string;\n  metadata: {\n    slug: string;\n    name: string;\n    tagType: string;\n    ordinal: number;\n    meta: object;\n  };\n}\n\nexport interface MinimalTransactionDto {\n  method: string;\n  raw_input: string;\n  transaction_types: string[];\n  created_contract: Contract;\n}\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/types.ts","fileType":".ts","chunk_index":0}}],["87",{"pageContent":"import { ethers } from 'ethers';\nimport { useCallback, useEffect, useState } from 'react';\n\ntype LogEntry = { time: string; msg: string };\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\nconst CHAIN_ID_HEX = '0xC488';\nconst SOMNIA_PARAMS = {\n  chainId: CHAIN_ID_HEX,\n  chainName: 'Somnia Testnet',\n  nativeCurrency: { name: 'Test ETH', symbol: 'ETH', decimals: 18 },\n  rpcUrls: [\n    'https://testnet-rpc.somnia.network/',\n    'https://dream-rpc.somnia.network/',\n  ],\n  blockExplorerUrls: ['https://testnet.somniascan.io/'],\n};\n\nexport const getContractBalance = async (contractAddress: string) => {\n  const provider = new ethers.providers.JsonRpcProvider(\n    SOMNIA_PARAMS.rpcUrls[1]\n  );\n  const balance = await provider.getBalance(contractAddress);\n  return ethers.utils.formatEther(balance);\n};\n\nexport const useWeb3State = (contractAddress: string, abi: any) => {\n  const [provider, setProvider] = useState<ethers.providers.Web3Provider>();","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/useWeb3State.ts","fileType":".ts","chunk_index":0}}],["88",{"pageContent":"export const useWeb3State = (contractAddress: string, abi: any) => {\n  const [provider, setProvider] = useState<ethers.providers.Web3Provider>();\n  const [signer, setSigner] = useState<ethers.Signer | null>();\n  const [contract, setContract] = useState<ethers.Contract | null>();\n  const [account, setAccount] = useState<string>('');\n  const [isOwner, setIsOwner] = useState<boolean>(false);\n  const [logs, setLogs] = useState<LogEntry[]>([]);\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const log = useCallback((m: string) => {\n    setLogs((prev) => [\n      { time: new Date().toLocaleTimeString(), msg: m },\n      ...prev,\n    ]);\n  }, []);\n\n  useEffect(() => {\n    if (window.ethereum) {\n      const p = new ethers.providers.Web3Provider(window.ethereum, 'any');\n      setProvider(p);\n      p.listAccounts().then((accounts) => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          const sig = p.getSigner();\n          setSigner(sig);","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/useWeb3State.ts","fileType":".ts","chunk_index":1}}],["89",{"pageContent":"        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          const sig = p.getSigner();\n          setSigner(sig);\n          const c = new ethers.Contract(contractAddress, abi, sig);\n          setContract(c);\n          log(`✅ Automatically connected: ${accounts[0]}`);\n          c.owner().then((owner: any) => {\n            if (accounts[0].toLowerCase() === owner.toLowerCase()) {\n              setIsOwner(true);\n              log('👑 You are connected like contract owner.');\n            }\n          });\n        } else {\n          log('MetaMask detected. Please connect your wallet.');\n        }\n      });\n    } else {\n      log('MetaMask not detected. Please install the extension to play.');\n    }\n  }, [log, contractAddress, abi]);\n\n  const ensureCorrectChain = useCallback(async () => {\n    if (!window.ethereum) throw new Error('No crypto wallet found');\n\n    const currentChainId = await window.ethereum.request({\n      method: 'eth_chainId',\n    });\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/useWeb3State.ts","fileType":".ts","chunk_index":2}}],["90",{"pageContent":"    const currentChainId = await window.ethereum.request({\n      method: 'eth_chainId',\n    });\n\n    if (currentChainId === CHAIN_ID_HEX) {\n      log('✅ Already on the correct network: Somnia Testnet');\n      return;\n    }\n\n    log('🔄 Attempting to switch network...');\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: CHAIN_ID_HEX }],\n      });\n      log('✅ Switched to Somnia Testnet');\n    } catch (err: any) {\n      if (err.code === 4902) {\n        log('🛠️ Somnia network not found, adding it...');\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [SOMNIA_PARAMS],\n        });\n      } else {\n        log(`❗ Failed to switch: ${err.message}`);\n        throw err;\n      }\n    }\n  }, [log]);\n\n  const disconnect = useCallback(() => {\n    setSigner(null);\n    setContract(null);\n    setAccount('');\n    setIsOwner(false);\n    log('Wallet disconnected.');\n  }, [log]);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/useWeb3State.ts","fileType":".ts","chunk_index":3}}],["91",{"pageContent":"    setIsOwner(false);\n    log('Wallet disconnected.');\n  }, [log]);\n\n  const connect = useCallback(async () => {\n    if (!provider) {\n      log('Provider not found.');\n      return;\n    }\n    setIsConnecting(true);\n    log('🚀 Initiating connection...');\n\n    try {\n      const [addr] = await provider.send('eth_requestAccounts', []);\n      log(`✅ Wallet access granted for: ${addr}`);\n\n      await ensureCorrectChain();\n\n      const sig = provider.getSigner();\n      const c = new ethers.Contract(contractAddress, abi, sig);\n\n      setAccount(addr);\n      setSigner(sig);\n      setContract(c);\n\n      log(`✅ Wallet connected: ${addr}`);\n\n      const ownerAddress = await c.owner();\n      if (addr.toLowerCase() === ownerAddress.toLowerCase()) {\n        setIsOwner(true);\n        log('👑 You are connected as the contract owner.');\n      } else {\n        setIsOwner(false);\n      }\n    } catch (error: any) {\n      log(`❗ Connection process failed: ${error.message}`);\n      disconnect();","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/useWeb3State.ts","fileType":".ts","chunk_index":4}}],["92",{"pageContent":"      }\n    } catch (error: any) {\n      log(`❗ Connection process failed: ${error.message}`);\n      disconnect();\n    } finally {\n      setIsConnecting(false);\n    }\n  }, [log, provider, ensureCorrectChain, contractAddress, abi, disconnect]);\n\n  return {\n    log,\n    connect,\n    provider,\n    signer,\n    contract,\n    account,\n    isOwner,\n    logs,\n    disconnect,\n    isConnecting,\n  };\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/useWeb3State.ts","fileType":".ts","chunk_index":5}}],["93",{"pageContent":"import { MinimalTransactionDto } from './types';\n\nexport type Clasters =\n  | 'DeFi'\n  | 'Gaming'\n  | 'AI/Social'\n  | 'Metaverse/NFT'\n  | 'Infrastructure'\n  | 'Other';\n\nexport const classifyTransaction = (tx: MinimalTransactionDto) => {\n  // Infrastructure\n  if (tx.created_contract) return 'Infrastructure';\n\n  const methodId = tx.method || tx.raw_input.slice(0, 10);\n\n  // console.log('Method ID: ', methodId, '\\t', 'tx.transaction_types: ', tx.transaction_types);\n\n  const methodMap: Record<string, Clasters> = {\n    // DeFi\n    '0x095ea7b3': 'DeFi', // approve\n    '0x04e45aaf': 'DeFi', // exactInputSingle\n    '0x5ae401dc': 'DeFi', // multicall\n    approve: 'DeFi',\n    exactInputSingle: 'DeFi',\n    multicall: 'DeFi',\n    transfer: 'DeFi',\n    withdraw: 'DeFi',\n    deposit: 'DeFi',\n    swapExactTokensForTokens: 'DeFi',\n    swapExactETHForTokens: 'DeFi',\n    swapExactTokensForETH: 'DeFi',\n    limitBuy: 'DeFi',\n    addLiquidityETH: 'DeFi',\n    // NFT / Metaverse","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/utils.ts","fileType":".ts","chunk_index":0}}],["94",{"pageContent":"    swapExactTokensForETH: 'DeFi',\n    limitBuy: 'DeFi',\n    addLiquidityETH: 'DeFi',\n    // NFT / Metaverse\n    '0x23b872dd': 'Metaverse/NFT', // transferFrom ERC-20/721\n    '0x42842e0e': 'Metaverse/NFT', // safeTransferFrom\n    '0xb510391f': 'Metaverse/NFT',\n    mint: 'Metaverse/NFT',\n    transferFrom: 'Metaverse/NFT',\n    safeTransferFrom: 'Metaverse/NFT',\n    // Infra / System\n    '0x355f174c': 'Infrastructure',\n    '0x08928e03': 'Infrastructure',\n    '0xa71762bf': 'Infrastructure',\n    '0x87c6973a': 'Infrastructure',\n    '0xe43e322c': 'Infrastructure',\n    '0x17aa2f7c': 'Infrastructure',\n    '0xb3446f85': 'Infrastructure',\n    '0x00000000': 'Infrastructure',\n    '0x704f1b94': 'Infrastructure',\n    sendToken: 'Infrastructure',\n    '0x3eaf5d9f': 'Infrastructure',\n    '0x3593564c': 'Infrastructure',\n    '0xb03f4528': 'Infrastructure',\n    '0x80114347': 'Infrastructure',\n    '0x8467be0d': 'Infrastructure',\n    createToken: 'Infrastructure',\n    '0x': 'Infrastructure',","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/utils.ts","fileType":".ts","chunk_index":1}}],["95",{"pageContent":"    '0x80114347': 'Infrastructure',\n    '0x8467be0d': 'Infrastructure',\n    createToken: 'Infrastructure',\n    '0x': 'Infrastructure',\n    // AI/Social\n    loveSomini: 'AI/Social',\n    colorPixel: 'AI/Social',\n    onChainGM: 'AI/Social',\n    '0xdbaa1e64': 'AI/Social',\n    '0x10fe7c48': 'AI/Social',\n    // Gaming\n    flipCoin: 'Gaming',\n    updateScore: 'Gaming',\n    addFun: 'Gaming',\n    '0x4697fd9c': 'Gaming',\n    '0x894f43c0': 'Gaming',\n    '0x6e31c749': 'Gaming',\n    payRewards: 'Gaming',\n    '0xc827c0ff': 'Gaming',\n    claim: 'Gaming',\n  };\n  if (methodMap?.[methodId]) {\n    return methodMap[methodId];\n  }\n\n  console.log(\n    'Method ID: ',\n    methodId,\n    '\\t',\n    'tx.transaction_types: ',\n    tx.transaction_types\n  );\n\n  // 7. Default\n  return 'Other';\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/shared/utils.ts","fileType":".ts","chunk_index":2}}],["96",{"pageContent":"import React, { useState, useRef, useMemo, CSSProperties } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport { DescriptionContainer } from '@/entities/DescriptionContainer';\nimport * as THREE from 'three';\n\nconst btnStyle: CSSProperties = {\n  position: 'absolute',\n  backgroundColor: '#007bff',\n  color: 'white',\n  border: 'none',\n  borderRadius: '4px',\n  cursor: 'pointer',\n  fontSize: '14px',\n  padding: '5px',\n  margin: '5px',\n  zIndex: 10,\n};\n\nconst SceneSetup = () => {\n  const { scene } = useThree();\n  scene.background = new THREE.Color('#000000'); // Явно задаем черный фон\n  return null;\n};\n\ninterface ParticleStreamProps {\n  startPos: THREE.Vector3;\n  endPos: THREE.Vector3;\n  material: THREE.Material;\n}\n\nconst ParticleStream = ({\n  startPos,\n  endPos,\n  material,\n}: ParticleStreamProps) => {\n  const ref = useRef<THREE.Points | null>(null);\n  const count = 20;\n  const speed = 0.5;\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":0}}],["97",{"pageContent":"  const ref = useRef<THREE.Points | null>(null);\n  const count = 20;\n  const speed = 0.5;\n\n  useFrame((_, delta) => {\n    if (!ref.current) return;\n    if (!ref.current.userData.offset) {\n      ref.current.userData.offset = 0;\n    }\n    ref.current.userData.offset += delta * speed;\n    if (ref.current.userData.offset > 1) ref.current.userData.offset -= 1;\n    const offset = ref.current.userData.offset;\n\n    const positions = ref.current.geometry.attributes.position.array;\n    const direction = new THREE.Vector3().subVectors(endPos, startPos);\n    const length = direction.length();\n    direction.normalize();\n\n    for (let i = 0; i < count; i++) {\n      const t = (i / count + offset) % 1;\n      const pos = startPos\n        .clone()\n        .add(direction.clone().multiplyScalar(t * length));\n      positions[i * 3] = pos.x;\n      positions[i * 3 + 1] = pos.y;\n      positions[i * 3 + 2] = pos.z;\n    }\n    ref.current.geometry.attributes.position.needsUpdate = true;\n  });\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":1}}],["98",{"pageContent":"    }\n    ref.current.geometry.attributes.position.needsUpdate = true;\n  });\n\n  const positions = new Float32Array(count * 3);\n  for (let i = 0; i < count; i++) {\n    positions[i * 3] = startPos.x;\n    positions[i * 3 + 1] = startPos.y;\n    positions[i * 3 + 2] = startPos.z;\n  }\n\n  const geometry = new THREE.BufferGeometry();\n  geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n  return <points ref={ref} geometry={geometry} material={material} />;\n};\n\nconst cubePosition = new THREE.Vector3(0, 0.5, 0);\n\ninterface Metrics {\n  operation: 'Read' | 'Write' | 'Snapshot';\n  ramAccess?: boolean;\n  time: number;\n}\n\nexport const IceDB = () => {\n  // Состояние для метрик и визуальных эффектов\n  const [metrics, setMetrics] = useState<Metrics | null>(null);\n  const [showIncoming, setShowIncoming] = useState(false);\n  const [showOutgoing, setShowOutgoing] = useState(false);\n  const [showSnapshot, setShowSnapshot] = useState(false);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":2}}],["99",{"pageContent":"  const [showIncoming, setShowIncoming] = useState(false);\n  const [showOutgoing, setShowOutgoing] = useState(false);\n  const [showSnapshot, setShowSnapshot] = useState(false);\n\n  const particleTexture = useMemo(() => {\n    const size = 32;\n    const canvas = document.createElement('canvas');\n    canvas.width = size;\n    canvas.height = size;\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n    const gradient = ctx.createRadialGradient(\n      size / 2,\n      size / 2,\n      0,\n      size / 2,\n      size / 2,\n      size / 2\n    );\n    gradient.addColorStop(0, 'white');\n    gradient.addColorStop(1, 'transparent');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, size, size);\n    return new THREE.CanvasTexture(canvas);\n  }, []);\n\n  const incomingparticleMaterial = useMemo(\n    () =>\n      new THREE.PointsMaterial({\n        map: particleTexture,\n        size: 0.2,\n        transparent: true,\n        color: 'coral',\n      }),\n    [particleTexture]\n  );\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":3}}],["100",{"pageContent":"      }),\n    [particleTexture]\n  );\n\n  const outgoingparticleMaterial = useMemo(\n    () =>\n      new THREE.PointsMaterial({\n        map: particleTexture,\n        size: 0.2,\n        transparent: true,\n        color: 'lightblue',\n      }),\n    [particleTexture]\n  );\n\n  const distance = 5;\n\n  const directions = [\n    new THREE.Vector3(0, 1, 0),\n    new THREE.Vector3(0, 1, 0),\n    new THREE.Vector3(0, 1, 0),\n    new THREE.Vector3(0, 1, 0),\n    new THREE.Vector3(0, 1, 0),\n  ];\n\n  const incomingStreams = useMemo(() => {\n    return directions.map((dir, index) => {\n      const start = cubePosition\n        .clone()\n        .add(dir.clone().multiplyScalar(distance));\n      const end = cubePosition.clone();\n      return {\n        start: new THREE.Vector3(\n          index % 2 !== 0 ? start.x - 0.1 * index : start.x + 0.1 * index,\n          start.y,\n          start.z\n        ),\n        end: new THREE.Vector3(\n          index % 2 !== 0 ? end.x - 0.1 * index : end.x + 0.1 * index,\n          end.y,","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":4}}],["101",{"pageContent":"        ),\n        end: new THREE.Vector3(\n          index % 2 !== 0 ? end.x - 0.1 * index : end.x + 0.1 * index,\n          end.y,\n          end.z\n        ),\n      };\n    });\n  }, [distance]);\n\n  const outgoingStreams = useMemo(() => {\n    return directions.map((dir, index) => {\n      const start = cubePosition.clone();\n      const end = cubePosition\n        .clone()\n        .add(dir.clone().multiplyScalar(distance));\n      return {\n        start: new THREE.Vector3(\n          index % 2 !== 0 ? start.x - 0.1 * index : start.x + 0.1 * index,\n          start.y,\n          start.z\n        ),\n        end: new THREE.Vector3(\n          index % 2 !== 0 ? end.x - 0.1 * index : end.x + 0.1 * index,\n          end.y,\n          end.z\n        ),\n      };\n    });\n  }, [distance]);\n\n  const performRead = () => {\n    const ramAccess = Math.random() < 0.8;\n    const time = ramAccess ? Math.random() * 35 + 15 : Math.random() * 50 + 50;\n    setMetrics({ operation: 'Read', ramAccess, time });","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":5}}],["102",{"pageContent":"  const performRead = () => {\n    const ramAccess = Math.random() < 0.8;\n    const time = ramAccess ? Math.random() * 35 + 15 : Math.random() * 50 + 50;\n    setMetrics({ operation: 'Read', ramAccess, time });\n    setShowOutgoing(true);\n    setTimeout(() => setShowOutgoing(false), 1000);\n  };\n\n  const performWrite = () => {\n    const ramAccess = Math.random() < 0.7;\n    const time = ramAccess ? Math.random() * 40 + 10 : Math.random() * 60 + 40;\n    setMetrics({ operation: 'Write', ramAccess, time });\n    setShowIncoming(true);\n    setTimeout(() => setShowIncoming(false), 1000);\n  };\n\n  const takeSnapshot = () => {\n    setMetrics({ operation: 'Snapshot', time: 100 });\n    setShowSnapshot(true);\n    setTimeout(() => setShowSnapshot(false), 1000);\n  };\n\n  return (\n    <div style={{ position: 'relative', width: '100%', height: '100vh' }}>\n      <DescriptionContainer>\n        <>\n          <h2>Metrics</h2>\n          <p>Operation: {metrics?.operation || 'No'}</p>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":6}}],["103",{"pageContent":"      <DescriptionContainer>\n        <>\n          <h2>Metrics</h2>\n          <p>Operation: {metrics?.operation || 'No'}</p>\n          <p>Access to RAM: {metrics?.ramAccess ? 'Yes' : 'No'}</p>\n          <p>\n            Time:{' '}\n            {metrics?.time\n              ? `${metrics?.time?.toFixed(4)} nano sec`\n              : 'Unknown'}\n          </p>\n        </>\n      </DescriptionContainer>\n      <button\n        style={{ ...btnStyle, left: '15px', top: '180px' }}\n        onClick={performRead}\n      >\n        Execute read\n      </button>\n      <button\n        style={{ ...btnStyle, left: '15px', top: '210px' }}\n        onClick={performWrite}\n      >\n        Execute write\n      </button>\n      <button\n        style={{ ...btnStyle, left: '15px', top: '240px' }}\n        onClick={takeSnapshot}\n      >\n        Create snapshot\n      </button>\n      <Canvas shadows camera={{ position: [5, 5, 5], fov: 50 }}>\n        <SceneSetup />\n        <ambientLight intensity={0.5} />","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":7}}],["104",{"pageContent":"      </button>\n      <Canvas shadows camera={{ position: [5, 5, 5], fov: 50 }}>\n        <SceneSetup />\n        <ambientLight intensity={0.5} />\n        <directionalLight castShadow position={[5, 10, 5]} intensity={1} />\n\n        <mesh castShadow receiveShadow position={cubePosition}>\n          <boxGeometry args={[1, 1, 1]} />\n          <meshStandardMaterial color=\"green\" />\n        </mesh>\n\n        {showIncoming &&\n          incomingStreams.map((stream, i) => (\n            <ParticleStream\n              key={`incoming-${i}`}\n              startPos={stream.start}\n              endPos={stream.end}\n              material={incomingparticleMaterial}\n            />\n          ))}\n\n        {showOutgoing &&\n          outgoingStreams.map((stream, i) => (\n            <ParticleStream\n              key={`outgoing-${i}`}\n              startPos={stream.start}\n              endPos={stream.end}\n              material={outgoingparticleMaterial}\n            />\n          ))}\n\n        {showSnapshot && (","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":8}}],["105",{"pageContent":"            />\n          ))}\n\n        {showSnapshot && (\n          <mesh position={cubePosition}>\n            <boxGeometry args={[1, 1, 1]} />\n            <meshBasicMaterial color=\"yellow\" transparent opacity={0.5} />\n          </mesh>\n        )}\n\n        <OrbitControls />\n      </Canvas>\n    </div>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/IceDB.tsx","fileType":".tsx","chunk_index":9}}],["106",{"pageContent":"import { Canvas } from '@react-three/fiber';\nimport { OrbitControls, Html } from '@react-three/drei';\nimport * as THREE from 'three';\nimport { useState, useEffect, useMemo, useCallback } from 'react';\nimport { DescriptionContainer } from '@/entities/DescriptionContainer';\n\nconst validatorsAmount = 16;\nconst blocksAmount = 20;\nconst matrixRow = 4;\nconst matrixCol = 4;\nconst blockSpacing = 1;\nconst rowSpacing = 2;\nconst colSpacing = 2;\nconst consensusInterval = 5;\nconst totalY = (matrixRow - 1) * rowSpacing;\nconst totalZ = (matrixCol - 1) * colSpacing;\nconst consensusOffset = 2;\n\ninterface HoveredBlock {\n  i: number;\n  j: number;\n}\n\nexport const MultistreamConsensusScene = () => {\n  const [blocksViewerAmount, setBlocksViewerAmount] = useState(0);\n  const [hoveredBlock, setHoveredBlock] = useState<HoveredBlock | null>(null);\n  const [hoveredPlane, setHoveredPlane] = useState<number | null>(null);\n\n  useEffect(() => {\n    const interval = setInterval(() => {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/MultistreamConsensus.tsx","fileType":".tsx","chunk_index":0}}],["107",{"pageContent":"  const [hoveredPlane, setHoveredPlane] = useState<number | null>(null);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setBlocksViewerAmount((prev) =>\n        prev < blocksAmount - 1 ? prev + 1 : prev\n      );\n    }, 2000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const repeatInteractive = useCallback(() => {\n    setHoveredBlock(null);\n    setHoveredPlane(null);\n    setBlocksViewerAmount(0);\n  }, []);\n\n  const currentBlocks = useMemo(() => {\n    const blocks = [];\n\n    for (let i = 0; i < validatorsAmount; i++) {\n      const row = Math.floor(i / matrixCol);\n      const col = i % matrixCol;\n      const color = new THREE.Color(\n        `hsl(${(i / validatorsAmount) * 360}, 100%, 50%)`\n      );\n      for (let j = 0; j <= blocksViewerAmount; j++) {\n        const x = j * blockSpacing;\n        const y = row * rowSpacing;\n        const z = col * colSpacing;\n        blocks.push(\n          <mesh\n            key={`${i}-${j}`}\n            position={[x, y, z]}","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/MultistreamConsensus.tsx","fileType":".tsx","chunk_index":1}}],["108",{"pageContent":"        blocks.push(\n          <mesh\n            key={`${i}-${j}`}\n            position={[x, y, z]}\n            onPointerOver={() => setHoveredBlock({ i, j })}\n            onPointerOut={() => setHoveredBlock(null)}\n          >\n            <boxGeometry args={[0.5, 0.5, 0.5]} />\n            <meshStandardMaterial color={color} />\n          </mesh>\n        );\n      }\n    }\n\n    return blocks;\n  }, [blocksViewerAmount, setHoveredBlock]);\n\n  const currentConsensusPlanes = useMemo(() => {\n    const numConsensus =\n      Math.floor((blocksAmount - consensusOffset) / consensusInterval) + 1;\n    const consensusPlanes = [];\n\n    for (let i = 0; i < numConsensus; i++) {\n      if (i * consensusInterval <= blocksViewerAmount) {\n        const consensusBlock = consensusOffset + i * consensusInterval;\n        if (blocksViewerAmount >= consensusBlock) {\n          const x = consensusBlock * blockSpacing;\n          consensusPlanes.push(\n            <mesh\n              key={`consensus-${i}`}","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/MultistreamConsensus.tsx","fileType":".tsx","chunk_index":2}}],["109",{"pageContent":"          const x = consensusBlock * blockSpacing;\n          consensusPlanes.push(\n            <mesh\n              key={`consensus-${i}`}\n              position={[x, totalY / 2, totalZ / 2]}\n              rotation={[0, Math.PI / 2, 0]}\n              onPointerOver={() => setHoveredPlane(i)}\n              onPointerOut={() => setHoveredPlane(null)}\n            >\n              <planeGeometry args={[totalZ, totalY]} />\n              <meshStandardMaterial\n                transparent\n                opacity={0.7}\n                color=\"blue\"\n                side={THREE.DoubleSide}\n              />\n            </mesh>\n          );\n        }\n      }\n    }\n\n    return consensusPlanes;\n  }, [blocksViewerAmount, setHoveredPlane]);\n\n  const description = useMemo(\n    () => (\n      <DescriptionContainer>\n        <>\n          <strong>Animation:</strong> Blocks appear gradually every 2 seconds,\n          reflecting the addition of new blocks to the data chain.\n          <br />","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/MultistreamConsensus.tsx","fileType":".tsx","chunk_index":3}}],["110",{"pageContent":"        <>\n          <strong>Animation:</strong> Blocks appear gradually every 2 seconds,\n          reflecting the addition of new blocks to the data chain.\n          <br />\n          <strong>Interactive:</strong> Rotate the scene with your mouse\n          (OrbitControls). Hover over consensus blocks or planes to see\n          information.\n        </>\n      </DescriptionContainer>\n    ),\n    []\n  );\n\n  const descriptionBlocks = useMemo(() => {\n    return hoveredBlock !== null && hoveredBlock !== undefined ? (\n      <Html\n        position={[\n          hoveredBlock.j * blockSpacing,\n          Math.floor(hoveredBlock.i / matrixCol) * rowSpacing + 0.7,\n          (hoveredBlock.i % matrixCol) * colSpacing,\n        ]}\n        style={{ pointerEvents: 'none' }}\n      >\n        <h6\n          style={{\n            color: 'white',\n            backgroundColor: 'rgba(0, 0, 0, 0.75)',\n            padding: '4px',\n            borderRadius: '4px',\n            width: 'fit-content',\n          }}\n        >","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/MultistreamConsensus.tsx","fileType":".tsx","chunk_index":4}}],["111",{"pageContent":"            borderRadius: '4px',\n            width: 'fit-content',\n          }}\n        >\n          Validator {hoveredBlock.i}, Block {hoveredBlock.j}\n        </h6>\n      </Html>\n    ) : null;\n  }, [hoveredBlock]);\n\n  const descriptionPlanes = useMemo(() => {\n    const plane = hoveredPlane ? hoveredPlane : 0;\n    return hoveredBlock !== null && hoveredBlock !== undefined ? (\n      <Html\n        position={[\n          consensusOffset + plane * consensusInterval * blockSpacing,\n          totalY / 2 + totalY / 2 + 0.5,\n          totalZ / 2,\n        ]}\n        sprite\n        style={{ pointerEvents: 'none' }}\n      >\n        <h6\n          style={{\n            color: 'white',\n            backgroundColor: 'rgba(0, 0, 0, 0.75)',\n            padding: '4px',\n            borderRadius: '4px',\n            fontSize: '12px',\n          }}\n        >\n          Consensus Plane {hoveredPlane}: Synchronizes all data chains at block{' '}\n          {consensusOffset + plane * consensusInterval}\n        </h6>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/MultistreamConsensus.tsx","fileType":".tsx","chunk_index":5}}],["112",{"pageContent":"        >\n          Consensus Plane {hoveredPlane}: Synchronizes all data chains at block{' '}\n          {consensusOffset + plane * consensusInterval}\n        </h6>\n      </Html>\n    ) : null;\n  }, [hoveredPlane]);\n\n  const interavtiveButton = useMemo(\n    () => (\n      <button\n        style={{\n          position: 'absolute',\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          borderRadius: '4px',\n          cursor: 'pointer',\n          zIndex: 10,\n          fontSize: '14px',\n          left: '15px',\n          top: '125px',\n          padding: '5px',\n        }}\n        onClick={repeatInteractive}\n      >\n        Repeat interactive\n      </button>\n    ),\n    [repeatInteractive]\n  );\n\n  return (\n    <div style={{ position: 'relative', width: '100%', height: '100vh' }}>\n      {description}\n      {interavtiveButton}\n      <Canvas\n        scene={{ background: new THREE.Color('black') }}\n        camera={{ position: [-15, 7, 10], fov: 50 }}","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/MultistreamConsensus.tsx","fileType":".tsx","chunk_index":6}}],["113",{"pageContent":"      {interavtiveButton}\n      <Canvas\n        scene={{ background: new THREE.Color('black') }}\n        camera={{ position: [-15, 7, 10], fov: 50 }}\n      >\n        <ambientLight intensity={0.5} />\n        <directionalLight position={[10, 10, 5]} />\n        {currentBlocks}\n        {currentConsensusPlanes}\n        {descriptionBlocks}\n        {descriptionPlanes}\n        <OrbitControls />\n      </Canvas>\n    </div>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/MultistreamConsensus.tsx","fileType":".tsx","chunk_index":7}}],["114",{"pageContent":"import React, { useState, useEffect } from 'react';\nimport { OrbitControls, Html } from '@react-three/drei';\nimport { useFrame } from '@react-three/fiber';\nimport { NumberVector3 } from '@/shared';\n\ntype BoxColor = 'red' | 'green' | 'blue';\n\ninterface BoxProps {\n  position: NumberVector3;\n  size: number;\n  label: string;\n  color: BoxColor;\n}\n\nconst Box = ({ position, size, label, color }: BoxProps) => {\n  return (\n    <group position={position}>\n      <mesh>\n        <boxGeometry args={[size, size, size]} />\n        <meshStandardMaterial color={color} />\n      </mesh>\n      <Html position={[-0.4, size + 0.2, 0]}>\n        <p style={{ color: 'white', fontSize: '10px', width: '60px' }}>\n          {label}\n        </p>\n      </Html>\n    </group>\n  );\n};\n\ninterface OptimisationBox {\n  id: number;\n  position: NumberVector3;\n  size: number;\n  label: string;\n  type: 'opt' | 'uno';\n  status: 'normal' | 'optimized';\n  color: BoxColor;\n}\n\nexport const OptimisationVisualizer = () => {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/OptimisationVisualizer.tsx","fileType":".tsx","chunk_index":0}}],["115",{"pageContent":"export const OptimisationVisualizer = () => {\n  const [boxes, setBoxes] = useState<OptimisationBox[]>([]);\n  const [nextId, setNextId] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setBoxes((prev) => [\n        ...prev,\n        {\n          id: nextId,\n          position: [-10, 0, -1.5],\n          size: 1,\n          label: 'EVM Code',\n          type: 'uno',\n          status: 'normal',\n          color: 'red',\n        },\n        {\n          id: nextId + 1,\n          position: [-10, 0, 1.5],\n          size: 1,\n          label: 'EVM Code',\n          type: 'opt',\n          status: 'normal',\n          color: 'blue',\n        },\n      ]);\n      setNextId((prev) => prev + 2);\n    }, 2000);\n\n    return () => clearInterval(interval);\n  }, [nextId]);\n\n  useFrame((_, delta) => {\n    setBoxes((prev) =>\n      prev\n        .map((box) => {\n          let newX =\n            box.position[0] + (box.status === 'optimized' ? 2 : 1) * delta;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/OptimisationVisualizer.tsx","fileType":".tsx","chunk_index":1}}],["116",{"pageContent":"      prev\n        .map((box) => {\n          let newX =\n            box.position[0] + (box.status === 'optimized' ? 2 : 1) * delta;\n          let newStatus = box.status;\n          let newSize = box.size;\n          let newColor = box.color;\n          let newLabel = box.label;\n\n          if (box.type === 'opt' && box.status === 'normal' && newX >= 0) {\n            newStatus = 'optimized';\n            newSize = 0.5;\n            newColor = 'green';\n            newLabel = 'Native Code';\n          }\n\n          return {\n            ...box,\n            position: [newX, box.position[1], box.position[2]] as NumberVector3,\n            size: newSize,\n            label: newLabel,\n            status: newStatus,\n            color: newColor,\n          };\n        })\n        .filter((box) => box.position[0] < 10)\n    );\n  });\n\n  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <directionalLight position={[10, 10, 5]} intensity={1} />","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/OptimisationVisualizer.tsx","fileType":".tsx","chunk_index":2}}],["117",{"pageContent":"  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <directionalLight position={[10, 10, 5]} intensity={1} />\n      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -2, 0]}>\n        <planeGeometry args={[20, 4]} />\n        <meshStandardMaterial color=\"lightgray\" />\n      </mesh>\n      <mesh position={[0, 0, 1.5]}>\n        <boxGeometry args={[1.2, 1.2, 1.2]} />\n        <meshStandardMaterial color=\"purple\" transparent opacity={0.5} />\n      </mesh>\n      <Html position={[-11, 0, -1.5]} color=\"white\">\n        <h4 style={{ color: 'coral', width: '200px' }}>Not optimized</h4>\n      </Html>\n      <Html position={[-11, 0, 1.5]}>\n        <h4 style={{ color: 'lightblue', width: '200px' }}>Optimized</h4>\n      </Html>\n      <Html position={[-2.0, 4, 0]}>\n        <h3 style={{ color: 'white', width: '300px' }}>\n          Optimisator Somnia EVM byte-code\n        </h3>\n      </Html>\n      <Html position={[-1, 1.5, 2]}>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/OptimisationVisualizer.tsx","fileType":".tsx","chunk_index":3}}],["118",{"pageContent":"          Optimisator Somnia EVM byte-code\n        </h3>\n      </Html>\n      <Html position={[-1, 1.5, 2]}>\n        <h4 style={{ color: 'yellow', width: '200px' }}>Optimisation module</h4>\n      </Html>\n      {boxes.map((box) => (\n        <Box\n          key={box.id}\n          position={box.position}\n          size={box.size}\n          label={box.label}\n          color={box.color}\n        />\n      ))}\n      <OrbitControls />\n    </>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/OptimisationVisualizer.tsx","fileType":".tsx","chunk_index":4}}],["119",{"pageContent":"import React, { useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\n\nimport { TransactionModule } from '@/features/TransactionModule';\nimport { TransactionParticles } from '@/features/TransactionParticles';\nimport { transactionModules } from '@/shared/transactionModules';\n\nimport { useRealtimeTransactions } from './useRealtimeTransactions';\nimport { Color } from 'three';\n\nexport const RealtimeTransactions = () => {\n  const { transactions } = useRealtimeTransactions();\n  const { scene } = useThree();\n\n  useEffect(() => {\n    const black = new Color(0, 0, 0);\n    scene.background = black;\n  }, [scene]);\n\n  return (\n    <>\n      <ambientLight intensity={0.5} />\n      <directionalLight position={[10, 10, 10]} intensity={1} />\n\n      {transactionModules.map((module) => {\n        return (\n          <TransactionModule\n            key={module.id}\n            position={module.position}\n            color={module.color}","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/RealtimeTransactions.tsx","fileType":".tsx","chunk_index":0}}],["120",{"pageContent":"          <TransactionModule\n            key={module.id}\n            position={module.position}\n            color={module.color}\n            name={module.name}\n          />\n        );\n      })}\n      <TransactionParticles\n        transactions={transactions}\n        speed={1}\n        size={0.08}\n        spacing={15}\n      />\n\n      <OrbitControls />\n    </>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/RealtimeTransactions.tsx","fileType":".tsx","chunk_index":1}}],["121",{"pageContent":"import React, { useState, useRef, useEffect, useCallback, memo } from 'react';\nimport ForceGraph2D, { NodeObject, LinkObject } from 'react-force-graph-2d';\nimport { somniaPartners } from '@/shared/somniaPartners';\n\nconst BASE_NODE_RADIUS = 18;\nconst HOVER_SCALE_FACTOR = 1.4;\nconst PARTNER_SCALE_DOWN = 1.5;\nconst CENTRAL_NODE_ID = 'Somnia';\n\ninterface PartnerNode extends NodeObject {\n  id: string;\n  name: string;\n  description: string;\n  logo: string;\n}\n\nconst imageCache = new Map<string, HTMLImageElement>();\n\nexport const SomniaPartners = () => {\n  const [images, setImages] = useState<Record<string, HTMLImageElement>>({});\n  const [hoveredNode, setHoveredNode] = useState<PartnerNode | null>(null);\n  const graphRef = useRef<any>();\n\n  useEffect(() => {\n    let isMounted = true;\n    const loadAndCacheImages = async () => {\n      const nodesToLoad = somniaPartners.nodes.filter(\n        (node) => !imageCache.has(node.id)\n      );\n      const promises = nodesToLoad.map(\n        (node) =>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SomniaPartners.tsx","fileType":".tsx","chunk_index":0}}],["122",{"pageContent":"        (node) => !imageCache.has(node.id)\n      );\n      const promises = nodesToLoad.map(\n        (node) =>\n          new Promise<void>((resolve) => {\n            const img = new Image();\n            img.src = node.logo;\n            img.onload = () => {\n              imageCache.set(node.id, img);\n              resolve();\n            };\n            img.onerror = () => {\n              console.error(\n                `Failed to load image for ${node.id}: ${node.logo}`\n              );\n              resolve();\n            };\n          })\n      );\n      await Promise.all(promises);\n      if (isMounted) {\n        const allImages: Record<string, HTMLImageElement> = {};\n        somniaPartners.nodes.forEach((node) => {\n          if (imageCache.has(node.id)) {\n            allImages[node.id] = imageCache.get(node.id)!;\n          }\n        });\n        setImages(allImages);\n      }\n    };\n    loadAndCacheImages();\n    return () => {\n      isMounted = false;\n    };\n  }, []);\n\n  useEffect(() => {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SomniaPartners.tsx","fileType":".tsx","chunk_index":1}}],["123",{"pageContent":"    };\n  }, []);\n\n  useEffect(() => {\n    if (graphRef.current) {\n      graphRef.current.d3Force('charge').strength(-400);\n      graphRef.current.d3Force('link').distance(120);\n    }\n  }, []);\n\n  const handleNodeDragEnd = useCallback((node: NodeObject) => {\n    node.fx = node.x;\n    node.fy = node.y;\n  }, []);\n\n  const handleNodeHover = useCallback((node: NodeObject | null) => {\n    setHoveredNode(node as PartnerNode | null);\n  }, []);\n\n  const getNodeRadius = useCallback(\n    (node: PartnerNode) => {\n      const isCentral = node.id === CENTRAL_NODE_ID;\n      const isHovered = hoveredNode?.id === node.id;\n\n      const baseRadius = isCentral\n        ? BASE_NODE_RADIUS\n        : BASE_NODE_RADIUS / PARTNER_SCALE_DOWN;\n\n      return baseRadius * (isHovered ? HOVER_SCALE_FACTOR : 1);\n    },\n    [hoveredNode]\n  );\n\n  const nodeCanvasObject = useCallback(\n    (node: NodeObject, ctx: CanvasRenderingContext2D) => {\n      const { x, y } = node as any;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SomniaPartners.tsx","fileType":".tsx","chunk_index":2}}],["124",{"pageContent":"\n  const nodeCanvasObject = useCallback(\n    (node: NodeObject, ctx: CanvasRenderingContext2D) => {\n      const { x, y } = node as any;\n      const typedNode = node as PartnerNode;\n      const radius = getNodeRadius(typedNode);\n      const img = images[typedNode.id];\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n      ctx.closePath();\n\n      if (hoveredNode?.id === typedNode.id) {\n        ctx.shadowColor = 'rgba(255, 255, 255, 0.7)';\n        ctx.shadowBlur = 20;\n      }\n\n      if (img) {\n        ctx.clip();\n        ctx.drawImage(img, x - radius, y - radius, radius * 2, radius * 2);\n      } else {\n        ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';\n        ctx.fill();\n      }\n\n      ctx.restore();\n    },\n    [images, hoveredNode, getNodeRadius]\n  );\n\n  const nodePointerAreaPaint = useCallback(\n    (node: NodeObject, color: string, ctx: CanvasRenderingContext2D) => {\n      const { x, y } = node as any;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SomniaPartners.tsx","fileType":".tsx","chunk_index":3}}],["125",{"pageContent":"\n  const nodePointerAreaPaint = useCallback(\n    (node: NodeObject, color: string, ctx: CanvasRenderingContext2D) => {\n      const { x, y } = node as any;\n      const typedNode = node as PartnerNode;\n      const radius = getNodeRadius(typedNode);\n\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n      ctx.fill();\n    },\n    [getNodeRadius]\n  );\n\n  const linkCanvasObject = useCallback(\n    (link: LinkObject, ctx: CanvasRenderingContext2D) => {\n      const sourceNode = link.source as PartnerNode;\n      const targetNode = link.target as PartnerNode;\n\n      const start = { x: sourceNode.x ?? 0, y: sourceNode.y ?? 0 };\n      const end = { x: targetNode.x ?? 0, y: targetNode.y ?? 0 };\n\n      const sourceRadius = getNodeRadius(sourceNode);\n      const targetRadius = getNodeRadius(targetNode);\n\n      const dx = end.x - start.x;\n      const dy = end.y - start.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SomniaPartners.tsx","fileType":".tsx","chunk_index":4}}],["126",{"pageContent":"      const dx = end.x - start.x;\n      const dy = end.y - start.y;\n      const distance = Math.sqrt(dx * dx + dy * dy);\n\n      if (distance === 0) return;\n\n      const nx = dx / distance;\n      const ny = dy / distance;\n\n      const adjustedStart = {\n        x: start.x + nx * sourceRadius,\n        y: start.y + ny * sourceRadius,\n      };\n      const adjustedEnd = {\n        x: end.x - nx * targetRadius,\n        y: end.y - ny * targetRadius,\n      };\n\n      if (adjustedStart.x * nx > adjustedEnd.x * nx) return;\n\n      ctx.beginPath();\n      ctx.moveTo(adjustedStart.x, adjustedStart.y);\n      ctx.lineTo(adjustedEnd.x, adjustedEnd.y);\n      ctx.strokeStyle = link.color || 'rgba(255, 255, 255, 0.5)';\n      ctx.lineWidth = 1.5;\n      ctx.stroke();\n    },\n    [getNodeRadius]\n  );\n\n  return (\n    <div style={{ position: 'relative', width: '100vw', height: '100vh' }}>\n      <ForceGraph2D\n        ref={graphRef}\n        graphData={somniaPartners}\n        nodeCanvasObject={nodeCanvasObject}","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SomniaPartners.tsx","fileType":".tsx","chunk_index":5}}],["127",{"pageContent":"      <ForceGraph2D\n        ref={graphRef}\n        graphData={somniaPartners}\n        nodeCanvasObject={nodeCanvasObject}\n        linkCanvasObject={linkCanvasObject}\n        onNodeHover={handleNodeHover}\n        nodePointerAreaPaint={nodePointerAreaPaint}\n        onNodeDragEnd={handleNodeDragEnd}\n        enableNodeDrag\n        enablePointerInteraction\n        backgroundColor=\"#1a1a1a\"\n        cooldownTicks={100}\n      />\n      {hoveredNode && (\n        <div\n          style={{\n            position: 'absolute',\n            top: '20px',\n            right: '20px',\n            backgroundColor: 'rgba(255, 255, 255, 0.9)',\n            padding: '15px',\n            borderRadius: '8px',\n            border: '1px solid #ccc',\n            boxShadow: '0 4px 8px rgba(0, 0, 0, 0.2)',\n            maxWidth: '300px',\n            zIndex: 1000,\n            pointerEvents: 'none',\n          }}\n        >\n          <h3 style={{ margin: '0 0 10px 0', fontSize: '1.2em' }}>\n            {hoveredNode.name}","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SomniaPartners.tsx","fileType":".tsx","chunk_index":6}}],["128",{"pageContent":"          }}\n        >\n          <h3 style={{ margin: '0 0 10px 0', fontSize: '1.2em' }}>\n            {hoveredNode.name}\n          </h3>\n          <p style={{ margin: 0, fontSize: '0.9em' }}>\n            {hoveredNode.description}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nSomniaPartners.displayName = 'SomniaPartners';\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SomniaPartners.tsx","fileType":".tsx","chunk_index":7}}],["129",{"pageContent":"import axios from 'axios';\nimport { useEffect, useMemo, useState } from 'react';\nimport { somniaSubGraphApi, somniaSubgraphConfig } from '@/shared/apis';\n\nexport const useRealtimeTransactions = () => {\n  const [transactions, setTransactions] = useState([]);\n\n  useEffect(() => {\n    try {\n      const runQuery = async () => {\n        const url = `${somniaSubGraphApi}/transactions`;\n        const response = await axios.get(url, somniaSubgraphConfig);\n        const transactions = response?.data?.transactions ?? [];\n        setTransactions(transactions);\n      };\n\n      runQuery();\n\n      const interval = setInterval(runQuery, 5000);\n\n      return () => {\n        clearInterval(interval);\n      };\n    } catch (error) {\n      console.error(error);\n    }\n  }, []);\n\n  return useMemo(\n    () => ({\n      transactions,\n    }),\n    [transactions]\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/useRealtimeTransactions.ts","fileType":".ts","chunk_index":0}}],["130",{"pageContent":"import React from 'react';\n\nexport type AnswerReview = {\n  question: string;\n  correctAnswer: string;\n  playerAnswer: string;\n};\n\ntype QuizAnswerReviewProps = {\n  answers: AnswerReview[];\n};\n\nexport const QuizAnswerReview = ({ answers }: QuizAnswerReviewProps) => {\n  return (\n    <div className=\"answer-review\">\n      <h3 className=\"font-fantasy\">Review</h3>\n      {answers.map((answer, index) => (\n        <div key={index} className=\"answer-item\">\n          <p className=\"question\">{answer.question}</p>\n          <p className=\"correct-answer\">Correct: {answer.correctAnswer}</p>\n          <p\n            className={`player-answer ${answer.playerAnswer === answer.correctAnswer ? 'correct' : 'incorrect'}`}\n          >\n            {answer.playerAnswer === answer.correctAnswer ? '✅' : '❌'} Your:{' '}\n            {answer.playerAnswer}\n          </p>\n        </div>\n      ))}\n    </div>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizAnswerReview.tsx","fileType":".tsx","chunk_index":0}}],["131",{"pageContent":"export const mockContent = `[\n  {\n    \"question\": \"In what in-game book series is Emhyr var Emreis detailed?\",\n    \"options\": [\"History of Gwent\", \"Redanian Intelligence\", \"The Great Wars\", \"Emperors of Nilfgaard\"],\n    \"correctAnswer\": \"Emperors of Nilfgaard\"\n  },\n  {\n    \"question\": \"Who teaches Geralt advanced combat in Kaer Morhen?\",\n    \"options\": [\"Eskel\", \"Vesemir\", \"Lambert\", \"Ciri\"],\n    \"correctAnswer\": \"Vesemir\"\n  },\n  {\n    \"question\": \"Which character is known as 'The White Flame'?\",\n    \"options\": [\"Radovid\", \"Eredin\", \"Emhyr var Emreis\", \"Ciri\"],\n    \"correctAnswer\": \"Emhyr var Emreis\"\n  },\n  {\n    \"question\": \"What is Geralt's profession?\",\n    \"options\": [\"Knight\", \"Monster Hunter\", \"Sorcerer\", \"Assassin\"],\n    \"correctAnswer\": \"Monster Hunter\"\n  },\n  {\n    \"question\": \"What item allows Geralt to see in the dark?\",\n    \"options\": [\"Magic Lamp\", \"Witcher Sense\", \"Cat Potion\", \"Night Vision Goggles\"],\n    \"correctAnswer\": \"Cat Potion\"\n  },\n  {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.consts.ts","fileType":".ts","chunk_index":0}}],["132",{"pageContent":"    \"options\": [\"Magic Lamp\", \"Witcher Sense\", \"Cat Potion\", \"Night Vision Goggles\"],\n    \"correctAnswer\": \"Cat Potion\"\n  },\n  {\n    \"question\": \"At what age do Witchers undergo the Trial of Grasses?\",\n    \"options\": [\"21\", \"16\", \"12\", \"10\"],\n    \"correctAnswer\": \"10\"\n  },\n  {\n    \"question\": \"What is the primary currency in the game?\",\n    \"options\": [\"Golds\", \"Orens\", \"Crowns\", \"Ducats\"],\n    \"correctAnswer\": \"Crowns\"\n  },\n  {\n    \"question\": \"What does the 'Igni' sign do?\",\n    \"options\": [\"Heals\", \"Protects\", \"Produces fire\", \"Teleports\"],\n    \"correctAnswer\": \"Produces fire\"\n  },\n  {\n    \"question\": \"Which is NOT a higher vampire's notable trait in games?\",\n    \"options\": [\"Ability to control minds\", \"Shapeshifting\", \"Immunity to sunlight\", \"Toxic breath\"],\n    \"correctAnswer\": \"Toxic breath\"\n  },\n  {\n    \"question\": \"What secret society does Sigi Reuven alias belong to?\",","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.consts.ts","fileType":".ts","chunk_index":1}}],["133",{"pageContent":"    \"correctAnswer\": \"Toxic breath\"\n  },\n  {\n    \"question\": \"What secret society does Sigi Reuven alias belong to?\",\n    \"options\": [\"Order of the Flaming Rose\", \"The Lodge of Sorceresses\", \"The Wild Hunt\", \"Big Four of Novigrad\"],\n    \"correctAnswer\": \"Big Four of Novigrad\"\n  }\n]`;\n\nexport const BASE_PRICE_OPTIONS = [\n  { label: 'Nobie', value: 0.00001, description: 'A super light trial' },\n  { label: 'Acolyte', value: 0.0001, description: 'A light trial' },\n  { label: 'Adept', value: 0.001, description: 'A worthy challenge' },\n  { label: 'Master', value: 0.01, description: 'A trial of legends' },\n];\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.consts.ts","fileType":".ts","chunk_index":2}}],["134",{"pageContent":"/**\n * @param topic Тема викторины, например \"The History of Ancient Rome\".\n * @param persona Роль эксперта, например \"a seasoned historian specializing in the Roman Empire\".\n * @param difficultyLevels Массив из 10 чисел (0-100), определяющий сложность каждого вопроса.\n */\nexport const getUniversalQuizPromptEn = (\n  topic: string,\n  persona: string,\n  difficultyLevels: number[]\n) => `\nYou are ${persona}. Your main task is to create a high-quality quiz of 10 unique questions about the topic: \"${topic}\".\n\nThe difficulty of each question is determined on a scale from 0 to 100, where 0 is a very simple, foundational question, and 100 is an extremely difficult question requiring deep, expert-level knowledge of the lore of \"${topic}\".\n\nThe difficulty levels for the 10 questions are provided in the following sequence: ${difficultyLevels.join(',')}. You MUST strictly adhere to this sequence.\n\n---\nRESPONSE FORMAT REQUIREMENTS:","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.prompt.ts","fileType":".ts","chunk_index":0}}],["135",{"pageContent":"The difficulty levels for the 10 questions are provided in the following sequence: ${difficultyLevels.join(',')}. You MUST strictly adhere to this sequence.\n\n---\nRESPONSE FORMAT REQUIREMENTS:\nYou MUST return ONLY a single, valid JSON array. The array must contain exactly 10 objects.\nEach object in the array represents a single question and MUST have the following keys:\n- \"question\" (string): The text of the question itself.\n- \"options\" (array of 4 strings): An array containing exactly four possible answers. One of these options MUST be the correct answer.\n- \"correctAnswer\" (string): The correct answer. The value of this key MUST be an exact, case-sensitive match to one of the four strings in the \"options\" array.\n- Quiestion must be max - 100-120 symbols\n\n---\nEXAMPLE OF THE FINAL JSON STRUCTURE:\nBelow is an example for the topic \"The Witcher\" to illustrate the required format. DO NOT use this topic for your response; use \"${topic}\".\n\n[\n  {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.prompt.ts","fileType":".ts","chunk_index":1}}],["136",{"pageContent":"Below is an example for the topic \"The Witcher\" to illustrate the required format. DO NOT use this topic for your response; use \"${topic}\".\n\n[\n  {\n    \"question\": \"What is the name of Geralt of Rivia's primary horse?\",\n    \"options\": [\"Kelpie\", \"Pegasus\", \"Roach\", \"Shadowfax\"],\n    \"correctAnswer\": \"Roach\"\n  },\n  {\n    \"question\": \"Which sorceress was the original founder and leader of the Lodge of Sorceresses?\",\n    \"options\": [\"Yennefer of Vengerberg\", \"Triss Merigold\", \"Fringilla Vigo\", \"Philippa Eilhart\"],\n    \"correctAnswer\": \"Philippa Eilhart\"\n  }\n]\n\nYour entire response MUST start with [ and end with ]. Do not include any other text, comments, or markdown formatting like \\`\\`\\`json.\n`;\n\n/**\n * @param topic Тема викторины, например \"История Древнего Рима\".\n * @param persona Роль эксперта, например \"опытный историк, специализирующийся на Римской Империи\".\n * @param difficultyLevels Массив из 10 чисел (0-100), определяющий сложность каждого вопроса.\n */","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.prompt.ts","fileType":".ts","chunk_index":2}}],["137",{"pageContent":" * @param topic Тема викторины, например \"История Древнего Рима\".\n * @param persona Роль эксперта, например \"опытный историк, специализирующийся на Римской Империи\".\n * @param difficultyLevels Массив из 10 чисел (0-100), определяющий сложность каждого вопроса.\n */\nexport const getUniversalQuizPromptRu = (\n  topic: string,\n  persona: string,\n  difficultyLevels: number[]\n) => `\nВы — ${persona}. Ваша главная задача — создать качественную викторину из 10 уникальных вопросов на тему: \"${topic}\".\n\nСложность каждого вопроса определяется по шкале от 0 до 100, где 0 — это очень простой, базовый вопрос, а 100 — чрезвычайно сложный вопрос, требующий глубоких, экспертных знаний по теме \"${topic}\".\n\nУровни сложности для 10 вопросов заданы в следующей последовательности: ${difficultyLevels.join(',')}. Вы ДОЛЖНЫ строго придерживаться этой последовательности.\n\n---\nТРЕБОВАНИЯ К ФОРМАТУ ОТВЕТА:\nВы ДОЛЖНЫ вернуть ТОЛЬКО один валидный JSON-массив. Массив должен содержать ровно 10 объектов.","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.prompt.ts","fileType":".ts","chunk_index":3}}],["138",{"pageContent":"\n---\nТРЕБОВАНИЯ К ФОРМАТУ ОТВЕТА:\nВы ДОЛЖНЫ вернуть ТОЛЬКО один валидный JSON-массив. Массив должен содержать ровно 10 объектов.\nКаждый объект в массиве представляет один вопрос и ОБЯЗАТЕЛЬНО должен иметь следующие ключи:\n- \"question\" (string): Текст самого вопроса.\n- \"options\" (array of 4 strings): Массив, содержащий ровно четыре варианта ответа. Один из этих вариантов ОБЯЗАТЕЛЬНО должен быть правильным.\n- \"correctAnswer\" (string): Правильный ответ. Значение этого ключа ДОЛЖНО ТОЧНО СОВПАДАТЬ (с учетом регистра) с одной из четырех строк в массиве \"options\".\n- Вопрос должен быть максимум 100-120 символов\n\n---\nПРИМЕР ИТОГОВОЙ СТРУКТУРЫ JSON:\nНиже приведен пример для темы \"Ведьмак\", чтобы проиллюстрировать требуемый формат. НЕ используйте эту тему для вашего ответа; используйте тему \"${topic}\".\n\n[\n  {\n    \"question\": \"Как зовут основную лошадь Геральта из Ривии?\",\n    \"options\": [\"Келпи\", \"Пегас\", \"Плотва\", \"Сполох\"],\n    \"correctAnswer\": \"Плотва\"\n  },\n  {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.prompt.ts","fileType":".ts","chunk_index":4}}],["139",{"pageContent":"    \"options\": [\"Келпи\", \"Пегас\", \"Плотва\", \"Сполох\"],\n    \"correctAnswer\": \"Плотва\"\n  },\n  {\n    \"question\": \"Какая чародейка была основательницей и первой главой Ложи Чародеек?\",\n    \"options\": [\"Йеннифэр из Венгерберга\", \"Трисс Меригольд\", \"Фрингилья Виго\", \"Филиппа Эйльхарт\"],\n    \"correctAnswer\": \"Филиппа Эйльхарт\"\n  }\n]\n\nВаш ответ ДОЛЖЕН начинаться с [ и заканчиваться ]. Не включайте в ответ никакой другой текст, комментарии или markdown-форматирование вроде \\`\\`\\`json.\n`;\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.prompt.ts","fileType":".ts","chunk_index":5}}],["140",{"pageContent":"import React, { useState } from 'react';\n\nexport const GameRules = ({ stake }: { stake: string | null }) => {\n  const [showRules, setShowRules] = useState(false);\n\n  return (\n    <div>\n      <h4\n        className=\"font-fantasy rules-header\"\n        onClick={() => setShowRules(true)}\n      >\n        The Game's Rules - Read It. {stake ? `Your stake: ${stake}` : null}\n      </h4>\n      {showRules && (\n        <div className=\"modal-overlay\" onClick={() => setShowRules(false)}>\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n            <h4 className=\"font-fantasy\">The Oracle's Pact</h4>\n\n            <ul>\n              <li>\n                <span className=\"rule-icon\">🔮</span>\n                <span className=\"rule-text\">\n                  Provide a topic and choose your Base Price to generate a quiz.\n                </span>\n              </li>\n              <li>\n                <span className=\"rule-icon\">📜</span>\n                <span className=\"rule-text\">","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.rules.tsx","fileType":".tsx","chunk_index":0}}],["141",{"pageContent":"              </li>\n              <li>\n                <span className=\"rule-icon\">📜</span>\n                <span className=\"rule-text\">\n                  The cost of each question is calculated by the ancient\n                  formula: <br />\n                  <strong>\n                    Question Cost = Difficulty (1-100) × Base Price\n                  </strong>\n                </span>\n              </li>\n              <li>\n                <span className=\"rule-icon\">💰</span>\n                <span className=\"rule-text\">\n                  The total game stake is the sum of all 10 question costs.\n                </span>\n              </li>\n              {stake && (\n                <li>\n                  <span className=\"rule-icon\">🛡️</span>\n                  <span className=\"rule-text\">\n                    The total stake for this game is <strong>{stake}</strong>.\n                    This will be locked when you start.\n                  </span>\n                </li>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.rules.tsx","fileType":".tsx","chunk_index":1}}],["142",{"pageContent":"                    The total stake for this game is <strong>{stake}</strong>.\n                    This will be locked when you start.\n                  </span>\n                </li>\n              )}\n              <li>\n                <span className=\"rule-icon\">✍️</span>\n                <span className=\"rule-text\">\n                  Answer all questions. Your responses are sealed in a\n                  commitment.\n                </span>\n              </li>\n              <li>\n                <span className=\"rule-icon\">⏳</span>\n                <span className=\"rule-text\">\n                  After committing, the timed trial begins. Answer correctly to\n                  win.\n                </span>\n              </li>\n              <li>\n                <span className=\"rule-icon\">🏆</span>\n                <span className=\"rule-text\">\n                  Your reward depends on your score, with a potential for 1.5x\n                  the cost of each correct answer!\n                </span>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.rules.tsx","fileType":".tsx","chunk_index":2}}],["143",{"pageContent":"                <span className=\"rule-text\">\n                  Your reward depends on your score, with a potential for 1.5x\n                  the cost of each correct answer!\n                </span>\n              </li>\n              <li>\n                <span className=\"rule-icon\">✅</span>\n                <span className=\"rule-text\">\n                  You must sign a final transaction to claim your reward!\n                </span>\n              </li>\n            </ul>\n\n            <button onClick={() => setShowRules(false)}>I Understand</button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.rules.tsx","fileType":".tsx","chunk_index":3}}],["144",{"pageContent":"export const WidgetStyles = () => (\n  <style>{`\n    @import url('https://fonts.googleapis.com/css2?family=MedievalSharp&family=Lato:wght@400;700&display=swap');\n\n    .game-widget-container {\n      font-family: 'Lato', sans-serif;\n      color: #EAEAEA;\n      width: 100%;\n      height: calc(100vh - 190px); /* Учет хедера и футера */\n      display: flex;\n      gap: 24px;\n      padding: 24px;\n      /* Улучшенный градиент с добавлением больше цветов для динамичности */\n      background: linear-gradient(45deg, #111827, #581c87, #1f2937, #facc15, #111827);\n      background-size: 300% 300%;\n      animation: gradient 20s ease infinite;\n      position: relative;\n    }\n\n    @keyframes gradient {\n      0% { background-position: 0% 50%; }\n      50% { background-position: 100% 50%; }\n      100% { background-position: 0% 50%; }\n    }\n\n    .font-fantasy { \n      font-family: 'MedievalSharp', cursive; \n    }\n\n    .wallet-container {\n      display: flex;\n      justify-content: space-between;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":0}}],["145",{"pageContent":"\n    .wallet-container {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      width: 100%;\n    }\n\n    .no-copy { \n      user-select: none; \n      -webkit-user-select: none; \n      -moz-user-select: none; \n    }\n\n    .game-panel, .log-panel {\n      background: rgba(10, 20, 30, 0.7);\n      border: 1px solid #4a2c6e;\n      border-radius: 12px;\n      padding: 16px;\n      z-index: 2;\n      backdrop-filter: blur(8px);\n      box-shadow: 0 0 40px rgba(76, 29, 149, 0.3);\n      transition: all 0.3s ease; /* Добавлен переход */\n    }\n\n    .game-panel:hover, .log-panel:hover {\n      transform: scale(1.01);\n      box-shadow: 0 0 50px rgba(76, 29, 149, 0.5);\n    }\n\n    .game-panel { \n      flex: 3; \n      display: flex; \n      flex-direction: column; \n      align-items: center; \n      justify-content: center; \n      text-align: center; \n    }\n\n    .log-panel { \n      flex: 2; \n      display: flex; \n      flex-direction: column; \n      overflow: hidden; ","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":1}}],["146",{"pageContent":"      flex: 2; \n      display: flex; \n      flex-direction: column; \n      overflow: hidden; \n      margin-right: 48px;\n    }\n\n    .wallet-status {\n      background-color: #581c87;\n      color: #facc15;\n      padding: 10px;\n      border-radius: 8px;\n      margin-bottom: 16px;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .wallet-status span {\n      font-weight: bold;\n    }\n\n    .wallet-status button {\n      background-color: #581c87;\n      color: #facc15;\n      border: 2px solid #facc15;\n      padding: 8px 16px;\n      border-radius: 4px;\n      cursor: pointer;\n      font-family: 'MedievalSharp', cursive;\n      transition: all 0.3s ease;\n    }\n\n    .wallet-status button:hover {\n      background-color: #facc15;\n      color: #1e1b4b;\n    }\n\n    .log-rules {\n      margin-bottom: 16px;\n      flex-shrink: 0;\n      background-color: rgba(0, 0, 0, 0.3);\n      padding: 1rem;\n      border-radius: 0.375rem;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":2}}],["147",{"pageContent":"      flex-shrink: 0;\n      background-color: rgba(0, 0, 0, 0.3);\n      padding: 1rem;\n      border-radius: 0.375rem;\n      border: 1px solid rgba(23, 37, 84, 0.5);\n      max-height: 150px;\n      overflow-y: auto;\n    }\n\n    .log-entries-container { \n      flex-grow: 1; \n      overflow-y: auto; \n      padding-right: 10px; \n    }\n\n    .log-entry { \n      margin-bottom: 8px; \n      font-size: 0.9em; \n      line-height: 1.5; \n      padding: 8px;\n      background-color: rgba(255, 255, 255, 0.1);\n      border-left: 4px solid #facc15;\n      border-radius: 4px;\n    }\n\n    .log-time { \n      color: #888; \n      margin-right: 10px; \n    }\n\n    .btn {\n      font-family: 'MedievalSharp', cursive;\n      background-color: #581c87;\n      color: #facc15;\n      border: 2px solid #facc15;\n      padding: 12px 24px;\n      border-radius: 8px;\n      cursor: pointer;\n      font-size: 1.2em;\n      margin: 10px;\n      transition: all 0.3s ease;\n    }\n\n    .btn:hover { \n      background-color: #facc15; ","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":3}}],["148",{"pageContent":"    }\n\n    .btn:hover { \n      background-color: #facc15; \n      color: #1e1b4b; \n    }\n\n    .btn:disabled { \n      background-color: #374151; \n      color: #6b7280; \n      border-color: #6b7280; \n      cursor: not-allowed; \n    }\n\n    .btn-green { \n      background-color: #166534; \n      border-color: #86efac; \n      color: #dcfce7; \n    }\n\n    .btn-green:hover { \n      background-color: #86efac; \n      color: #14532d; \n    }\n\n    .verical-game-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n\n    .input-theme {\n      border-radius: 8px;\n      border: 2px solid #facc15;\n      padding: 16px;\n      background-color: rgba(156, 163, 175, 0.5);\n      color: #EAEAEA;\n      text-align: center;\n      font-size: 1.125rem;\n      transition: all 0.3s ease;\n      margin: 10px;\n      width: 100%;\n    }\n\n    .input-theme:focus {\n      outline: none;\n      ring: 2px solid #facc15;\n      background-color: rgba(156, 163, 175, 0.7);\n    }\n\n    .loader {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":4}}],["149",{"pageContent":"      background-color: rgba(156, 163, 175, 0.7);\n    }\n\n    .loader {\n      border: 8px solid #f3f3f340;\n      border-top: 8px solid #a78bfa;\n      border-radius: 50%;\n      width: 60px;\n      height: 60px;\n      animation: spin 1s linear infinite;\n      margin: 20px auto;\n    }\n\n    @keyframes spin { \n      0% { transform: rotate(0deg); } \n      100% { transform: rotate(360deg); } \n    }\n\n    .timer { \n      font-size: 2.5em; \n      color: #facc15; \n      margin: 20px 0; \n      font-weight: bold; \n    }\n\n    .options-grid { \n      display: grid; \n      grid-template-columns: 1fr 1fr; \n      gap: 15px; \n      margin-top: 20px; \n      width: 100%; \n      max-width: 700px; \n    }\n\n    .options-grid .btn { \n      width: 100%; \n      height: 100%; \n      min-height: 60px; \n      font-size: 1em; \n      padding: 16px; \n    }\n\n    .modal-overlay {\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":5}}],["150",{"pageContent":"      left: 0;\n      width: 100%;\n      height: 100%;\n      background-color: rgba(0, 0, 0, 0.5);\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      z-index: 100;\n    }\n\n    .modal-content {\n      background-color: #111827;\n      color: #EAEAEA;\n      padding: 24px;\n      margin: 0px 20px;\n      border-radius: 12px;\n      border: 2px solid #581c87;\n      max-width: 400px;\n      max-height: 400px;\n      width: 100%;\n      position: relative;\n      box-shadow: 0 0 60px rgba(88, 28, 135, 0.5);\n      overflow-y: auto;\n    }\n\n    .modal-content h4 {\n      margin-top: 0;\n      margin-bottom: 24px;\n      padding-bottom: 12px;\n      border-bottom: 2px solid #581c87;\n      text-align: center;\n      font-size: 1.8em;\n    }\n\n    .modal-content ul {\n      list-style: none;\n      padding: 0;\n      margin: 0;\n    }\n\n    .modal-content li {\n      display: flex;\n      align-items: flex-start;\n      margin-bottom: 18px;\n      line-height: 1.6;\n    }\n\n    .rule-icon {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":6}}],["151",{"pageContent":"      line-height: 1.6;\n    }\n\n    .rule-icon {\n      font-size: 1.5rem;\n      margin-right: 16px;\n      line-height: 1.6\n    }\n\n    .rule-text {\n      flex: 1;\n    }\n\n    .modal-content strong {\n      color: #facc15;\n      font-weight: 700;\n    }\n\n    .modal-content button {\n      display: block;\n      margin: 32px auto 0;\n      background-color: #581c87;\n      color: #facc15;\n      border: 2px solid #facc15;\n      padding: 10px 30px;\n      border-radius: 8px;\n      cursor: pointer;\n      font-family: 'MedievalSharp', cursive;\n      font-size: 1.2em;\n      transition: all 0.3s ease;\n    }\n\n    .modal-content button:hover {\n      background-color: #facc15;\n      color: #1e1b4b;\n    }\n\n    .rules-header {\n      cursor: pointer;\n      color: #facc15;\n      text-align: center;\n      border: 2px solid #342abc;\n      border-radius: 8px;\n      padding: 10px;\n    }\n\n    .answer-review {\n      background: rgba(10, 20, 30, 0.7);\n      border: 1px solid #4a2c6e;\n      border-radius: 12px;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":7}}],["152",{"pageContent":"    .answer-review {\n      background: rgba(10, 20, 30, 0.7);\n      border: 1px solid #4a2c6e;\n      border-radius: 12px;\n      padding: 16px;\n      margin-top: 20px;\n      box-shadow: 0 0 40px rgba(76, 29, 149, 0.3);\n      max-height: 200px;\n      overflow-y: auto;\n    }\n\n    .answer-item {\n      margin-bottom: 16px;\n      padding: 10px;\n      background-color: rgba(255, 255, 255, 0.1);\n      border-left: 4px solid #facc15;\n      border-radius: 4px;\n    }\n\n    .question {\n      font-weight: bold;\n      margin-bottom: 8px;\n    }\n\n    .correct-answer {\n      color: #86efac;\n      margin-bottom: 4px;\n    }\n\n    .player-answer {\n      margin-bottom: 4px;\n    }\n\n    .player-answer.correct {\n      color: #86efac;\n    }\n\n    .player-answer.incorrect {\n      color: #f87171;\n    }\n\n    .price-options-container {\n      display: flex;\n      justify-content: center;\n      gap: 20px;\n      margin: 20px 0;\n      width: 100%;\n    }\n\n    .price-option {\n      flex-direction: column;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":8}}],["153",{"pageContent":"    }\n\n    .price-option {\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n      border-width: 3px;\n      font-size: 1em;\n      text-align: center;\n      flex: 1;\n      max-width: 180px;\n      min-height: 100px;\n      padding: 16px;\n      transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);\n    }\n\n    .price-option .price-label {\n      font-size: 1.5em; \n      font-weight: bold;\n      color: #facc15; \n      margin-bottom: 8px;\n      line-height: 1.2;\n    }\n\n    .price-option .price-value {\n      font-size: 1.1em; /* Тоже сделаем покрупнее */\n      font-family: 'Lato', sans-serif; /* Используем более \"числовой\" шрифт */\n      color: #e5e7eb;\n    }\n\n    .price-option.active {\n      background-color: #facc15;\n      color: #1e1b4b;\n      transform: translateY(-5px) scale(1.05); /* Более выраженный эффект \"приподнятия\" */\n      box-shadow: 0 10px 20px rgba(250, 204, 21, 0.3);\n    }\n\n    .price-option.active .price-label,","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":9}}],["154",{"pageContent":"      box-shadow: 0 10px 20px rgba(250, 204, 21, 0.3);\n    }\n\n    .price-option.active .price-label,\n    .price-option.active .price-value {\n      color: #1e1b4b;\n    }\n  \n  `}</style>\n);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.styles.tsx","fileType":".tsx","chunk_index":10}}],["155",{"pageContent":"import React, { useCallback, useEffect, useState } from 'react';\nimport {\n  getContractBalance,\n  requestToOpenRouter,\n  useWeb3State,\n} from '@/shared';\nimport { getUniversalQuizPromptEn } from './QuizGenerator.prompt';\nimport OptimizedQuizGameABI from '../../../artifacts/contracts/OptimizedQuizGame.sol/OptimizedQuizGame.json';\nimport { useNavigate } from 'react-router';\nimport { WidgetStyles } from './QuizGenerator.styles';\nimport { GameRules } from './QuizGenerator.rules';\nimport { v4 as uuidv4 } from 'uuid';\nimport { keccak256 } from 'js-sha3';\nimport { ethers } from 'ethers';\nimport { AnswerReview, QuizAnswerReview } from './QuizAnswerReview';\nimport { BASE_PRICE_OPTIONS } from './QuizGenerator.consts';\n\ntype LLMGameData = {\n  question: string;\n  options: string[];\n  correctAnswer: string;\n};\n\ntype UserQuestionData = {\n  id: string;\n  question: string;\n  answerHash: string;\n};\n\ntype QuestionData = {\n  index: number;\n  id: string;\n  question: string;\n  options: string[];","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":0}}],["156",{"pageContent":"  index: number;\n  id: string;\n  question: string;\n  options: string[];\n  correctAnswerHash: string;\n  difficulty: number;\n  cost: number;\n};\n\ntype GameData = {\n  id: number;\n  questions: QuestionData[];\n  fullCost: number;\n};\n\nconst CONTRACT_ADDRESS = process.env.CONTRACT_QUIZ_ADDRESS ?? '';\n\ntype GameState =\n  | 'IDLE'\n  | 'CUSTOMIZING'\n  | 'GENERATING_QUIZ'\n  | 'QUIZ_READY'\n  | 'AWAITING_COMMIT'\n  | 'GAME_IN_PROGRESS'\n  | 'GAME_WAIT_NEXT_QUESTION'\n  | 'GAME_FINISHED'\n  | 'AWAITING_REVEAL'\n  | 'GAME_OVER';\n\nconst countTimer = (quizPack: GameData, index: number) => {\n  return Math.max(15, Math.floor(quizPack.questions[index].difficulty / 2));\n};\n\nconst winKoef = 1.5;\n\nexport const GameWidget = () => {\n  const [gameState, setGameState] = useState<GameState>('IDLE');\n  const [quizPack, setQuizPack] = useState<GameData | null>();\n  const [userQuestionData, setUserQuestionData] = useState<UserQuestionData[]>(\n    []\n  );\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":1}}],["157",{"pageContent":"  const [userQuestionData, setUserQuestionData] = useState<UserQuestionData[]>(\n    []\n  );\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<\n    number | null\n  >(null);\n  const [topic, setTopic] = useState('The Witcher 3 Wild Hunt');\n  const [timer, setTimer] = useState<number>(0);\n  const [answersForReview, setAnswersForReview] = useState<AnswerReview[]>([]);\n  const [basePrice, setBasePrice] = useState<number>(\n    BASE_PRICE_OPTIONS[0].value\n  );\n\n  const navigate = useNavigate();\n\n  const {\n    log,\n    connect,\n    contract,\n    account,\n    isOwner,\n    logs,\n    disconnect,\n    provider,\n  } = useWeb3State(CONTRACT_ADDRESS, OptimizedQuizGameABI.abi);\n\n  const handleGenerateQuiz = useCallback(async () => {\n    setGameState('GENERATING_QUIZ');\n    log('🔮 Generating 10 questions based on your topic...');\n    try {\n      const levels = Array.from({ length: 10 }, () =>\n        Math.round(Math.random() * 100)\n      );","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":2}}],["158",{"pageContent":"    try {\n      const levels = Array.from({ length: 10 }, () =>\n        Math.round(Math.random() * 100)\n      );\n      const prompt = getUniversalQuizPromptEn(topic, 'human', levels);\n      const content = await requestToOpenRouter(prompt);\n\n      const pack: LLMGameData[] = JSON.parse(content);\n      const questions: QuestionData[] = pack.map(\n        (question: LLMGameData, index: number) => ({\n          index,\n          id: uuidv4(),\n          question: question.question,\n          correctAnswerHash: keccak256(question.correctAnswer),\n          options: question.options,\n          difficulty: levels[index],\n          cost: levels[index] * basePrice,\n        })\n      );\n\n      const game: GameData = {\n        id: Date.now(),\n        questions: questions,\n        fullCost: questions.reduce((prev, curr) => prev + curr.cost, 0),\n      };\n\n      setQuizPack(game);\n      setGameState('QUIZ_READY');\n      log(\n        `✅ Quiz ready! Please answer the questions to form your commitment.`","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":3}}],["159",{"pageContent":"      setQuizPack(game);\n      setGameState('QUIZ_READY');\n      log(\n        `✅ Quiz ready! Please answer the questions to form your commitment.`\n      );\n    } catch (error: any) {\n      log(`❗ Error generating quiz: ${error.message}`);\n      setGameState('CUSTOMIZING');\n    }\n  }, [log, topic, basePrice]);\n\n  const handleStartGame = useCallback(async () => {\n    if (!contract || !quizPack) return log('Contract or quiz not ready.');\n\n    setGameState('AWAITING_COMMIT');\n    log(`Calculating your commitment...`);\n\n    try {\n      log(`Your Game ID: ${quizPack.id}...`);\n      log(\n        `Total stake: ${quizPack.fullCost.toFixed(6)} STT. Please confirm transaction.`\n      );\n\n      const fullCostWei = ethers.utils.parseEther(quizPack.fullCost.toString());\n      const tx = await contract.startGame(\n        ethers.BigNumber.from(quizPack.id),\n        fullCostWei,\n        { value: fullCostWei }\n      );\n\n      await tx.wait();\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":4}}],["160",{"pageContent":"      );\n\n      await tx.wait();\n\n      log('✅ Commitment successful! The timed trial begins NOW!');\n\n      setTimer(countTimer(quizPack, 0));\n      setCurrentQuestionIndex(0);\n      setGameState('GAME_IN_PROGRESS');\n    } catch (error: any) {\n      log(`❗ Error committing to game: ${error.message}`);\n      setGameState('QUIZ_READY');\n    }\n  }, [contract, log, quizPack, countTimer]);\n\n  const handleNextQuestion = useCallback(() => {\n    if (!quizPack || currentQuestionIndex === null) {\n      throw 'No quiz pack or game not started';\n    }\n\n    setTimer(countTimer(quizPack, currentQuestionIndex + 1));\n    setCurrentQuestionIndex(currentQuestionIndex + 1);\n    setGameState('GAME_IN_PROGRESS');\n  }, [quizPack, currentQuestionIndex, log, countTimer]);\n\n  const handleAnswerSelect = useCallback(\n    (answer: string) => {\n      if (!quizPack || currentQuestionIndex === null) {\n        throw 'No quiz pack or game not started';\n      }\n\n      const answerHash = keccak256(answer);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":5}}],["161",{"pageContent":"      }\n\n      const answerHash = keccak256(answer);\n\n      const userAnswer: UserQuestionData = {\n        answerHash,\n        id: quizPack.questions[currentQuestionIndex].id,\n        question: quizPack.questions[currentQuestionIndex].question,\n      };\n      setUserQuestionData((prev) => [...prev, userAnswer]);\n      setGameState('GAME_WAIT_NEXT_QUESTION');\n      setTimer(0);\n\n      log(`You selected: \"${answer}\"`);\n\n      if (currentQuestionIndex >= quizPack.questions.length - 1) {\n        setGameState('GAME_FINISHED');\n        log(\n          \"🏁 You have answered all questions! Press 'Finish Game' to claim your result.\"\n        );\n      }\n    },\n    [currentQuestionIndex, quizPack]\n  );\n\n  const handleEndGame = useCallback(async () => {\n    if (!contract || !quizPack?.id) return log('No active game found.');\n\n    setGameState('AWAITING_REVEAL');\n    log('Revealing your answers to the Oracle... Please confirm transaction.');\n\n    try {\n      let finalPrize = 0;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":6}}],["162",{"pageContent":"    log('Revealing your answers to the Oracle... Please confirm transaction.');\n\n    try {\n      let finalPrize = 0;\n      const quizAnswerReiew: AnswerReview[] = [];\n      userQuestionData.forEach((it, index) => {\n        const question = quizPack.questions[index];\n        const correctAnswer = question.options.find(\n          (option) => keccak256(option) === question.correctAnswerHash\n        );\n        const answerFromUser = question.options.find(\n          (option) => keccak256(option) === it.answerHash\n        );\n        quizAnswerReiew.push({\n          question: question.question,\n          correctAnswer: correctAnswer ?? 'Answer not exist',\n          playerAnswer: answerFromUser ?? 'Answer not exist',\n        });\n        if (\n          it.id === question.id &&\n          it.answerHash === question.correctAnswerHash\n        ) {\n          finalPrize += question.cost * winKoef;\n        }\n      });\n      setAnswersForReview(quizAnswerReiew);","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":7}}],["163",{"pageContent":"          finalPrize += question.cost * winKoef;\n        }\n      });\n      setAnswersForReview(quizAnswerReiew);\n      const finalPrizeWei = ethers.utils.parseEther(finalPrize.toString());\n      log(`You will get your final result: ${finalPrize.toFixed(6)} STT`);\n      const tx = await contract.endGame(\n        ethers.BigNumber.from(quizPack.id),\n        finalPrizeWei\n      );\n      await tx.wait();\n\n      log(`⚔️ Your trial is complete! The Oracle has judged your performance.`);\n      setGameState('GAME_OVER');\n    } catch (error: any) {\n      log(`❗ Error revealing answers: ${error.message}`);\n      setGameState('GAME_FINISHED');\n    }\n  }, [contract, log, quizPack, userQuestionData]);\n\n  useEffect(() => {\n    if (timer > 0 && gameState === 'GAME_IN_PROGRESS') {\n      const interval = setInterval(() => setTimer((prev) => prev - 1), 1000);\n      return () => clearInterval(interval);\n    }\n\n    if (timer === 0 && gameState === 'GAME_IN_PROGRESS') {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":8}}],["164",{"pageContent":"      return () => clearInterval(interval);\n    }\n\n    if (timer === 0 && gameState === 'GAME_IN_PROGRESS') {\n      log('⏳ Time is over. Answer written as incorrect, sorry.');\n      handleAnswerSelect('Player answer incorrect');\n    }\n  }, [timer, handleAnswerSelect]);\n\n  const resetGame = useCallback(() => {\n    setGameState('CUSTOMIZING');\n    setQuizPack(null);\n    setCurrentQuestionIndex(null);\n    setUserQuestionData([]);\n    setTimer(0);\n    setAnswersForReview([]);\n    log('A new trial awaits...');\n  }, [log]);\n\n  const handleWithdraw = useCallback(async () => {\n    if (!contract || !isOwner) {\n      log('This is only for owner.');\n      return;\n    }\n    log('💰 Owner take all rewards...');\n    try {\n      const address = process.env.CONTRACT_QUIZ_ADDRESS ?? '';\n      const balance = await getContractBalance(address);\n      const needToWithdraw = ethers.utils.parseEther(balance);\n      const tx = await contract.withdraw(needToWithdraw);\n      await tx.wait();","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":9}}],["165",{"pageContent":"      const balance = await getContractBalance(address);\n      const needToWithdraw = ethers.utils.parseEther(balance);\n      const tx = await contract.withdraw(needToWithdraw);\n      await tx.wait();\n      log('✅ Tokens succesfully move to onwer address.');\n    } catch (error: any) {\n      log(`❗ Error of tokens moving: ${error.message}`);\n    }\n  }, [contract, isOwner]);\n\n  const finalizeInactiveGames = useCallback(async () => {\n    if (!contract || !isOwner) {\n      log('This is only for owner.');\n      return;\n    }\n    log('💰 Owner finalize expired games and send all loans to contrsct...');\n    try {\n      const tx = await contract.endExpiredGames();\n      await tx.wait();\n      log('✅ Tokens succesfully move to onwer address.');\n    } catch (error: any) {\n      log(`❗ Error of tokens moving: ${error.message}`);\n    }\n  }, [contract, isOwner]);\n\n  const renderGameContent = () => {\n    if (!account)\n      return (\n        <button className=\"btn\" onClick={connect}>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":10}}],["166",{"pageContent":"  const renderGameContent = () => {\n    if (!account)\n      return (\n        <button className=\"btn\" onClick={connect}>\n          Connect Wallet\n        </button>\n      );\n\n    switch (gameState) {\n      case 'CUSTOMIZING':\n        return (\n          <div className=\"verical-game-container\">\n            <h2 className=\"font-fantasy\">Challenge the Oracle</h2>\n            <input\n              type=\"text\"\n              value={topic}\n              onChange={(e) => setTopic(e.target.value)}\n              className=\"input-theme\"\n            />\n\n            <div className=\"price-options-container\">\n              {BASE_PRICE_OPTIONS.map((option) => (\n                <button\n                  key={option.value}\n                  className={`btn price-option ${basePrice === option.value ? 'active' : ''}`}\n                  onClick={() => setBasePrice(option.value)}\n                >\n                  <div className=\"price-label\">{option.label}</div>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":11}}],["167",{"pageContent":"                  className={`btn price-option ${basePrice === option.value ? 'active' : ''}`}\n                  onClick={() => setBasePrice(option.value)}\n                >\n                  <div className=\"price-label\">{option.label}</div>\n                  <div className=\"price-value\">{option.value} STT</div>\n                </button>\n              ))}\n            </div>\n\n            <button className=\"btn\" onClick={handleGenerateQuiz}>\n              Forge My Destiny\n            </button>\n          </div>\n        );\n      case 'GENERATING_QUIZ':\n        return (\n          <div className=\"verical-game-container\">\n            <div className=\"loader\"></div>\n            <p>\n              The great spirits of quizzes are preparing incredible questions\n              for you...\n            </p>\n          </div>\n        );\n      case 'QUIZ_READY':\n        return (\n          <div className=\"verical-game-container\">\n            <h2 className=\"font-fantasy\">Prepare Your Answers</h2>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":12}}],["168",{"pageContent":"      case 'QUIZ_READY':\n        return (\n          <div className=\"verical-game-container\">\n            <h2 className=\"font-fantasy\">Prepare Your Answers</h2>\n            <p>Answer these to form your commitment. No timer yet.</p>\n            <button className=\"btn btn-green\" onClick={handleStartGame}>\n              Lock Answers & Start Game\n            </button>\n          </div>\n        );\n      case 'AWAITING_COMMIT':\n      case 'AWAITING_REVEAL':\n        return (\n          <div className=\"verical-game-container\">\n            <div className=\"loader\"></div>\n            <p>Awaiting confirmation in your wallet...</p>\n          </div>\n        );\n      case 'GAME_IN_PROGRESS':\n        const q = quizPack?.questions[currentQuestionIndex ?? 0];\n        return (\n          <div\n            className=\"no-copy verical-game-container\"\n            onContextMenu={(e) => e.preventDefault()}\n          >\n            <div className=\"timer\">{timer}s</div>\n            <div","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":13}}],["169",{"pageContent":"            onContextMenu={(e) => e.preventDefault()}\n          >\n            <div className=\"timer\">{timer}s</div>\n            <div\n              className=\"font-fantasy\"\n              style={{ fontSize: '32px', textAlign: 'center' }}\n            >\n              {q?.question}\n            </div>\n            <div className=\"options-grid\">\n              {q?.options.map((opt) => (\n                <button\n                  key={opt}\n                  className=\"btn\"\n                  onClick={() => handleAnswerSelect(opt)}\n                >\n                  {opt}\n                </button>\n              ))}\n            </div>\n          </div>\n        );\n      case 'GAME_WAIT_NEXT_QUESTION':\n        return (\n          <div className=\"verical-game-container\">\n            <button className=\"btn\" onClick={handleNextQuestion}>\n              Next question\n            </button>\n          </div>\n        );\n      case 'GAME_FINISHED':\n        return (","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":14}}],["170",{"pageContent":"          </div>\n        );\n      case 'GAME_FINISHED':\n        return (\n          <div className=\"verical-game-container\">\n            <h3>Your Quiz Complete!</h3>\n            <p>\n              Your answers have been recorded. Reveal them now to receive\n              judgment from the Oracle.\n            </p>\n            <button className=\"btn btn-green\" onClick={handleEndGame}>\n              Finish Game & Claim Result\n            </button>\n          </div>\n        );\n      case 'GAME_OVER':\n        return (\n          <div className=\"verical-game-container\">\n            <h3 className=\"font-fantasy\">The Trial is Over!</h3>\n            <div className=\"verical-game-container\">\n              <button className=\"btn\" onClick={resetGame}>\n                Play Again\n              </button>\n              <button className=\"btn\" onClick={() => navigate('/')}>\n                Exit to Main Page\n              </button>\n              {answersForReview.length !== 0 ? (","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":15}}],["171",{"pageContent":"              <button className=\"btn\" onClick={() => navigate('/')}>\n                Exit to Main Page\n              </button>\n              {answersForReview.length !== 0 ? (\n                <QuizAnswerReview answers={answersForReview} />\n              ) : null}\n            </div>\n          </div>\n        );\n      case 'IDLE':\n      default:\n        return (\n          <button className=\"btn\" onClick={() => setGameState('CUSTOMIZING')}>\n            Start\n          </button>\n        );\n    }\n  };\n\n  return (\n    <>\n      <WidgetStyles />\n      <div className=\"game-widget-container\">\n        <div className=\"game-panel\">\n          {isOwner ? (\n            <div className=\"verical-game-container\">\n              <button className=\"btn\" onClick={handleWithdraw}>\n                Withdraw contract treasures\n              </button>\n              <button className=\"btn\" onClick={finalizeInactiveGames}>\n                Finalize all inactive games\n              </button>\n            </div>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":16}}],["172",{"pageContent":"              <button className=\"btn\" onClick={finalizeInactiveGames}>\n                Finalize all inactive games\n              </button>\n            </div>\n          ) : null}\n          {renderGameContent()}\n        </div>\n        <div className=\"log-panel\">\n          {account ? (\n            <div className=\"wallet-status\">\n              <div className=\"wallet-container\">\n                <span>\n                  Connected: {account.slice(0, 6)}...{account.slice(-4)}\n                </span>\n                <button onClick={disconnect}>Disconnect</button>\n              </div>\n            </div>\n          ) : null}\n          <GameRules\n            stake={quizPack?.fullCost ? `${quizPack.fullCost} STT` : null}\n          />\n          <h3 className=\"font-fantasy\">Scroll of Events</h3>\n          <div className=\"log-entries-container\">\n            {logs.map((l, i) => (\n              <div key={i} className=\"log-entry\">\n                <span className=\"log-time\">[{l.time}]</span>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":17}}],["173",{"pageContent":"          <div className=\"log-entries-container\">\n            {logs.map((l, i) => (\n              <div key={i} className=\"log-entry\">\n                <span className=\"log-time\">[{l.time}]</span>\n                <span>{l.msg}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/QuizGenerator.tsx","fileType":".tsx","chunk_index":18}}],["174",{"pageContent":"export * from './QuizGenerator';\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/QuizGenerator/index.ts","fileType":".ts","chunk_index":0}}],["175",{"pageContent":"export const getQuizPackPrompt = (questionRanges: number[]) => `\n        Ты непревзойденный знаток Толкиена и тебе предстоит задача, создать набор из 10 уникальных вопросов по вселенной Lord of the Rings, основываясь на книжных произведениях, по всем книгам данной вселенной.\n        Уровень сложности вопроса определяется от 0 до 100, где 0 это простейший вопрос, который знает каждый, например: Кто такой Фродо? и варианты ответа: (Гном, эльф, человек, хоббит), а 100 это невероятно сложный вопрос, требующий задуматься и хорошенько покопаться в памяти, например: Какой из Валар, участвовавших в Музыке Айнур, был ответственен за формирование физической структуры Арды, включая горы и моря? и варинты ответа: (Манвэ, Ульмо, Аулэ, Ирмо)\n        Уровени сложности для каждого вопроса в виде последовательности чисел ${questionRanges.join(',')}.\n        \n        Ответ нужно ОБЯЗАТЕЛЬНО вернуть в виде JSON массива из 10 объектов следующей структуры:\n        [\n          {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.prompt.ts","fileType":".ts","chunk_index":0}}],["176",{"pageContent":"        \n        Ответ нужно ОБЯЗАТЕЛЬНО вернуть в виде JSON массива из 10 объектов следующей структуры:\n        [\n          {\n            \"question\": \"Как умер Боромир?\",\n            \"options\": [\"Упал в пропасть\", \"Сгорел в огне Роковой горы\", \"Пал в битве с предводителем орков\", \"Пал в битве при Минас-Тирите от рук Короля-колдуна\"],\n            \"correctAnswer\": \"Пал в битве с предводителем орков\",\n          },\n          ... и еще 9 объектов\n        ]\n        Нельзя возвращать ничего кроме валидного JSON массива!!!\n      `;\n\nexport const getQuizPackPromptEn = (questionRanges: number[]) => `\n        You are an unparalleled Tolkien expert. Your task is to create a set of 10 unique questions about the Lord of the Rings universe, based on Tolkien's entire literary saga.\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.prompt.ts","fileType":".ts","chunk_index":1}}],["177",{"pageContent":"export const getQuizPackPromptEn = (questionRanges: number[]) => `\n        You are an unparalleled Tolkien expert. Your task is to create a set of 10 unique questions about the Lord of the Rings universe, based on Tolkien's entire literary saga.\n\n        The difficulty of each question is determined on a scale from 0 to 100, where 0 is a simple question that almost anyone would know (e.g., \"Who is Frodo?\" with options: [\"Dwarf\", \"Elf\", \"Human\", \"Hobbit\"]), and 100 is an incredibly difficult question that requires deep lore knowledge (e.g., \"Which of the Valar who participated in the Music of the Ainur was responsible for shaping the physical structure of Arda, including its mountains and seas?\" with options: [\"Manwë\", \"Ulmo\", \"Aulë\", \"Irmo\"]).\n\n        The difficulty levels for each of the 10 questions are provided in the following sequence: ${questionRanges.join(',')}.\n        \n        You MUST return the response as a JSON array of 10 objects with the following structure:\n        [","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.prompt.ts","fileType":".ts","chunk_index":2}}],["178",{"pageContent":"        The difficulty levels for each of the 10 questions are provided in the following sequence: ${questionRanges.join(',')}.\n        \n        You MUST return the response as a JSON array of 10 objects with the following structure:\n        [\n          {\n            \"question\": \"How did Boromir die?\",\n            \"options\": [\"He fell into a chasm\", \"He was consumed by the fires of Mount Doom\", \"He fell in battle against an Uruk-hai leader\", \"He was slain in Minas Tirith by the Witch-king\"],\n            \"correctAnswer\": \"He fell in battle against an Uruk-hai leader\"\n          },\n          ... and 9 other objects\n        ]\n        Your entire response must be ONLY the valid JSON array, with no other text, comments, or explanations.\n      `;\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.prompt.ts","fileType":".ts","chunk_index":3}}],["179",{"pageContent":"export const quizStyles = `\n  @import url('https://fonts.googleapis.com/css2?family=MedievalSharp&display=swap');\n\n  .quiz-container {\n    font-family: 'MedievalSharp', cursive;\n    background-image: url('/textures/lotr-bg.jpg');\n    background-size: cover;\n    background-position: center;\n    min-height: calc(100vh - 220px);\n    color: #EAEAEA;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 20px;\n    position: relative;\n  }\n  .quiz-container::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: rgba(0, 0, 0, 0.7); /* Затемняющий слой */\n    z-index: 1;\n  }\n  .main-content {\n    display: flex;\n    gap: 20px;\n    width: 100%;\n    max-width: 1200px;\n    z-index: 2;\n  }\n  .game-panel {\n    flex: 3;\n    background: rgba(10, 20, 30, 0.85);\n    border: 2px solid #4a4a4a;\n    border-radius: 10px;\n    padding: 30px;\n    text-align: center;\n    box-shadow: 0 0 20px rgba(0,0,0,0.5);\n  }","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.styles.ts","fileType":".ts","chunk_index":0}}],["180",{"pageContent":"    padding: 30px;\n    text-align: center;\n    box-shadow: 0 0 20px rgba(0,0,0,0.5);\n  }\n  .log-panel {\n    flex: 2;\n    background: rgba(0, 0, 0, 0.8);\n    border: 1px solid #333;\n    border-radius: 5px;\n    padding: 20px;\n    height: calc(100vh - 220px);\n    overflow-y: hidden; \n    display: flex;\n    flex-direction: column;\n  }\n  .log-entries-container {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding-right: 10px;\n  }\n  .log-entry {\n    margin-bottom: 5px;\n    border-bottom: 1px solid #2a2a2a;\n    padding-bottom: 5px;\n  }\n  .log-time {\n    color: #888;\n    margin-right: 10px;\n  }\n  button {\n    font-family: 'MedievalSharp', cursive;\n    background-color: #3d3d3d;\n    color: #ffc107;\n    border: 2px solid #ffc107;\n    padding: 10px 20px;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 1.2em;\n    margin: 10px;\n    transition: all 0.3s ease;\n  }\n  button:hover {\n    background-color: #ffc107;\n    color: #1a1a1a;\n  }\n  button:disabled {\n    background-color: #222;","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.styles.ts","fileType":".ts","chunk_index":1}}],["181",{"pageContent":"    color: #1a1a1a;\n  }\n  button:disabled {\n    background-color: #222;\n    color: #555;\n    border-color: #555;\n    cursor: not-allowed;\n  }\n  .loader {\n    border: 8px solid #f3f3f340;\n    border-top: 8px solid #ffc107;\n    border-radius: 50%;\n    width: 60px;\n    height: 60px;\n    animation: spin 1s linear infinite;\n    margin: 20px auto;\n  }\n  @keyframes spin {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n  .timer {\n    font-size: 2em;\n    color: #ffc107;\n    margin: 20px 0;\n  }\n  .options-grid {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 15px;\n    margin-top: 20px;\n  }\n`;\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.styles.ts","fileType":".ts","chunk_index":2}}],["182",{"pageContent":"import React, { useCallback, useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { requestToOpenRouter, useWeb3State } from '@/shared';\nimport { getQuizPackPromptEn } from './Quiz.prompt';\nimport { quizStyles } from './Quiz.styles';\nimport { QuizRules } from './QuizRules';\nimport { useNavigate } from 'react-router';\nimport GameLifecycleABI from '../../../artifacts/contracts/GameLifecycle.sol/GameLifecycleNative.json';\n\nconst getStakeAmount = (questionRange: number) => {\n  const calculatedStake = Math.max(0.01, questionRange / 100);\n  return calculatedStake.toFixed(4);\n};\n\ntype QuestionData = {\n  question: string;\n  options: string[];\n  correctAnswer: string;\n  difficulty: number;\n};\ntype GameData = QuestionData & {\n  gameId: string;\n  dataHash: string;\n};\n\ntype QuestionLifecycleState =\n  | 'IDLE'\n  | 'GENERATING_QUIZ'\n  | 'QUIZ_READY'\n  | 'AWAITING_ANSWER'\n  | 'AWAITING_TX_CONFIRMATION'\n  | 'GAME_OVER';\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":0}}],["183",{"pageContent":"  | 'AWAITING_ANSWER'\n  | 'AWAITING_TX_CONFIRMATION'\n  | 'GAME_OVER';\n\nconst CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS ?? '';\n\nexport const Quiz = () => {\n  const [questionState, setQuestionState] =\n    useState<QuestionLifecycleState>('IDLE');\n  const [quizPack, setQuizPack] = useState<QuestionData[] | null>(null);\n  const [currentGame, setCurrentGame] = useState<GameData | null>(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState<number>(0);\n  const [timer, setTimer] = useState<number>(0);\n\n  const { log, connect, contract, account, isOwner, logs } = useWeb3State(\n    CONTRACT_ADDRESS,\n    GameLifecycleABI.abi\n  );\n  const navigate = useNavigate();\n\n  const handleGenerateQuiz = useCallback(async () => {\n    setQuestionState('GENERATING_QUIZ');\n    log('🔮 Generate options with 10 questions...');\n    try {\n      let questionRanges = [];\n      for (let i = 0; i < 10; i++) {\n        questionRanges.push(Math.round(Math.random() * 100));\n      }","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":1}}],["184",{"pageContent":"      let questionRanges = [];\n      for (let i = 0; i < 10; i++) {\n        questionRanges.push(Math.round(Math.random() * 100));\n      }\n      const prompt = getQuizPackPromptEn(questionRanges);\n      const content = await requestToOpenRouter(prompt);\n      if (!content)\n        throw new Error('LLM can`t create content and return nothing!');\n\n      const pack = JSON.parse(\n        content\n          .replace(/```json\\n?/, '')\n          .replace(/```\\n?/, '')\n          .trim()\n      );\n      if (!Array.isArray(pack) || pack.length === 0)\n        throw new Error('LLM return incorrect data');\n\n      questionRanges.forEach((it, index) => {\n        (pack[index] as QuestionData).difficulty = it;\n      });\n\n      setQuizPack(pack);\n      setCurrentQuestionIndex(0);\n      setQuestionState('QUIZ_READY');\n      log(`✅ Options from ${pack.length} questions ready to start!`);\n    } catch (error: any) {\n      log(`❗ Error quiz generated: ${error.message}`);\n      setQuestionState('IDLE');\n    }","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":2}}],["185",{"pageContent":"    } catch (error: any) {\n      log(`❗ Error quiz generated: ${error.message}`);\n      setQuestionState('IDLE');\n    }\n  }, [log]);\n\n  const handleStartOrNext = useCallback(async () => {\n    if (!quizPack || !contract) return;\n\n    setQuestionState('AWAITING_TX_CONFIRMATION');\n    const questionData = quizPack[currentQuestionIndex];\n    const stakeString = getStakeAmount(questionData.difficulty);\n    const stakeAmount = ethers.utils.parseEther(stakeString);\n\n    try {\n      log(\n        `🎲 Question ${currentQuestionIndex + 1}/${quizPack.length}. Fixing stake...`\n      );\n      log(`💰 Your stake: ${stakeString} STT. Sign transaction.`);\n\n      const gameId = uuidv4();\n      const dataHash = ethers.utils.solidityKeccak256(\n        ['bytes32', 'string', 'string'],\n        [\n          ethers.utils.id(gameId),\n          questionData.question,\n          questionData.correctAnswer,\n        ]\n      );\n\n      const tx = await contract.startGame(ethers.utils.id(gameId), dataHash, {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":3}}],["186",{"pageContent":"        ]\n      );\n\n      const tx = await contract.startGame(ethers.utils.id(gameId), dataHash, {\n        value: stakeAmount,\n      });\n      await tx.wait();\n\n      const newGameData: GameData = { ...questionData, gameId, dataHash };\n      setCurrentGame(newGameData);\n\n      const gameDuration = Math.max(10, Math.floor(newGameData.difficulty / 2));\n      setTimer(gameDuration);\n      setQuestionState('AWAITING_ANSWER');\n      log(\n        `✅ Game ${gameId.slice(0, 8)}... is going on. You have ${gameDuration} seconds.`\n      );\n    } catch (error: any) {\n      log(`❗ Error on the question begin: ${error.message}`);\n      setQuestionState('QUIZ_READY');\n    }\n  }, [contract, currentQuestionIndex, log, quizPack]);\n\n  const handleAnswer = useCallback(\n    async (selectedAnswer: string) => {\n      if (questionState !== 'AWAITING_ANSWER') return;\n      if (!contract || !currentGame || !quizPack) return;\n\n      setTimer(0);\n      setQuestionState('AWAITING_TX_CONFIRMATION');","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":4}}],["187",{"pageContent":"      if (!contract || !currentGame || !quizPack) return;\n\n      setTimer(0);\n      setQuestionState('AWAITING_TX_CONFIRMATION');\n      log(`You selected: \"${selectedAnswer}\". Waiting approve...`);\n\n      try {\n        const playerWasCorrect = selectedAnswer === currentGame.correctAnswer;\n        const stakeString = getStakeAmount(currentGame.difficulty);\n        const stakeAmount = ethers.utils.parseEther(stakeString);\n\n        const tx = await contract.endGame(\n          ethers.utils.id(currentGame.gameId),\n          currentGame.question,\n          currentGame.correctAnswer,\n          playerWasCorrect\n        );\n        await tx.wait();\n\n        if (playerWasCorrect) {\n          const rewardString = ethers.utils.formatEther(stakeAmount.mul(2));\n          log(`⚔️ Correct! You won ${rewardString} STT.`);\n        } else {\n          log(`🌑 Sorry! It is not correct(( You lose ${stakeString} STT.`);\n        }\n\n        setCurrentGame(null);","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":5}}],["188",{"pageContent":"          log(`🌑 Sorry! It is not correct(( You lose ${stakeString} STT.`);\n        }\n\n        setCurrentGame(null);\n        if (currentQuestionIndex >= quizPack.length - 1) {\n          log('🏁 Quiz complete! Thanks for game.');\n          setQuestionState('GAME_OVER');\n        } else {\n          setCurrentQuestionIndex((prev) => prev + 1);\n          setQuestionState('QUIZ_READY');\n        }\n      } catch (error: any) {\n        if (error.code === 4001) {\n          log(\n            '❌ You are canceled transaction. Game over. Your state stay in the contract bank.'\n          );\n          setQuestionState('GAME_OVER');\n        } else {\n          log(`❗ Error in the game ended: ${error.message}`);\n          setQuestionState('QUIZ_READY');\n        }\n      }\n    },\n    [contract, currentGame, log, questionState, quizPack, currentQuestionIndex]\n  );\n\n  const handleWithdraw = useCallback(async () => {\n    if (!contract || !isOwner) {\n      log('This is only for owner.');\n      return;\n    }","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":6}}],["189",{"pageContent":"    if (!contract || !isOwner) {\n      log('This is only for owner.');\n      return;\n    }\n    log('💰 Owner take all rewards...');\n    try {\n      const tx = await contract.withdrawStakes(account);\n      await tx.wait();\n      log('✅ Tokens succesfully move to onwer address.');\n    } catch (error: any) {\n      log(`❗ Error of tokens moving: ${error.message}`);\n    }\n  }, [contract, isOwner, account]);\n\n  const handleExitToMain = useCallback(() => {\n    log('↩️ Return to main scene.');\n    setQuestionState('IDLE');\n    setQuizPack(null);\n    setCurrentGame(null);\n    setCurrentQuestionIndex(0);\n    navigate('/');\n  }, [log]);\n\n  useEffect(() => {\n    if (timer > 0 && questionState === 'AWAITING_ANSWER') {\n      const interval = setInterval(() => setTimer((prev) => prev - 1), 1000);\n      return () => clearInterval(interval);\n    }\n\n    if (timer === 0 && questionState === 'AWAITING_ANSWER') {\n      log('⏳ Time is over. Answer written as incorrect, sorry.');","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":7}}],["190",{"pageContent":"    }\n\n    if (timer === 0 && questionState === 'AWAITING_ANSWER') {\n      log('⏳ Time is over. Answer written as incorrect, sorry.');\n      handleAnswer('TIMEOUT_INCORRECT_ANSWER_AUTO');\n    }\n  }, [timer, questionState, handleAnswer]);\n\n  const renderGameContent = () => {\n    if (!account) return <button onClick={connect}>Connect Wallet</button>;\n\n    switch (questionState) {\n      case 'GENERATING_QUIZ':\n        return (\n          <div>\n            <div className=\"loader\"></div>\n            <p>The spirits of the Ainur are forging questions for you...</p>\n          </div>\n        );\n\n      case 'QUIZ_READY':\n        const isFirstQuestion = currentQuestionIndex === 0;\n        const buttonText = isFirstQuestion\n          ? `Start Quiz (${quizPack?.length} questions)`\n          : 'Next';\n        return <button onClick={handleStartOrNext}>{buttonText}</button>;\n\n      case 'AWAITING_ANSWER':\n      case 'AWAITING_TX_CONFIRMATION':","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":8}}],["191",{"pageContent":"        return <button onClick={handleStartOrNext}>{buttonText}</button>;\n\n      case 'AWAITING_ANSWER':\n      case 'AWAITING_TX_CONFIRMATION':\n        const isWaitingForTx = questionState === 'AWAITING_TX_CONFIRMATION';\n        return (\n          <div>\n            <h2>\n              Question {currentQuestionIndex + 1}: {currentGame?.question}\n            </h2>\n            {isWaitingForTx ? (\n              <div>\n                <div className=\"loader\"></div>\n                <p>Awaiting confirmation in your wallet...</p>\n              </div>\n            ) : (\n              <p className=\"timer\">{timer}s</p>\n            )}\n            <div className=\"options-grid\">\n              {currentGame?.options.map((opt, idx) => (\n                <button\n                  key={idx}\n                  onClick={() => handleAnswer(opt)}\n                  disabled={isWaitingForTx}\n                >\n                  {opt}\n                </button>\n              ))}\n            </div>\n          </div>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":9}}],["192",{"pageContent":"                </button>\n              ))}\n            </div>\n          </div>\n        );\n      case 'GAME_OVER':\n        return (\n          <div>\n            <h3>Game Over!</h3>\n            <button onClick={handleGenerateQuiz}>Play Again</button>\n            <button onClick={handleExitToMain}>Exit to Main Page</button>\n          </div>\n        );\n      case 'IDLE':\n      default:\n        return <button onClick={handleGenerateQuiz}>Generate New Quiz</button>;\n    }\n  };\n\n  return (\n    <>\n      <style>{quizStyles}</style>\n      <div className=\"quiz-container\">\n        <div className=\"main-content\">\n          <div className=\"game-panel\">\n            <h1>The Chronicles of Middle-earth</h1>\n            <p>\n              Test your knowledge in a quiz about the Lord of the Rings\n              universe!\n            </p>\n            {renderGameContent()}\n            {isOwner && (\n              <button onClick={handleWithdraw}>Withdraw Treasures</button>\n            )}\n          </div>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":10}}],["193",{"pageContent":"            {isOwner && (\n              <button onClick={handleWithdraw}>Withdraw Treasures</button>\n            )}\n          </div>\n          <div className=\"log-panel\">\n            <QuizRules />\n            <h3>Scroll of Events:</h3>\n            <div className=\"log-entries-container\">\n              {logs.map((l, i) => (\n                <div key={i} className=\"log-entry\">\n                  <span className=\"log-time\">[{l.time}]</span>\n                  <span>{l.msg}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/Quiz.tsx","fileType":".tsx","chunk_index":11}}],["194",{"pageContent":"// GameRules.tsx\nimport React from 'react';\n\nconst rulesStyles = `\n  .rules-container {\n    background: rgba(0, 0, 0, 0.6);\n    border: 1px solid #4a4a4a;\n    border-radius: 5px;\n    padding: 15px;\n    margin-bottom: 20px;\n    font-family: 'Arial', sans-serif;\n    font-size: 0.95em;\n    color: #ccc;\n  }\n  .rules-container h4 {\n    font-family: 'MedievalSharp', cursive;\n    color: #ffc107;\n    margin-top: 0;\n    margin-bottom: 10px;\n    text-align: center;\n  }\n  .rules-list {\n    list-style-type: none;\n    padding-left: 0;\n    margin: 0;\n  }\n  .rules-list li {\n    margin-bottom: 8px;\n    padding-left: 8px;\n  }\n  .rules-list li::before {\n    content: \"•\";\n    color: #ffc107;\n    font-weight: bold;\n    display: inline-block; \n    width: 1em;\n    margin-left: -1em;\n  }\n`;\n\nexport const QuizRules = () => (\n  <>\n    <style>{rulesStyles}</style>\n    <div className=\"rules-container\">\n      <h4>The Rules of the Fellowship</h4>\n      <ul className=\"rules-list\">","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/QuizRules.tsx","fileType":".tsx","chunk_index":0}}],["195",{"pageContent":"    <style>{rulesStyles}</style>\n    <div className=\"rules-container\">\n      <h4>The Rules of the Fellowship</h4>\n      <ul className=\"rules-list\">\n        <li>Generate a quiz of 10 questions.</li>\n        <li>Your stake depends on the question's difficulty.</li>\n        <li>Answer correctly to win double your stake (x2).</li>\n        <li>An incorrect answer or timeout means your stake is lost.</li>\n        <li>Each transaction must be confirmed in your wallet.</li>\n      </ul>\n    </div>\n  </>\n);\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/Quiz/QuizRules.tsx","fileType":".tsx","chunk_index":1}}],["196",{"pageContent":"import React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport nftStakingAbi from '../../../artifacts/contracts/NFTStaking.sol/NFTStaking.json';\nimport { useWeb3State } from '@/shared';\n\nconst CONTRACT_NFT_STAKING = process.env.CONTRACT_NFT_STAKING ?? '';\nconst REWARD_TOKEN_DECIMALS = 18;\n\nexport const NFTStaking = () => {\n  const {\n    log,\n    connect,\n    contract,\n    account,\n    isOwner,\n    logs,\n    disconnect,\n    isConnecting,\n  } = useWeb3State(CONTRACT_NFT_STAKING, nftStakingAbi.abi);\n\n  const [tokenIdToStake, setTokenIdToStake] = useState<string>('');\n  const [tokenIdToUnstake, setTokenIdToUnstake] = useState<string>('');\n  const [fundAmount, setFundAmount] = useState<string>('');\n\n  const [stakedBalance, setStakedBalance] = useState<string | null>(null);\n  const [stakedTokens, setStakedTokens] = useState<string[] | null>(null);\n  const [earnedRewards, setEarnedRewards] = useState<string | null>(null);","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":0}}],["197",{"pageContent":"\n  const [stakedBalance, setStakedBalance] = useState<string | null>(null);\n  const [stakedTokens, setStakedTokens] = useState<string[] | null>(null);\n  const [earnedRewards, setEarnedRewards] = useState<string | null>(null);\n  const [totalStaked, setTotalStaked] = useState<string | null>(null);\n  const [rewardsRate, setRewardsRate] = useState<string | null>(null);\n  const [contractBalance, setContractBalance] = useState<string | null>(null); // Баланс reward\n  const [contractRewardTokenBalance, setContractRewardTokenBalance] = useState<\n    string | null\n  >(null);\n  const [rewardTokenSymbol, setRewardTokenSymbol] = useState<string | null>(\n    null\n  );\n\n  const fetchData = async () => {\n    if (!contract || !account) {\n      console.log('fetchData: Contract or account not ready yet.');\n      return;\n    }\n\n    console.log('fetchData: Starting data fetch...');\n    try {\n      console.log('fetchData: Fetching user data...');","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":1}}],["198",{"pageContent":"\n    console.log('fetchData: Starting data fetch...');\n    try {\n      console.log('fetchData: Fetching user data...');\n      const balance = await contract.stakedBalance(account);\n      setStakedBalance(balance.toString());\n      console.log('fetchData: Staked Balance:', balance.toString());\n\n      const tokens = await contract.stakedTokens(account);\n      const tokenIds = tokens.map((id: ethers.BigNumber) => id.toString());\n      setStakedTokens(tokenIds);\n      console.log('fetchData: Staked Tokens:', tokenIds);\n\n      const earned = await contract.earned(account);\n      const formattedEarned = ethers.utils.formatUnits(\n        earned,\n        REWARD_TOKEN_DECIMALS\n      );\n      setEarnedRewards(formattedEarned);\n      console.log('fetchData: Earned Rewards:', formattedEarned);\n\n      console.log('fetchData: Fetching global data...');\n      const total = await contract.totalStaked();\n      setTotalStaked(total.toString());","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":2}}],["199",{"pageContent":"\n      console.log('fetchData: Fetching global data...');\n      const total = await contract.totalStaked();\n      setTotalStaked(total.toString());\n      console.log('fetchData: Total Staked:', total.toString());\n\n      const rate = await contract.rewardsRate();\n      const formattedRate = ethers.utils.formatUnits(\n        rate,\n        REWARD_TOKEN_DECIMALS\n      );\n      setRewardsRate(formattedRate);\n      console.log('fetchData: Rewards Rate:', formattedRate);\n\n      console.log('fetchData: Fetching reward token info...');\n      const rewardTokenAddress = await contract.rewardToken();\n      console.log('fetchData: Reward Token Address:', rewardTokenAddress);\n\n      const rewardTokenContract = new ethers.Contract(\n        rewardTokenAddress,\n        [\n          'function balanceOf(address owner) view returns (uint256)',\n          'function symbol() view returns (string)',\n        ],\n        contract.provider\n      );\n\n      console.log('fetchData: Fetching contract balance...');","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":3}}],["200",{"pageContent":"        contract.provider\n      );\n\n      console.log('fetchData: Fetching contract balance...');\n      const bal = await rewardTokenContract.balanceOf(CONTRACT_NFT_STAKING);\n      const formattedBal = ethers.utils.formatUnits(bal, REWARD_TOKEN_DECIMALS);\n      setContractRewardTokenBalance(formattedBal);\n      console.log('fetchData: Contract Reward Token Balance:', formattedBal);\n\n      console.log('fetchData: Fetching token symbol...');\n      const symbol = await rewardTokenContract.symbol();\n      setRewardTokenSymbol(symbol);\n      console.log('fetchData: Reward Token Symbol:', symbol);\n\n      console.log('fetchData: All data fetched successfully.');\n\n      const contractBal =\n        await rewardTokenContract.balanceOf(CONTRACT_NFT_STAKING);\n      setContractBalance(\n        ethers.utils.formatUnits(contractBal, REWARD_TOKEN_DECIMALS)\n      );\n    } catch (err: any) {\n      console.error('fetchData: Error occurred:', err);\n      log(`Error fetching data: ${err.message || err}`);","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":4}}],["201",{"pageContent":"      );\n    } catch (err: any) {\n      console.error('fetchData: Error occurred:', err);\n      log(`Error fetching data: ${err.message || err}`);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, [contract, account]);\n\n  const handleStake = async () => {\n    if (!contract || !tokenIdToStake) {\n      log('Contract not connected or Token ID not provided.');\n      return;\n    }\n    try {\n      log(`Initiating stake for Token ID: ${tokenIdToStake}`);\n      const nftCollectionAddress = await contract.nftCollection();\n      const nftContract = new ethers.Contract(\n        nftCollectionAddress,\n        ['function approve(address to, uint256 tokenId) public returns (bool)'],\n        contract.signer\n      );\n\n      log(\n        `Approving NFT ${tokenIdToStake} for contract ${CONTRACT_NFT_STAKING}...`\n      );\n      const approveTx = await nftContract.approve(\n        CONTRACT_NFT_STAKING,\n        tokenIdToStake\n      );\n      log(`Approval transaction sent: ${approveTx.hash}`);","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":5}}],["202",{"pageContent":"        CONTRACT_NFT_STAKING,\n        tokenIdToStake\n      );\n      log(`Approval transaction sent: ${approveTx.hash}`);\n      await approveTx.wait();\n      log(`Approval confirmed for Token ID: ${tokenIdToStake}`);\n\n      const tx = await contract.stake(tokenIdToStake);\n      log(`Staking transaction sent: ${tx.hash}`);\n      await tx.wait();\n      log(`Successfully staked Token ID: ${tokenIdToStake}`);\n      setTokenIdToStake('');\n      fetchData();\n    } catch (err: any) {\n      log(`Staking failed: ${err.message}`);\n    }\n  };\n\n  const handleUnstake = async () => {\n    if (!contract || !tokenIdToUnstake) {\n      log('Contract not connected or Token ID not provided.');\n      return;\n    }\n    try {\n      log(`Initiating unstake for Token ID: ${tokenIdToUnstake}`);\n      const tx = await contract.unstake(tokenIdToUnstake);\n      log(`Unstaking transaction sent: ${tx.hash}`);\n      await tx.wait();\n      log(`Successfully unstaked Token ID: ${tokenIdToUnstake}`);","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":6}}],["203",{"pageContent":"      const tx = await contract.unstake(tokenIdToUnstake);\n      log(`Unstaking transaction sent: ${tx.hash}`);\n      await tx.wait();\n      log(`Successfully unstaked Token ID: ${tokenIdToUnstake}`);\n      setTokenIdToUnstake('');\n      fetchData();\n    } catch (err: any) {\n      log(`Unstaking failed: ${err.message}`);\n    }\n  };\n\n  const handleClaimRewards = async () => {\n    if (!contract) {\n      log('Contract not connected.');\n      return;\n    }\n    try {\n      log(`Initiating reward claim...`);\n      const tx = await contract.claimRewards();\n      log(`Claim transaction sent: ${tx.hash}`);\n      await tx.wait();\n      log(`Rewards successfully claimed!`);\n      fetchData();\n    } catch (err: any) {\n      log(`Claiming rewards failed: ${err.message}`);\n    }\n  };\n\n  const handleFundRewards = async () => {\n    if (!contract || !isOwner || !fundAmount) {\n      log('Contract not connected, not owner, or amount not provided.');\n      return;\n    }\n    try {","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":7}}],["204",{"pageContent":"      log('Contract not connected, not owner, or amount not provided.');\n      return;\n    }\n    try {\n      log(`Initiating funding of rewards with ${fundAmount} tokens...`);\n      const rewardTokenAddress = await contract.rewardToken();\n      const rewardTokenContract = new ethers.Contract(\n        rewardTokenAddress,\n        [\n          'function approve(address spender, uint256 amount) public returns (bool)',\n          'function transferFrom(address from, address to, uint256 amount) public returns (bool)',\n        ],\n        contract.signer\n      );\n\n      const amountInWei = ethers.utils.parseUnits(\n        fundAmount,\n        REWARD_TOKEN_DECIMALS\n      );\n      log(\n        `Approving ${fundAmount} reward tokens for contract ${CONTRACT_NFT_STAKING}...`\n      );\n      const approveTx = await rewardTokenContract.approve(\n        CONTRACT_NFT_STAKING,\n        amountInWei\n      );\n      log(`Approval transaction sent: ${approveTx.hash}`);\n      await approveTx.wait();","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":8}}],["205",{"pageContent":"        amountInWei\n      );\n      log(`Approval transaction sent: ${approveTx.hash}`);\n      await approveTx.wait();\n      log(`Approval confirmed for ${fundAmount} tokens.`);\n\n      const tx = await contract.fundRewards(amountInWei);\n      log(`Funding transaction sent: ${tx.hash}`);\n      await tx.wait();\n      log(`Successfully funded rewards with ${fundAmount} tokens.`);\n      setFundAmount('');\n      fetchData();\n    } catch (err: any) {\n      log(`Funding rewards failed: ${err.message}`);\n    }\n  };\n\n  if (!isOwner)\n    return (\n      <div\n        style={{\n          height: 'calc(100vh - 190px)',\n          padding: '20px',\n          fontFamily: 'Arial, sans-serif',\n        }}\n      >\n        You are not Owner!!!\n      </div>\n    );\n\n  return (\n    <div\n      style={{\n        height: 'calc(100vh - 190px)',\n        maxHeight: 'calc(100vh - 190px);',\n        overflowY: 'auto',\n        padding: '20px',\n        fontFamily: 'Arial, sans-serif',\n      }}\n    >","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":9}}],["206",{"pageContent":"        padding: '20px',\n        fontFamily: 'Arial, sans-serif',\n      }}\n    >\n      <h1>NFT Staking DApp</h1>\n\n      {!account ? (\n        <div>\n          <button onClick={connect} disabled={isConnecting}>\n            {isConnecting ? 'Connecting...' : 'Connect Wallet'}\n          </button>\n          <p>Please connect your wallet to interact.</p>\n        </div>\n      ) : (\n        <div>\n          <p>\n            <strong>Connected Account:</strong> {account}\n          </p>\n          <button onClick={disconnect}>Disconnect Wallet</button>\n\n          <h2>User Information</h2>\n          <p>\n            Staked NFT Balance:{' '}\n            {stakedBalance !== null ? stakedBalance : 'Loading...'}\n          </p>\n          <p>\n            Earned Rewards:{' '}\n            {earnedRewards !== null\n              ? `${earnedRewards} Reward Tokens`\n              : 'Loading...'}\n          </p>\n\n          <h3>Staked NFTs:</h3>\n          {stakedTokens !== null ? (","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":10}}],["207",{"pageContent":"          </p>\n\n          <h3>Staked NFTs:</h3>\n          {stakedTokens !== null ? (\n            stakedTokens.length > 0 ? (\n              <ul>\n                {stakedTokens.map((id) => (\n                  <li key={id}>Token ID: {id}</li>\n                ))}\n              </ul>\n            ) : (\n              <p>No NFTs currently staked.</p>\n            )\n          ) : (\n            <p>Loading staked NFTs...</p>\n          )}\n\n          <h2>Global Information</h2>\n          <p>\n            Total Staked NFTs:{' '}\n            {totalStaked !== null ? totalStaked : 'Loading...'}\n          </p>\n          <p>\n            Rewards Rate:{' '}\n            {rewardsRate !== null\n              ? `${rewardsRate} Tokens per 10s`\n              : 'Loading...'}\n          </p>\n          <p>\n            Reward Token Pool (on Staking Contract):\n            {contractRewardTokenBalance !== null && rewardTokenSymbol !== null\n              ? ` ${contractRewardTokenBalance} ${rewardTokenSymbol}`","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":11}}],["208",{"pageContent":"          <p>\n            Reward Token Pool (on Staking Contract):\n            {contractRewardTokenBalance !== null && rewardTokenSymbol !== null\n              ? ` ${contractRewardTokenBalance} ${rewardTokenSymbol}`\n              : ' Loading...'}\n          </p>\n          <p>\n            Reward Token Pool (on Contract):{' '}\n            {contractBalance !== null\n              ? `${contractBalance} Tokens`\n              : 'Loading...'}\n          </p>\n\n          <h2>Actions</h2>\n\n          <div style={{ marginBottom: '15px' }}>\n            <h3>Stake NFT</h3>\n            <input\n              type=\"number\"\n              placeholder=\"Token ID\"\n              value={tokenIdToStake}\n              onChange={(e) => setTokenIdToStake(e.target.value)}\n              style={{ marginRight: '10px', padding: '5px' }}\n            />\n            <button onClick={handleStake} disabled={!contract}>\n              Stake\n            </button>\n          </div>\n\n          <div style={{ marginBottom: '15px' }}>","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":12}}],["209",{"pageContent":"            </button>\n          </div>\n\n          <div style={{ marginBottom: '15px' }}>\n            <h3>Unstake NFT</h3>\n            <input\n              type=\"number\"\n              placeholder=\"Token ID\"\n              value={tokenIdToUnstake}\n              onChange={(e) => setTokenIdToUnstake(e.target.value)}\n              style={{ marginRight: '10px', padding: '5px' }}\n            />\n            <button onClick={handleUnstake} disabled={!contract}>\n              Unstake\n            </button>\n          </div>\n\n          <div style={{ marginBottom: '15px' }}>\n            <h3>Claim Rewards</h3>\n            <button onClick={handleClaimRewards} disabled={!contract}>\n              Claim Rewards\n            </button>\n          </div>\n\n          {isOwner && (\n            <div\n              style={{\n                marginBottom: '15px',\n                border: '1px solid orange',\n                padding: '10px',\n                borderRadius: '5px',\n              }}\n            >","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":13}}],["210",{"pageContent":"                padding: '10px',\n                borderRadius: '5px',\n              }}\n            >\n              <h3>👑 Owner: Fund Rewards</h3>\n              <input\n                type=\"text\"\n                placeholder=\"Amount of Reward Tokens\"\n                value={fundAmount}\n                onChange={(e) => setFundAmount(e.target.value)}\n                style={{ marginRight: '10px', padding: '5px' }}\n              />\n              <button\n                onClick={handleFundRewards}\n                disabled={!contract || !fundAmount}\n              >\n                Fund Rewards\n              </button>\n            </div>\n          )}\n\n          <h2>Logs</h2>\n          <div\n            style={{\n              border: '1px solid #ccc',\n              height: '200px',\n              overflowY: 'scroll',\n              padding: '10px',\n              backgroundColor: '#f9f9f9',\n            }}\n          >\n            {logs.map((entry, index) => (\n              <div","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":14}}],["211",{"pageContent":"            }}\n          >\n            {logs.map((entry, index) => (\n              <div\n                key={index}\n                style={{ marginBottom: '5px', fontSize: '14px' }}\n              >\n                <strong>{entry.time}</strong>: {entry.msg}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","metadata":{"source":"/Users/hisokawizard/Projects/somnia_relay_viewer/src/widgets/SpecificTestContract/NFTStaking.tsx","fileType":".tsx","chunk_index":15}}]]